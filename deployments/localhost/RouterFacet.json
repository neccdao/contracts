{
  "address": "0xb39d4d72a4f2748876b1AcbC844e4298B6939314",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePositionETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "directPoolDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swapETHToTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swapTokensToETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaa26e44b893c257f484c2729692e4ba6f49cf609e267264b499f2034344b2332",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xb39d4d72a4f2748876b1AcbC844e4298B6939314",
    "transactionIndex": 0,
    "gasUsed": "2271966",
    "logsBloom": "0x
    "blockHash": "0x61c4a2ee2ce61c9ddca685073f1ef4b1d457ca09dbd585f138909310210b9d51",
    "transactionHash": "0xaa26e44b893c257f484c2729692e4ba6f49cf609e267264b499f2034344b2332",
    "logs": [],
    "blockNumber": 54824301,
    "cumulativeGasUsed": "2271966",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "51e0a29016eb8a808231ef727f964484",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePositionETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swapETHToTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swapTokensToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Router/RouterFacet.sol\":\"RouterFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Router/RouterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../Vault/VaultLib.sol\\\";\\nimport \\\"./RouterLib.sol\\\";\\nimport \\\"../Vault/Facet.sol\\\";\\n\\ncontract RouterFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Swap(\\n        address account,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    receive() external payable {\\n        require(msg.sender == s.weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    function _sender() private view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function directPoolDeposit(address _token, uint256 _amount) external {\\n        IERC20(_token).safeTransferFrom(_sender(), address(this), _amount);\\n        IVault(address(this)).directPoolDeposit(_token);\\n    }\\n\\n    function swap(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external {\\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\\n        uint256 _amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\\n\\n        emit Swap(\\n            msg.sender,\\n            _path[0],\\n            _path[_path.length - 1],\\n            _amountIn,\\n            _amountOut\\n        );\\n    }\\n\\n    function swapETHToTokens(\\n        address[] memory _path,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external payable {\\n        require(_path[0] == s.weth, \\\"Router: weth not first in _path\\\");\\n        RouterLib._transferETHToVault(s);\\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\\n\\n        emit Swap(\\n            msg.sender,\\n            _path[0],\\n            _path[_path.length - 1],\\n            msg.value,\\n            amountOut\\n        );\\n    }\\n\\n    function swapTokensToETH(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external {\\n        require(_path[_path.length - 1] == s.weth, \\\"Router: invalid _path\\\");\\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, address(this));\\n        RouterLib._transferOutETH(s, amountOut, _receiver);\\n\\n        emit Swap(\\n            msg.sender,\\n            _path[0],\\n            _path[_path.length - 1],\\n            _amountIn,\\n            amountOut\\n        );\\n    }\\n\\n    function increasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external {\\n        if (_amountIn > 0) {\\n            IERC20(_path[0]).safeTransferFrom(\\n                _sender(),\\n                address(this),\\n                _amountIn\\n            );\\n        }\\n        if (_path.length > 1 && _amountIn > 0) {\\n            uint256 _amountOut = RouterLib._swap(\\n                s,\\n                _path,\\n                _minOut,\\n                address(this)\\n            );\\n            IERC20(_path[_path.length - 1]).safeTransfer(\\n                address(this),\\n                _amountOut\\n            );\\n        }\\n        RouterLib._increasePosition(\\n            s,\\n            _path[_path.length - 1],\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _price\\n        );\\n    }\\n\\n    function increasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external payable {\\n        require(_path[0] == s.weth, \\\"Router: invalid _path\\\");\\n        if (msg.value > 0) {\\n            RouterLib._transferETHToVault(s);\\n        }\\n        if (_path.length > 1 && msg.value > 0) {\\n            uint256 _amountOut = RouterLib._swap(\\n                s,\\n                _path,\\n                _minOut,\\n                address(this)\\n            );\\n            IERC20(_path[_path.length - 1]).safeTransfer(\\n                address(this),\\n                _amountOut\\n            );\\n        }\\n\\n        RouterLib._increasePosition(\\n            s,\\n            _path[_path.length - 1],\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _price\\n        );\\n    }\\n\\n    function decreasePosition(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price\\n    ) external {\\n        RouterLib._decreasePosition(\\n            s,\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _price\\n        );\\n    }\\n\\n    function decreasePositionETH(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address payable _receiver,\\n        uint256 _price\\n    ) external {\\n        uint256 _amountOut = RouterLib._decreasePosition(\\n            s,\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            address(this),\\n            _price\\n        );\\n\\n        RouterLib._transferOutETH(s, _amountOut, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0xadbb8de80679880f504901d7dc0e545f3720fd788932c7f4b205f18559a1e27d\",\"license\":\"MIT\"},\"contracts/facets/Router/RouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../Vault/VaultLib.sol\\\";\\n\\nlibrary RouterLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using RouterLib for LibExchangeStorage.Storage;\\n\\n    function _transferETHToVault(LibExchangeStorage.Storage storage s)\\n        internal\\n    {\\n        IWETH(s.weth).deposit{value: msg.value}();\\n        IERC20(s.weth).safeTransfer(address(this), msg.value);\\n    }\\n\\n    function _transferOutETH(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amountOut,\\n        address payable _receiver\\n    ) internal {\\n        IWETH(s.weth).withdraw(_amountOut);\\n\\n        _sendValue(s, _receiver, _amountOut);\\n    }\\n\\n    function _sendValue(\\n        LibExchangeStorage.Storage storage,\\n        address payable _recipient,\\n        uint256 amount\\n    ) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = _recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, _crecipient may have reverted\\\"\\n        );\\n    }\\n\\n    function _swap(\\n        LibExchangeStorage.Storage storage s,\\n        address[] memory _path,\\n        uint256 _minOut,\\n        address _receiver\\n    ) internal returns (uint256) {\\n        if (_path.length == 2) {\\n            return s._vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n\\n        revert(\\\"Router: invalid _path.length\\\");\\n    }\\n\\n    function _vaultSwap(\\n        LibExchangeStorage.Storage storage s,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _minOut,\\n        address _receiver\\n    )\\n        internal\\n        returns (\\n            // uint256 _amountIn\\n            uint256\\n        )\\n    {\\n        uint256 _amountOut;\\n\\n        if (_tokenOut == s.ndol) {\\n            // buyNDOL\\n            _amountOut = IVault(address(this)).buyNDOL(_tokenIn, _receiver);\\n        } else if (_tokenIn == s.ndol) {\\n            // sellNDOL\\n            _amountOut = IVault(address(this)).sellNDOL(_tokenOut, _receiver);\\n        } else {\\n            // swap\\n            _amountOut = IVault(address(this)).swap(\\n                _tokenIn,\\n                _tokenOut,\\n                _receiver\\n            );\\n        }\\n\\n        require(_amountOut >= _minOut, \\\"Router: insufficient amountOut\\\");\\n\\n        return _amountOut;\\n    }\\n\\n    function _sender() private view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _increasePosition(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) internal {\\n        if (_isLong) {\\n            require(\\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\\n                \\\"Router: mark price higher than limit\\\"\\n            );\\n        } else {\\n            require(\\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\\n                \\\"Router: mark price lower than limit\\\"\\n            );\\n        }\\n\\n        IVault(address(this)).increasePosition(\\n            _sender(),\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong\\n        );\\n    }\\n\\n    function _decreasePosition(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        if (_isLong) {\\n            require(\\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\\n                \\\"Router: mark price lower than limit\\\"\\n            );\\n        } else {\\n            require(\\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\\n                \\\"Router: mark price higher than limit\\\"\\n            );\\n        }\\n\\n        uint256 _amountOut = IVault(address(this)).decreasePosition(\\n            _sender(),\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver\\n        );\\n\\n        return _amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xd8a0d55b53528dd8cc3bc7c42b99318ddcede02501ebb50ae60207d8acef0149\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        onlyGov();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xc2f5c3feb5ea52eaeca64a71d95026a29e13245cc77dd5f93c384fce6ff8e4d6\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreaseNDOLAmount(address token, uint256 amount);\\n    event DecreaseNDOLAmount(address token, uint256 amount);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    function _getNextFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _intervals = block\\n            .timestamp\\n            .sub(s.lastFundingTimes[_token])\\n            .div(FUNDING_INTERVAL);\\n        uint256 _poolAmount = s.poolAmounts[_token];\\n        if (_poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            FUNDING_RATE_FACTOR\\n                .mul(s.reservedAmounts[_token])\\n                .mul(_intervals)\\n                .div(_poolAmount);\\n    }\\n\\n    function updateCumulativeFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        if (s.lastFundingTimes[_token] == 0) {\\n            s.lastFundingTimes[_token] = block\\n                .timestamp\\n                .div(FUNDING_INTERVAL)\\n                .mul(FUNDING_INTERVAL);\\n            return;\\n        }\\n\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = _getNextFundingRate(s, _token);\\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\\n            fundingRate\\n        );\\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\\n            FUNDING_INTERVAL\\n        );\\n\\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\\n    }\\n\\n    function adjustForDecimals(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 _decimalsDiv = _tokenDiv == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenDiv];\\n        uint256 _decimalsMul = _tokenMul == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenMul];\\n\\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\\n    }\\n\\n    function getMinPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                false,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function getMaxPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                true,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function isTokenWhitelisted(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(s.whitelistedTokens[_token], \\\"Vault: token not whitelisted\\\");\\n    }\\n\\n    function isPoolAmountBelowBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(s.poolAmounts[_token] <= balance, \\\"Vault: invalid increase\\\");\\n    }\\n\\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 prevBalance = s.tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        s.tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function transferOut(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\\n            _amount\\n        );\\n\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function tokenToUsdMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMaxPrice(_token, s.includeAmmPrice)\\n            );\\n    }\\n\\n    function usdToToken(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _usdAmount.mul(10**_decimals).div(_price);\\n    }\\n\\n    function tokenToUsdMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMinPrice(_token, includeAmmPrice)\\n            );\\n    }\\n\\n    function updateTokenBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\\n\\n        s.tokenBalances[_token] = _nextBalance;\\n    }\\n\\n    function validatePosition(uint256 _size, uint256 _collateral)\\n        internal\\n        pure\\n    {\\n        if (_size == 0) {\\n            require(_collateral == 0, \\\"Vault: collateral should be withdrawn\\\");\\n            return;\\n        }\\n        require(\\n            _size >= _collateral,\\n            \\\"Vault: _size must be more than _collateral\\\"\\n        );\\n    }\\n\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {\\n            return;\\n        }\\n        if (msg.sender == address(this)) {\\n            return;\\n        }\\n        revert(\\\"Vault: invalid msg.sender\\\");\\n    }\\n\\n    function validateTokens(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken\\n    ) internal view {\\n        require(_collateralToken == _indexToken, \\\"Vault: mismatched tokens\\\");\\n        isTokenWhitelisted(s, _collateralToken);\\n        isTokenWhitelisted(s, _indexToken);\\n    }\\n\\n    function getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _account,\\n                    _collateralToken,\\n                    _indexToken,\\n                    _isLong\\n                )\\n            );\\n    }\\n\\n    function _collectSwapFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        bool _isBuyingNDOL\\n    ) internal returns (uint256, uint256) {\\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\\n            s,\\n            _token,\\n            SWAP_FEE_BASIS_POINTS\\n        );\\n        uint256 _afterFeeAmount = _amount\\n            .mul(\\n                BASIS_POINTS_DIVISOR.sub(\\n                    _isBuyingNDOL ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\\n                )\\n            )\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\\n\\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\\n\\n        emit CollectSwapFees(\\n            _token,\\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\\n            _feeAmount\\n        );\\n        return (_feeAmount, _afterFeeAmount);\\n    }\\n\\n    function _increasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit IncreasePoolAmount(_token, _amount);\\n\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function _decreasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: poolAmount exceeded\\\"\\n        );\\n        isReservedAmountBelowPoolAmount(s, _token);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function isReservedAmountBelowPoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n    }\\n\\n    function _transferRemainingCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _receiver,\\n        uint256 _usdOut,\\n        uint256 _usdOutAfterFee\\n    ) internal returns (uint256) {\\n        if (_usdOut > 0) {\\n            VaultLib._decreasePoolAmount(\\n                s,\\n                _collateralToken,\\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\\n            );\\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                _usdOutAfterFee\\n            );\\n            VaultLib.transferOut(\\n                s,\\n                _collateralToken,\\n                _amountOutAfterFees,\\n                _receiver\\n            );\\n\\n            return _amountOutAfterFees;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _increaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.ndolAmounts[_token] = s.ndolAmounts[_token].add(_amount);\\n\\n        emit IncreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _decreaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _value = s.ndolAmounts[_token];\\n        // since NDOL can be minted using multiple assets\\n        // it is possible for the NDOL debt for a single asset to be less than zero\\n        // the NDOL debt is capped to zero for this case\\n        if (_value <= _amount) {\\n            s.ndolAmounts[_token] = 0;\\n            emit DecreaseNDOLAmount(_token, _value);\\n            return;\\n        }\\n        s.ndolAmounts[_token] = _value.sub(_amount);\\n\\n        emit DecreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _reduceCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256, uint256) {\\n        LibExchangeStorage.Position storage position = s.positions[\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\\n        ];\\n\\n        uint256 fee = _collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n            (bool _hasProfit, uint256 delta) = _getDelta(\\n                s,\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n            hasProfit = _hasProfit;\\n            // get the proportional change in pnl\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        if (usdOut < fee) {\\n            position.collateral = position.collateral.sub(fee);\\n            uint256 feeTokens = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                fee\\n            );\\n            VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\\n        }\\n\\n        emit UpdatePnl(\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\\n            hasProfit,\\n            adjustedDelta\\n        );\\n\\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\\n    }\\n\\n    function _collectMarginFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n\\n        uint256 fundingFee = _getFundingFee(\\n            s,\\n            _token,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\\n\\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _increaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: insufficient reserve\\\"\\n        );\\n\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\\n\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\\n\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _getDelta(\\n        LibExchangeStorage.Storage storage s,\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) internal view returns (bool, uint256) {\\n        require(_averagePrice > 0, \\\"Vault: invalid _averagePrice\\\");\\n        uint256 price = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n        uint256 priceDelta = _averagePrice > price\\n            ? _averagePrice.sub(price)\\n            : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp >\\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\\n            ? 0\\n            : s.minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function _getFundingFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal view returns (uint256) {\\n        if (_size == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\\n            _entryFundingRate\\n        );\\n        if (fundingRate == 0) {\\n            return 0;\\n        }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = _sizeDelta\\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function _getTargetAdjustedFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _fee\\n    ) internal view returns (uint256) {\\n        uint256 _initialAmount = s.ndolAmounts[_token];\\n        uint256 _targetAmount = _getTargetNDOLAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function _getTargetNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        uint256 _ndolSupply = IERC20(s.ndol).totalSupply();\\n        if (_ndolSupply == 0) {\\n            return 0;\\n        }\\n        uint256 _tokenWeight = s.tokenWeights[_token];\\n\\n        return _ndolSupply.mul(_tokenWeight).div(s.totalTokenWeight);\\n    }\\n}\\n\",\"keccak256\":\"0xd5876017bfebabcbb9fdc25b60cf2a089eaabecdd731ac352bfe763d76423932\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVault {\\n    function getRedemptionCollateralUsd(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setIsMintingEnabled(bool _isMintingEnabled) external;\\n\\n    function setFees(\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function setMaxNDOL(uint256 _maxNDOLBatchSize, uint256 _maxNDOLBuffer)\\n        external;\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function sellNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function BASIS_POINTS_DIVISOR() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function ndolAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _ndolAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getUtilisation(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    function adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) external view returns (uint256);\\n\\n    function withdrawFees(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xa4951a677e7140dc8a3d0a8b2e9d38b8ec11734ddbbae81f1660078fcb2bd4cd\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVaultPriceFeed {\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf24961f2f3cdb035b8b7a14596d22443f44bd141f4bd9725097d54dbdb22e5fa\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NDOL_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.exchange.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address ndol;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) ndolAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNDOLMinted;\\n        mapping(address => mapping(address => int256)) ndolMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xb93d4fae1622e4ef47346ad61e3c329fceaa52fa2f57f4dfb29fdc22fce1ab33\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf57a8817589fea0e66cd0b8a8cea33cec6ca4bf749c5cd68367ea6e70a8e0abb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060000160006101000a81548160ff02191690831515021790555061283e8061003d6000396000f3fe60806040526004361061007f5760003560e01c806390b64ad31161004e57806390b64ad3146101c2578063abe68eaa146101eb578063b32755de14610207578063b7ddc9921461022357610119565b80632d4ba6a71461011e578063430ed37c146101475780636023e9661461017057806390205d8c1461019957610119565b3661011957600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010e906116f8565b60405180910390fd5b005b600080fd5b34801561012a57600080fd5b5061014560048036038101906101409190611957565b61024c565b005b34801561015357600080fd5b5061016e60048036038101906101699190611a12565b6103fa565b005b34801561017c57600080fd5b5061019760048036038101906101929190611ab4565b610425565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190611b37565b61050d565b005b3480156101ce57600080fd5b506101e960048036038101906101e49190611bd9565b610528565b005b61020560048036038101906102009190611c19565b6105cb565b005b610221600480360381019061021c9190611c88565b61071b565b005b34801561022f57600080fd5b5061024a60048036038101906102459190611d31565b610896565b005b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600186516102979190611e1e565b815181106102a8576102a7611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd90611ecd565b60405180910390fd5b6103556103116109a9565b30858760008151811061032757610326611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b60006103646000868530610a3a565b905061037260008284610adf565b7fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233866000815181106103a8576103a7611e52565b5b602002602001015187600189516103bf9190611e1e565b815181106103d0576103cf611e52565b5b602002602001015187856040516103eb959493929190611f0b565b60405180910390a15050505050565b600061040d600089898989893089610b7e565b905061041b60008285610adf565b5050505050505050565b6104746104306109a9565b30858760008151811061044657610445611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b60006104836000868585610a3a565b90507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233866000815181106104bb576104ba611e52565b5b602002602001015187600189516104d29190611e1e565b815181106104e3576104e2611e52565b5b602002602001015187856040516104fe959493929190611f0b565b60405180910390a15050505050565b61051e600088888888888888610b7e565b5050505050505050565b61055c6105336109a9565b30838573ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff16635f7bc119836040518263ffffffff1660e01b81526004016105959190611f5e565b600060405180830381600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050505050565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360008151811061061b5761061a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090611fc5565b60405180910390fd5b6106836000610ce9565b60006106926000858585610a3a565b90507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233856000815181106106ca576106c9611e52565b5b602002602001015186600188516106e19190611e1e565b815181106106f2576106f1611e52565b5b6020026020010151348560405161070d959493929190611f0b565b60405180910390a150505050565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660008151811061076b5761076a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090611ecd565b60405180910390fd5b60003411156107dd576107dc6000610ce9565b5b600186511180156107ee5750600034115b156108585760006108026000888730610a3a565b905061085630828960018b516108189190611e1e565b8151811061082957610828611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b505b61088e6000876001895161086c9190611e1e565b8151811061087d5761087c611e52565b5b602002602001015187868686610e46565b505050505050565b60008511156108ef576108ee6108aa6109a9565b30878a6000815181106108c0576108bf611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b5b600187511180156109005750600085115b1561096a5760006109146000898730610a3a565b905061096830828a60018c5161092a9190611e1e565b8151811061093b5761093a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b505b6109a060008860018a5161097e9190611e1e565b8151811061098f5761098e611e52565b5b602002602001015188868686610e46565b50505050505050565b600033905090565b610a34846323b872dd60e01b8585856040516024016109d293929190611fe5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f8e565b50505050565b6000600284511415610a9c57610a9584600081518110610a5d57610a5c611e52565b5b602002602001015185600181518110610a7957610a78611e52565b5b602002602001015185858961105590949392919063ffffffff16565b9050610ad7565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90612068565b60405180910390fd5b949350505050565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401610b3c9190612088565b600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b50505050610b798382846112e6565b505050565b60008315610be85781610ba2888b60020160149054906101000a900460ff166113db565b1015610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda90612115565b60405180910390fd5b610c46565b81610c04888b60020160149054906101000a900460ff16611464565b1115610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c906121a7565b60405180910390fd5b5b60003073ffffffffffffffffffffffffffffffffffffffff166382a08490610c6c6114ed565b8b8b8b8b8b8b6040518863ffffffff1660e01b8152600401610c9497969594939291906121d6565b6020604051808303816000875af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061225a565b90508091505098975050505050505050565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b5050505050610dbd30348360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b50565b610e418363a9059cbb60e01b8484604051602401610ddf929190612287565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f8e565b505050565b8115610eae5780610e68858860020160149054906101000a900460ff16611464565b1115610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea0906121a7565b60405180910390fd5b610f0c565b80610eca858860020160149054906101000a900460ff166113db565b1015610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290612115565b60405180910390fd5b5b3073ffffffffffffffffffffffffffffffffffffffff166348d91abf610f306114ed565b878787876040518663ffffffff1660e01b8152600401610f549594939291906122b0565b600060405180830381600087803b158015610f6e57600080fd5b505af1158015610f82573d6000803e3d6000fd5b50505050505050505050565b6000610ff0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114f59092919063ffffffff16565b905060008151111561105057808060200190518101906110109190612318565b61104f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611046906123b7565b60405180910390fd5b5b505050565b6000808660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611135573073ffffffffffffffffffffffffffffffffffffffff1663ac1a91e487856040518363ffffffff1660e01b81526004016110eb9291906123d7565b6020604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e919061225a565b9050611296565b8660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611212573073ffffffffffffffffffffffffffffffffffffffff16637c1fb31786856040518363ffffffff1660e01b81526004016111c89291906123d7565b6020604051808303816000875af11580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b919061225a565b9050611295565b3073ffffffffffffffffffffffffffffffffffffffff1663933162128787866040518463ffffffff1660e01b815260040161124f93929190612400565b6020604051808303816000875af115801561126e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611292919061225a565b90505b5b838110156112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d090612483565b60405180910390fd5b8091505095945050505050565b80471015611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611320906124ef565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161134f90612540565b60006040518083038185875af1925050503d806000811461138c576040519150601f19603f3d011682016040523d82523d6000602084013e611391565b606091505b50509050806113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc906125c7565b60405180910390fd5b50505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b815260040161141b939291906125e7565b602060405180830381865afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c919061225a565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b81526004016114a4939291906125e7565b602060405180830381865afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061225a565b905092915050565b600033905090565b6060611504848460008561150d565b90509392505050565b606082471015611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154990612690565b60405180910390fd5b61155b85611621565b61159a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611591906126fc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115c3919061278b565b60006040518083038185875af1925050503d8060008114611600576040519150601f19603f3d011682016040523d82523d6000602084013e611605565b606091505b5091509150611615828286611634565b92505050949350505050565b600080823b905060008111915050919050565b6060831561164457829050611694565b6000835111156116575782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b91906127e6565b60405180910390fd5b9392505050565b600082825260208201905092915050565b7f526f757465723a20696e76616c69642073656e64657200000000000000000000600082015250565b60006116e260168361169b565b91506116ed826116ac565b602082019050919050565b60006020820190508181036000830152611711816116d5565b9050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61177a82611731565b810181811067ffffffffffffffff8211171561179957611798611742565b5b80604052505050565b60006117ac611718565b90506117b88282611771565b919050565b600067ffffffffffffffff8211156117d8576117d7611742565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611819826117ee565b9050919050565b6118298161180e565b811461183457600080fd5b50565b60008135905061184681611820565b92915050565b600061185f61185a846117bd565b6117a2565b90508083825260208201905060208402830185811115611882576118816117e9565b5b835b818110156118ab57806118978882611837565b845260208401935050602081019050611884565b5050509392505050565b600082601f8301126118ca576118c961172c565b5b81356118da84826020860161184c565b91505092915050565b6000819050919050565b6118f6816118e3565b811461190157600080fd5b50565b600081359050611913816118ed565b92915050565b6000611924826117ee565b9050919050565b61193481611919565b811461193f57600080fd5b50565b6000813590506119518161192b565b92915050565b6000806000806080858703121561197157611970611722565b5b600085013567ffffffffffffffff81111561198f5761198e611727565b5b61199b878288016118b5565b94505060206119ac87828801611904565b93505060406119bd87828801611904565b92505060606119ce87828801611942565b91505092959194509250565b60008115159050919050565b6119ef816119da565b81146119fa57600080fd5b50565b600081359050611a0c816119e6565b92915050565b600080600080600080600060e0888a031215611a3157611a30611722565b5b6000611a3f8a828b01611837565b9750506020611a508a828b01611837565b9650506040611a618a828b01611904565b9550506060611a728a828b01611904565b9450506080611a838a828b016119fd565b93505060a0611a948a828b01611942565b92505060c0611aa58a828b01611904565b91505092959891949750929550565b60008060008060808587031215611ace57611acd611722565b5b600085013567ffffffffffffffff811115611aec57611aeb611727565b5b611af8878288016118b5565b9450506020611b0987828801611904565b9350506040611b1a87828801611904565b9250506060611b2b87828801611837565b91505092959194509250565b600080600080600080600060e0888a031215611b5657611b55611722565b5b6000611b648a828b01611837565b9750506020611b758a828b01611837565b9650506040611b868a828b01611904565b9550506060611b978a828b01611904565b9450506080611ba88a828b016119fd565b93505060a0611bb98a828b01611837565b92505060c0611bca8a828b01611904565b91505092959891949750929550565b60008060408385031215611bf057611bef611722565b5b6000611bfe85828601611837565b9250506020611c0f85828601611904565b9150509250929050565b600080600060608486031215611c3257611c31611722565b5b600084013567ffffffffffffffff811115611c5057611c4f611727565b5b611c5c868287016118b5565b9350506020611c6d86828701611904565b9250506040611c7e86828701611837565b9150509250925092565b60008060008060008060c08789031215611ca557611ca4611722565b5b600087013567ffffffffffffffff811115611cc357611cc2611727565b5b611ccf89828a016118b5565b9650506020611ce089828a01611837565b9550506040611cf189828a01611904565b9450506060611d0289828a01611904565b9350506080611d1389828a016119fd565b92505060a0611d2489828a01611904565b9150509295509295509295565b600080600080600080600060e0888a031215611d5057611d4f611722565b5b600088013567ffffffffffffffff811115611d6e57611d6d611727565b5b611d7a8a828b016118b5565b9750506020611d8b8a828b01611837565b9650506040611d9c8a828b01611904565b9550506060611dad8a828b01611904565b9450506080611dbe8a828b01611904565b93505060a0611dcf8a828b016119fd565b92505060c0611de08a828b01611904565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e29826118e3565b9150611e34836118e3565b925082821015611e4757611e46611def565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f526f757465723a20696e76616c6964205f706174680000000000000000000000600082015250565b6000611eb760158361169b565b9150611ec282611e81565b602082019050919050565b60006020820190508181036000830152611ee681611eaa565b9050919050565b611ef68161180e565b82525050565b611f05816118e3565b82525050565b600060a082019050611f206000830188611eed565b611f2d6020830187611eed565b611f3a6040830186611eed565b611f476060830185611efc565b611f546080830184611efc565b9695505050505050565b6000602082019050611f736000830184611eed565b92915050565b7f526f757465723a2077657468206e6f7420666972737420696e205f7061746800600082015250565b6000611faf601f8361169b565b9150611fba82611f79565b602082019050919050565b60006020820190508181036000830152611fde81611fa2565b9050919050565b6000606082019050611ffa6000830186611eed565b6120076020830185611eed565b6120146040830184611efc565b949350505050565b7f526f757465723a20696e76616c6964205f706174682e6c656e67746800000000600082015250565b6000612052601c8361169b565b915061205d8261201c565b602082019050919050565b6000602082019050818103600083015261208181612045565b9050919050565b600060208201905061209d6000830184611efc565b92915050565b7f526f757465723a206d61726b207072696365206c6f776572207468616e206c6960008201527f6d69740000000000000000000000000000000000000000000000000000000000602082015250565b60006120ff60238361169b565b915061210a826120a3565b604082019050919050565b6000602082019050818103600083015261212e816120f2565b9050919050565b7f526f757465723a206d61726b20707269636520686967686572207468616e206c60008201527f696d697400000000000000000000000000000000000000000000000000000000602082015250565b600061219160248361169b565b915061219c82612135565b604082019050919050565b600060208201905081810360008301526121c081612184565b9050919050565b6121d0816119da565b82525050565b600060e0820190506121eb600083018a611eed565b6121f86020830189611eed565b6122056040830188611eed565b6122126060830187611efc565b61221f6080830186611efc565b61222c60a08301856121c7565b61223960c0830184611eed565b98975050505050505050565b600081519050612254816118ed565b92915050565b6000602082840312156122705761226f611722565b5b600061227e84828501612245565b91505092915050565b600060408201905061229c6000830185611eed565b6122a96020830184611efc565b9392505050565b600060a0820190506122c56000830188611eed565b6122d26020830187611eed565b6122df6040830186611eed565b6122ec6060830185611efc565b6122f960808301846121c7565b9695505050505050565b600081519050612312816119e6565b92915050565b60006020828403121561232e5761232d611722565b5b600061233c84828501612303565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006123a1602a8361169b565b91506123ac82612345565b604082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b60006040820190506123ec6000830185611eed565b6123f96020830184611eed565b9392505050565b60006060820190506124156000830186611eed565b6124226020830185611eed565b61242f6040830184611eed565b949350505050565b7f526f757465723a20696e73756666696369656e7420616d6f756e744f75740000600082015250565b600061246d601e8361169b565b915061247882612437565b602082019050919050565b6000602082019050818103600083015261249c81612460565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006124d9601d8361169b565b91506124e4826124a3565b602082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b600081905092915050565b50565b600061252a60008361250f565b91506125358261251a565b600082019050919050565b600061254b8261251d565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c205f60008201527f63726563697069656e74206d6179206861766520726576657274656400000000602082015250565b60006125b1603c8361169b565b91506125bc82612555565b604082019050919050565b600060208201905081810360008301526125e0816125a4565b9050919050565b60006060820190506125fc6000830186611eed565b61260960208301856121c7565b61261660408301846121c7565b949350505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061267a60268361169b565b91506126858261261e565b604082019050919050565b600060208201905081810360008301526126a98161266d565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126e6601d8361169b565b91506126f1826126b0565b602082019050919050565b60006020820190508181036000830152612715816126d9565b9050919050565b600081519050919050565b60005b8381101561274557808201518184015260208101905061272a565b83811115612754576000848401525b50505050565b60006127658261271c565b61276f818561250f565b935061277f818560208601612727565b80840191505092915050565b6000612797828461275a565b915081905092915050565b600081519050919050565b60006127b8826127a2565b6127c2818561169b565b93506127d2818560208601612727565b6127db81611731565b840191505092915050565b6000602082019050818103600083015261280081846127ad565b90509291505056fea2646970667358221220eff58999e718bb4fd6675c945b06fda8a8805a9aca56d9ce29c3282cc2adc91064736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c806390b64ad31161004e57806390b64ad3146101c2578063abe68eaa146101eb578063b32755de14610207578063b7ddc9921461022357610119565b80632d4ba6a71461011e578063430ed37c146101475780636023e9661461017057806390205d8c1461019957610119565b3661011957600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010e906116f8565b60405180910390fd5b005b600080fd5b34801561012a57600080fd5b5061014560048036038101906101409190611957565b61024c565b005b34801561015357600080fd5b5061016e60048036038101906101699190611a12565b6103fa565b005b34801561017c57600080fd5b5061019760048036038101906101929190611ab4565b610425565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190611b37565b61050d565b005b3480156101ce57600080fd5b506101e960048036038101906101e49190611bd9565b610528565b005b61020560048036038101906102009190611c19565b6105cb565b005b610221600480360381019061021c9190611c88565b61071b565b005b34801561022f57600080fd5b5061024a60048036038101906102459190611d31565b610896565b005b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600186516102979190611e1e565b815181106102a8576102a7611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd90611ecd565b60405180910390fd5b6103556103116109a9565b30858760008151811061032757610326611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b60006103646000868530610a3a565b905061037260008284610adf565b7fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233866000815181106103a8576103a7611e52565b5b602002602001015187600189516103bf9190611e1e565b815181106103d0576103cf611e52565b5b602002602001015187856040516103eb959493929190611f0b565b60405180910390a15050505050565b600061040d600089898989893089610b7e565b905061041b60008285610adf565b5050505050505050565b6104746104306109a9565b30858760008151811061044657610445611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b60006104836000868585610a3a565b90507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233866000815181106104bb576104ba611e52565b5b602002602001015187600189516104d29190611e1e565b815181106104e3576104e2611e52565b5b602002602001015187856040516104fe959493929190611f0b565b60405180910390a15050505050565b61051e600088888888888888610b7e565b5050505050505050565b61055c6105336109a9565b30838573ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b3073ffffffffffffffffffffffffffffffffffffffff16635f7bc119836040518263ffffffff1660e01b81526004016105959190611f5e565b600060405180830381600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050505050565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360008151811061061b5761061a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090611fc5565b60405180910390fd5b6106836000610ce9565b60006106926000858585610a3a565b90507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233856000815181106106ca576106c9611e52565b5b602002602001015186600188516106e19190611e1e565b815181106106f2576106f1611e52565b5b6020026020010151348560405161070d959493929190611f0b565b60405180910390a150505050565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660008151811061076b5761076a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090611ecd565b60405180910390fd5b60003411156107dd576107dc6000610ce9565b5b600186511180156107ee5750600034115b156108585760006108026000888730610a3a565b905061085630828960018b516108189190611e1e565b8151811061082957610828611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b505b61088e6000876001895161086c9190611e1e565b8151811061087d5761087c611e52565b5b602002602001015187868686610e46565b505050505050565b60008511156108ef576108ee6108aa6109a9565b30878a6000815181106108c0576108bf611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109b1909392919063ffffffff16565b5b600187511180156109005750600085115b1561096a5760006109146000898730610a3a565b905061096830828a60018c5161092a9190611e1e565b8151811061093b5761093a611e52565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b505b6109a060008860018a5161097e9190611e1e565b8151811061098f5761098e611e52565b5b602002602001015188868686610e46565b50505050505050565b600033905090565b610a34846323b872dd60e01b8585856040516024016109d293929190611fe5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f8e565b50505050565b6000600284511415610a9c57610a9584600081518110610a5d57610a5c611e52565b5b602002602001015185600181518110610a7957610a78611e52565b5b602002602001015185858961105590949392919063ffffffff16565b9050610ad7565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90612068565b60405180910390fd5b949350505050565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401610b3c9190612088565b600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b50505050610b798382846112e6565b505050565b60008315610be85781610ba2888b60020160149054906101000a900460ff166113db565b1015610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda90612115565b60405180910390fd5b610c46565b81610c04888b60020160149054906101000a900460ff16611464565b1115610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c906121a7565b60405180910390fd5b5b60003073ffffffffffffffffffffffffffffffffffffffff166382a08490610c6c6114ed565b8b8b8b8b8b8b6040518863ffffffff1660e01b8152600401610c9497969594939291906121d6565b6020604051808303816000875af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061225a565b90508091505098975050505050505050565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b5050505050610dbd30348360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610dc09092919063ffffffff16565b50565b610e418363a9059cbb60e01b8484604051602401610ddf929190612287565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f8e565b505050565b8115610eae5780610e68858860020160149054906101000a900460ff16611464565b1115610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea0906121a7565b60405180910390fd5b610f0c565b80610eca858860020160149054906101000a900460ff166113db565b1015610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290612115565b60405180910390fd5b5b3073ffffffffffffffffffffffffffffffffffffffff166348d91abf610f306114ed565b878787876040518663ffffffff1660e01b8152600401610f549594939291906122b0565b600060405180830381600087803b158015610f6e57600080fd5b505af1158015610f82573d6000803e3d6000fd5b50505050505050505050565b6000610ff0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114f59092919063ffffffff16565b905060008151111561105057808060200190518101906110109190612318565b61104f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611046906123b7565b60405180910390fd5b5b505050565b6000808660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611135573073ffffffffffffffffffffffffffffffffffffffff1663ac1a91e487856040518363ffffffff1660e01b81526004016110eb9291906123d7565b6020604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e919061225a565b9050611296565b8660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611212573073ffffffffffffffffffffffffffffffffffffffff16637c1fb31786856040518363ffffffff1660e01b81526004016111c89291906123d7565b6020604051808303816000875af11580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b919061225a565b9050611295565b3073ffffffffffffffffffffffffffffffffffffffff1663933162128787866040518463ffffffff1660e01b815260040161124f93929190612400565b6020604051808303816000875af115801561126e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611292919061225a565b90505b5b838110156112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d090612483565b60405180910390fd5b8091505095945050505050565b80471015611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611320906124ef565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161134f90612540565b60006040518083038185875af1925050503d806000811461138c576040519150601f19603f3d011682016040523d82523d6000602084013e611391565b606091505b50509050806113d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cc906125c7565b60405180910390fd5b50505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b815260040161141b939291906125e7565b602060405180830381865afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c919061225a565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b81526004016114a4939291906125e7565b602060405180830381865afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061225a565b905092915050565b600033905090565b6060611504848460008561150d565b90509392505050565b606082471015611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154990612690565b60405180910390fd5b61155b85611621565b61159a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611591906126fc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115c3919061278b565b60006040518083038185875af1925050503d8060008114611600576040519150601f19603f3d011682016040523d82523d6000602084013e611605565b606091505b5091509150611615828286611634565b92505050949350505050565b600080823b905060008111915050919050565b6060831561164457829050611694565b6000835111156116575782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b91906127e6565b60405180910390fd5b9392505050565b600082825260208201905092915050565b7f526f757465723a20696e76616c69642073656e64657200000000000000000000600082015250565b60006116e260168361169b565b91506116ed826116ac565b602082019050919050565b60006020820190508181036000830152611711816116d5565b9050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61177a82611731565b810181811067ffffffffffffffff8211171561179957611798611742565b5b80604052505050565b60006117ac611718565b90506117b88282611771565b919050565b600067ffffffffffffffff8211156117d8576117d7611742565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611819826117ee565b9050919050565b6118298161180e565b811461183457600080fd5b50565b60008135905061184681611820565b92915050565b600061185f61185a846117bd565b6117a2565b90508083825260208201905060208402830185811115611882576118816117e9565b5b835b818110156118ab57806118978882611837565b845260208401935050602081019050611884565b5050509392505050565b600082601f8301126118ca576118c961172c565b5b81356118da84826020860161184c565b91505092915050565b6000819050919050565b6118f6816118e3565b811461190157600080fd5b50565b600081359050611913816118ed565b92915050565b6000611924826117ee565b9050919050565b61193481611919565b811461193f57600080fd5b50565b6000813590506119518161192b565b92915050565b6000806000806080858703121561197157611970611722565b5b600085013567ffffffffffffffff81111561198f5761198e611727565b5b61199b878288016118b5565b94505060206119ac87828801611904565b93505060406119bd87828801611904565b92505060606119ce87828801611942565b91505092959194509250565b60008115159050919050565b6119ef816119da565b81146119fa57600080fd5b50565b600081359050611a0c816119e6565b92915050565b600080600080600080600060e0888a031215611a3157611a30611722565b5b6000611a3f8a828b01611837565b9750506020611a508a828b01611837565b9650506040611a618a828b01611904565b9550506060611a728a828b01611904565b9450506080611a838a828b016119fd565b93505060a0611a948a828b01611942565b92505060c0611aa58a828b01611904565b91505092959891949750929550565b60008060008060808587031215611ace57611acd611722565b5b600085013567ffffffffffffffff811115611aec57611aeb611727565b5b611af8878288016118b5565b9450506020611b0987828801611904565b9350506040611b1a87828801611904565b9250506060611b2b87828801611837565b91505092959194509250565b600080600080600080600060e0888a031215611b5657611b55611722565b5b6000611b648a828b01611837565b9750506020611b758a828b01611837565b9650506040611b868a828b01611904565b9550506060611b978a828b01611904565b9450506080611ba88a828b016119fd565b93505060a0611bb98a828b01611837565b92505060c0611bca8a828b01611904565b91505092959891949750929550565b60008060408385031215611bf057611bef611722565b5b6000611bfe85828601611837565b9250506020611c0f85828601611904565b9150509250929050565b600080600060608486031215611c3257611c31611722565b5b600084013567ffffffffffffffff811115611c5057611c4f611727565b5b611c5c868287016118b5565b9350506020611c6d86828701611904565b9250506040611c7e86828701611837565b9150509250925092565b60008060008060008060c08789031215611ca557611ca4611722565b5b600087013567ffffffffffffffff811115611cc357611cc2611727565b5b611ccf89828a016118b5565b9650506020611ce089828a01611837565b9550506040611cf189828a01611904565b9450506060611d0289828a01611904565b9350506080611d1389828a016119fd565b92505060a0611d2489828a01611904565b9150509295509295509295565b600080600080600080600060e0888a031215611d5057611d4f611722565b5b600088013567ffffffffffffffff811115611d6e57611d6d611727565b5b611d7a8a828b016118b5565b9750506020611d8b8a828b01611837565b9650506040611d9c8a828b01611904565b9550506060611dad8a828b01611904565b9450506080611dbe8a828b01611904565b93505060a0611dcf8a828b016119fd565b92505060c0611de08a828b01611904565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e29826118e3565b9150611e34836118e3565b925082821015611e4757611e46611def565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f526f757465723a20696e76616c6964205f706174680000000000000000000000600082015250565b6000611eb760158361169b565b9150611ec282611e81565b602082019050919050565b60006020820190508181036000830152611ee681611eaa565b9050919050565b611ef68161180e565b82525050565b611f05816118e3565b82525050565b600060a082019050611f206000830188611eed565b611f2d6020830187611eed565b611f3a6040830186611eed565b611f476060830185611efc565b611f546080830184611efc565b9695505050505050565b6000602082019050611f736000830184611eed565b92915050565b7f526f757465723a2077657468206e6f7420666972737420696e205f7061746800600082015250565b6000611faf601f8361169b565b9150611fba82611f79565b602082019050919050565b60006020820190508181036000830152611fde81611fa2565b9050919050565b6000606082019050611ffa6000830186611eed565b6120076020830185611eed565b6120146040830184611efc565b949350505050565b7f526f757465723a20696e76616c6964205f706174682e6c656e67746800000000600082015250565b6000612052601c8361169b565b915061205d8261201c565b602082019050919050565b6000602082019050818103600083015261208181612045565b9050919050565b600060208201905061209d6000830184611efc565b92915050565b7f526f757465723a206d61726b207072696365206c6f776572207468616e206c6960008201527f6d69740000000000000000000000000000000000000000000000000000000000602082015250565b60006120ff60238361169b565b915061210a826120a3565b604082019050919050565b6000602082019050818103600083015261212e816120f2565b9050919050565b7f526f757465723a206d61726b20707269636520686967686572207468616e206c60008201527f696d697400000000000000000000000000000000000000000000000000000000602082015250565b600061219160248361169b565b915061219c82612135565b604082019050919050565b600060208201905081810360008301526121c081612184565b9050919050565b6121d0816119da565b82525050565b600060e0820190506121eb600083018a611eed565b6121f86020830189611eed565b6122056040830188611eed565b6122126060830187611efc565b61221f6080830186611efc565b61222c60a08301856121c7565b61223960c0830184611eed565b98975050505050505050565b600081519050612254816118ed565b92915050565b6000602082840312156122705761226f611722565b5b600061227e84828501612245565b91505092915050565b600060408201905061229c6000830185611eed565b6122a96020830184611efc565b9392505050565b600060a0820190506122c56000830188611eed565b6122d26020830187611eed565b6122df6040830186611eed565b6122ec6060830185611efc565b6122f960808301846121c7565b9695505050505050565b600081519050612312816119e6565b92915050565b60006020828403121561232e5761232d611722565b5b600061233c84828501612303565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006123a1602a8361169b565b91506123ac82612345565b604082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b60006040820190506123ec6000830185611eed565b6123f96020830184611eed565b9392505050565b60006060820190506124156000830186611eed565b6124226020830185611eed565b61242f6040830184611eed565b949350505050565b7f526f757465723a20696e73756666696369656e7420616d6f756e744f75740000600082015250565b600061246d601e8361169b565b915061247882612437565b602082019050919050565b6000602082019050818103600083015261249c81612460565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006124d9601d8361169b565b91506124e4826124a3565b602082019050919050565b60006020820190508181036000830152612508816124cc565b9050919050565b600081905092915050565b50565b600061252a60008361250f565b91506125358261251a565b600082019050919050565b600061254b8261251d565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c205f60008201527f63726563697069656e74206d6179206861766520726576657274656400000000602082015250565b60006125b1603c8361169b565b91506125bc82612555565b604082019050919050565b600060208201905081810360008301526125e0816125a4565b9050919050565b60006060820190506125fc6000830186611eed565b61260960208301856121c7565b61261660408301846121c7565b949350505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061267a60268361169b565b91506126858261261e565b604082019050919050565b600060208201905081810360008301526126a98161266d565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126e6601d8361169b565b91506126f1826126b0565b602082019050919050565b60006020820190508181036000830152612715816126d9565b9050919050565b600081519050919050565b60005b8381101561274557808201518184015260208101905061272a565b83811115612754576000848401525b50505050565b60006127658261271c565b61276f818561250f565b935061277f818560208601612727565b80840191505092915050565b6000612797828461275a565b915081905092915050565b600081519050919050565b60006127b8826127a2565b6127c2818561169b565b93506127d2818560208601612727565b6127db81611731565b840191505092915050565b6000602082019050818103600083015261280081846127ad565b90509291505056fea2646970667358221220eff58999e718bb4fd6675c945b06fda8a8805a9aca56d9ce29c3282cc2adc91064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12605,
        "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21244_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)21129_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)21129_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)21129_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 21116,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21118,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21120,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21122,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21124,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21126,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 21128,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)21244_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 21131,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21133,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21135,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21137,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21139,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21141,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21144,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 21148,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21153,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)21129_storage)"
          },
          {
            "astId": 21157,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21161,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21165,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21169,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21173,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "ndolAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21177,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21181,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21185,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21189,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21193,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21197,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21201,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21203,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 21207,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21211,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21215,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21219,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21223,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21227,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21229,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 21231,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 21235,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 21237,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "totalNDOLMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 21243,
            "contract": "contracts/facets/Router/RouterFacet.sol:RouterFacet",
            "label": "ndolMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}