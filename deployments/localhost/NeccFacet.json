{
  "address": "0xeb39EEc833c34f264e75b8fE18328e2Ef992099D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7844b6ce7af288c31bd8d5a18bd3839d830ac535388f9c2f9ee4f0140bcc240c",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xeb39EEc833c34f264e75b8fE18328e2Ef992099D",
    "transactionIndex": 0,
    "gasUsed": "2570532",
    "logsBloom": "0x
    "blockHash": "0x11687d320cf62cef9674b866c8ba837b65524c60521e6570afd1a4f7e0369750",
    "transactionHash": "0x7844b6ce7af288c31bd8d5a18bd3839d830ac535388f9c2f9ee4f0140bcc240c",
    "logs": [],
    "blockNumber": 54403836,
    "cumulativeGasUsed": "2570532",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b25fdb449e81246734de55deaa372783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"holder\":\"approver of allowance\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"token allowance\"}},\"approve(address,uint256)\":{\"details\":\"prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\",\"params\":{\"amount\":\"quantity of tokens approved for spending\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"token balance\"}},\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to decrease allowance\",\"spender\":\"address whose allowance to decrease\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to increase allowance\",\"spender\":\"address whose allowance to increase\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"name()\":{\"returns\":{\"_0\":\"token name\"}},\"nonces(address)\":{\"details\":\"inhertidoc IERC2612\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated.\",\"params\":{\"amount\":\"quantity of tokens to approve\",\"owner\":\"holder of tokens and signer of permit\",\"r\":\"secp256k1 'r' value\",\"s\":\"secp256k1 's' value\",\"spender\":\"beneficiary of approval\",\"v\":\"secp256k1 'v' value\"}},\"symbol()\":{\"returns\":{\"_0\":\"token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"token supply\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"holder\":\"holder of tokens prior to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"query the allowance granted from given holder to given spender\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to spender to spend tokens\"},\"balanceOf(address)\":{\"notice\":\"query the token balance of given account\"},\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"decrease spend amount granted to spender\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"increase spend amount granted to spender\"},\"name()\":{\"notice\":\"return token name\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"approve spender to transfer tokens held by owner via signature\"},\"symbol()\":{\"notice\":\"return token symbol\"},\"totalSupply()\":{\"notice\":\"query the total minted token supply\"},\"transfer(address,uint256)\":{\"notice\":\"transfer tokens to given recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer tokens to given recipient on behalf of given holder\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Necc/NeccFacet.sol\":\"NeccFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Elliptic Curve Digital Signature Algorithm (ECDSA) operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary ECDSA {\\n    /**\\n     * @notice recover signer of hashed message from signature\\n     * @param hash hashed data payload\\n     * @param signature signed data payload\\n     * @return recovered message signer\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(signature.length == 65, 'ECDSA: invalid signature length');\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice recover signer of hashed message from signature v, r, and s values\\n     * @param hash hashed data payload\\n     * @param v signature \\\"v\\\" value\\n     * @param r signature \\\"r\\\" value\\n     * @param s signature \\\"s\\\" value\\n     * @return recovered message signer\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'ECDSA: invalid signature');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice generate an \\\"Ethereum Signed Message\\\" in the format returned by the eth_sign JSON-RPC method\\n     * @param hash hashed data payload\\n     * @return signed message hash\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x56a804af4ee7653c1b4d67f8d68156377f4e87d2058badcd0730ab760bb91e76\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20Base } from './base/ERC20Base.sol';\\nimport { ERC20Extended } from './extended/ERC20Extended.sol';\\nimport { ERC20Metadata } from './metadata/ERC20Metadata.sol';\\n\\n/**\\n * @title SolidState ERC20 implementation, including recommended extensions\\n */\\nabstract contract ERC20 is ERC20Base, ERC20Extended, ERC20Metadata {\\n\\n}\\n\",\"keccak256\":\"0xfc09ac97ea954c88edb5037bf46f6d6726786731e34ffecbdd6a5e5388016437\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(address holder, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdee3bc4616540528afc0ccefed67b15dbdf98962bd3260cff0029193f81de23a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/IERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x1d5cf12e795a2f7a9ab6f7672ddcb1d2526673341059c638f3d186577402cb2b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '../IERC20.sol';\\nimport { ERC20BaseInternal } from './ERC20BaseInternal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20Base is IERC20, ERC20BaseInternal {\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function allowance(address holder, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC20BaseStorage.layout().allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = ERC20BaseStorage.layout().allowances[holder][\\n            msg.sender\\n        ];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(holder, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(holder, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x49f7af2905ccb45a291f7a24fae62efb8bcc477e7da540798c63bd2d00ed8d8b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from '../IERC20Internal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20BaseInternal is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function _totalSupply() internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().totalSupply;\\n    }\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ERC20BaseStorage.layout().balances[account];\\n    }\\n\\n    /**\\n     * @notice enable spender to spend tokens on behalf of holder\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\\n\\n        emit Approval(holder, spender, amount);\\n    }\\n\\n    /**\\n     * @notice mint tokens for given account\\n     * @param account recipient of minted tokens\\n     * @param amount quantity of tokens minted\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        l.totalSupply += amount;\\n        l.balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice burn tokens held by given account\\n     * @param account holder of burned tokens\\n     * @param amount quantity of tokens burned\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 balance = l.balances[account];\\n        require(balance >= amount, 'ERC20: burn amount exceeds balance');\\n        unchecked {\\n            l.balances[account] = balance - amount;\\n        }\\n        l.totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens from holder to recipient\\n     * @param holder owner of tokens to be transferred\\n     * @param recipient beneficiary of transfer\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _transfer(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(holder, recipient, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 holderBalance = l.balances[holder];\\n        require(\\n            holderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            l.balances[holder] = holderBalance - amount;\\n        }\\n        l.balances[recipient] += amount;\\n\\n        emit Transfer(holder, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice ERC20 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xefcc47e90f48d05a722de066a3dd2a99e84804762a7a624acaf228c2b2c498ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20BaseStorage {\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9714dbad5c2815b8c2da10b97d6145d5c1da48c534fdea83a50132810d0253e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/ERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20Base, ERC20BaseStorage } from '../base/ERC20Base.sol';\\n\\n/**\\n * @title ERC20 safe approval extensions\\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n */\\nabstract contract ERC20Extended is ERC20Base {\\n    /**\\n     * @notice increase spend amount granted to spender\\n     * @param spender address whose allowance to increase\\n     * @param amount quantity by which to increase allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function increaseAllowance(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        unchecked {\\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\\n                .layout()\\n                .allowances[msg.sender];\\n\\n            uint256 allowance = allowances[spender];\\n            require(\\n                allowance + amount >= allowance,\\n                'ERC20Extended: excessive allowance'\\n            );\\n\\n            _approve(\\n                msg.sender,\\n                spender,\\n                allowances[spender] = allowance + amount\\n            );\\n\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice decrease spend amount granted to spender\\n     * @param spender address whose allowance to decrease\\n     * @param amount quantity by which to decrease allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        unchecked {\\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\\n                .layout()\\n                .allowances[msg.sender];\\n\\n            uint256 allowance = allowances[spender];\\n            require(\\n                amount <= allowance,\\n                'ERC20Extended: insufficient allowance'\\n            );\\n\\n            _approve(\\n                msg.sender,\\n                spender,\\n                allowances[spender] = allowance - amount\\n            );\\n\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb5dd2a1f2e2a65abecd429766ebe92ef6072f3a8efecbc367e1f1e0c34d7fc8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20MetadataStorage } from './ERC20MetadataStorage.sol';\\nimport { IERC20Metadata } from './IERC20Metadata.sol';\\n\\n/**\\n * @title ERC20 metadata extensions\\n */\\nabstract contract ERC20Metadata is IERC20Metadata {\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC20MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC20MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return ERC20MetadataStorage.layout().decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xf663e8fe2c69023abb9efd080e1b481e030eed442d953e5163f459ac460d748b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Metadata');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setName(Layout storage l, string memory name) internal {\\n        l.name = name;\\n    }\\n\\n    function setSymbol(Layout storage l, string memory symbol) internal {\\n        l.symbol = symbol;\\n    }\\n\\n    function setDecimals(Layout storage l, uint8 decimals) internal {\\n        l.decimals = decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7695b0b05a2bc2ccd7341f32f852477527f685daaf9c0057f8ff9fc8f238a734\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9065db15c6fc9249fbb8f8c2149b6894fbf25e18d7333b310193e2201be747b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ECDSA } from '../../../cryptography/ECDSA.sol';\\nimport { ERC20Base } from '../base/ERC20Base.sol';\\nimport { ERC20Metadata } from '../metadata/ERC20Metadata.sol';\\nimport { ERC20PermitStorage } from './ERC20PermitStorage.sol';\\nimport { IERC2612 } from './IERC2612.sol';\\n\\n/**\\n * @title ERC20 extension with support for ERC2612 permits\\n * @dev derived from https://github.com/soliditylabs/ERC20-Permit (MIT license)\\n */\\nabstract contract ERC20Permit is IERC2612, ERC20Base, ERC20Metadata {\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @inheritdoc IERC2612\\n     * @dev If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\\n     * EIP712 Domain Separator is automatically recalculated.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, 'ERC20Permit: expired deadline');\\n\\n        // Assembly for more efficiently computing:\\n        // bytes32 hashStruct = keccak256(\\n        //   abi.encode(\\n        //     _PERMIT_TYPEHASH,\\n        //     owner,\\n        //     spender,\\n        //     amount,\\n        //     _nonces[owner].current(),\\n        //     deadline\\n        //   )\\n        // );\\n\\n        bytes32 hashStruct;\\n        uint256 nonce = ERC20PermitStorage.layout().nonces[owner];\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n            mstore(\\n                memPtr,\\n                0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n            )\\n            mstore(add(memPtr, 32), owner)\\n            mstore(add(memPtr, 64), spender)\\n            mstore(add(memPtr, 96), amount)\\n            mstore(add(memPtr, 128), nonce)\\n            mstore(add(memPtr, 160), deadline)\\n\\n            hashStruct := keccak256(memPtr, 192)\\n        }\\n\\n        bytes32 eip712DomainHash = _domainSeparator();\\n\\n        // Assembly for more efficient computing:\\n        // bytes32 hash = keccak256(\\n        //   abi.encodePacked(uint16(0x1901), eip712DomainHash, hashStruct)\\n        // );\\n\\n        bytes32 hash;\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(\\n                memPtr,\\n                0x1901000000000000000000000000000000000000000000000000000000000000\\n            ) // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash) // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\\n\\n            hash := keccak256(memPtr, 66)\\n        }\\n\\n        address signer = hash.recover(v, r, s);\\n\\n        require(signer == owner, 'ERC20Permit: invalid signature');\\n\\n        ERC20PermitStorage.layout().nonces[owner]++;\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev inhertidoc IERC2612\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces[owner];\\n    }\\n\\n    /**\\n     * @notice update domain separator for new chain ID\\n     * @return new domain separator\\n     */\\n    function _updateDomainSeparator() private returns (bytes32) {\\n        uint256 chainId = _chainId();\\n\\n        // no need for assembly, running very rarely\\n        bytes32 newDomainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n                ),\\n                keccak256(bytes(name())), // ERC-20 Name\\n                keccak256(bytes('1')), // Version\\n                chainId,\\n                address(this)\\n            )\\n        );\\n\\n        ERC20PermitStorage.layout().domainSeparators[\\n            chainId\\n        ] = newDomainSeparator;\\n\\n        return newDomainSeparator;\\n    }\\n\\n    /**\\n     * @notice update chain ID if changed and return domain separator\\n     * @return domain separator\\n     */\\n    function _domainSeparator() private returns (bytes32) {\\n        bytes32 domainSeparator = ERC20PermitStorage.layout().domainSeparators[\\n            _chainId()\\n        ];\\n\\n        if (domainSeparator != 0x00) {\\n            return domainSeparator;\\n        }\\n\\n        return _updateDomainSeparator();\\n    }\\n\\n    /**\\n     * @notice get the current chain ID\\n     * @return chainId chain ID\\n     */\\n    function _chainId() private view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35f9325ea7514ba330571a94ec8694ad30842eb48b0f5e5da15d8a3afa759d24\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20PermitStorage {\\n    struct Layout {\\n        mapping(address => uint256) nonces;\\n        // Mapping of ChainID to domain separators. This is a very gas efficient way\\n        // to not recalculate the domain separator on every call, while still\\n        // automatically detecting ChainID changes.\\n        mapping(uint256 => bytes32) domainSeparators;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Permit');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce331ee66ec27140c325285345ba9a4af8ea676891889e8d74fad0c0a20c52bd\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC2612 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @notice approve spender to transfer tokens held by owner via signature\\n     * @dev this function may be vulnerable to approval replay attacks\\n     * @param owner holder of tokens and signer of permit\\n     * @param spender beneficiary of approval\\n     * @param amount quantity of tokens to approve\\n     * @param v secp256k1 'v' value\\n     * @param r secp256k1 'r' value\\n     * @param s secp256k1 's' value\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice get the current ERC2612 nonce for the given address\\n     * @return current nonce\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x70f20ef3c4d2babd515063813e8f7dc8bb3e106b9cd84029763813df180ba706\",\"license\":\"MIT\"},\"contracts/facets/Necc/NeccFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {ERC20, ERC20Extended} from \\\"@solidstate/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Permit} from \\\"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\\\";\\nimport {ERC20BaseStorage} from \\\"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\\\";\\nimport {LibNeccStorage} from \\\"../../lib/LibNeccStorage.sol\\\";\\n\\ncontract NeccFacet is ERC20, ERC20Permit {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using LibNeccStorage for LibNeccStorage.Layout;\\n\\n    function initialize(address _vault) external {\\n        LibNeccStorage._onlyGov();\\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\\n\\n        s.setName(\\\"Necc\\\");\\n        s.setSymbol(\\\"NECC\\\");\\n        s.setDecimals(9);\\n        n._addVault(_vault);\\n    }\\n\\n    function setGov(address _newOwner) public {\\n        LibNeccStorage._setGov(_newOwner);\\n    }\\n\\n    function gov() public view returns (address) {\\n        return LibNeccStorage._gov();\\n    }\\n\\n    function vaults(address vault) public view returns (bool) {\\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\\n        return n._vaults(vault);\\n    }\\n\\n    function addVault(address _vault) external {\\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\\n        n._addVault(_vault);\\n    }\\n\\n    function removeVault(address _vault) external {\\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\\n        n._removeVault(_vault);\\n    }\\n\\n    function mint(address _account, uint256 _amount) external {\\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\\n        n._onlyVaults(msg.sender);\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function burnFrom(address _account, uint256 _amount) public virtual {\\n        _burnFrom(_account, _amount);\\n    }\\n\\n    function _burnFrom(address _account, uint256 _amount) internal {\\n        decreaseAllowance(_account, _amount);\\n        _burn(_account, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1b94aec43ba3513c8d389e4b63f64ef39d9169994914a1b8490d3994425530d7\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibNeccStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./LibDiamond.sol\\\";\\n\\nlibrary LibNeccStorage {\\n    struct Layout {\\n        mapping(address => bool) vaults;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"necc.dao.necc.storage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function _onlyVaults(Layout storage n, address _vault) internal view {\\n        require(n.vaults[_vault], \\\"NDOL: only vaults\\\");\\n    }\\n\\n    function _onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _gov() internal view returns (address) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.contractOwner;\\n    }\\n\\n    function _addVault(Layout storage n, address _vault) internal {\\n        _onlyGov();\\n        n.vaults[_vault] = true;\\n    }\\n\\n    function _removeVault(Layout storage n, address _vault) internal {\\n        _onlyGov();\\n        n.vaults[_vault] = false;\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n\\n    function _vaults(Layout storage n, address vault)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return n.vaults[vault];\\n    }\\n}\\n\",\"keccak256\":\"0x8f3edbfff2766b0929ca3b9d3a61012d55b7c36c22fc43f3ab77eb8cb2b3e550\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dc7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806379cc6790116100b8578063a9059cbb1161007c578063a9059cbb1461039d578063c4d66de8146103cd578063ceb68c23146103e9578063cfad57a214610405578063d505accf14610421578063dd62ed3e1461043d57610142565b806379cc6790146102d35780637ecebe00146102ef57806395d89b411461031f578063a457c2d71461033d578063a622ee7c1461036d57610142565b8063256b5a021161010a578063256b5a0214610201578063313ce5671461021d578063395093511461023b57806340c10f191461026b57806342966c681461028757806370a08231146102a357610142565b806306fdde0314610147578063095ea7b31461016557806312d43a511461019557806318160ddd146101b357806323b872dd146101d1575b600080fd5b61014f61046d565b60405161015c9190611e54565b60405180910390f35b61017f600480360381019061017a9190611f0f565b610508565b60405161018c9190611f6a565b60405180910390f35b61019d61051f565b6040516101aa9190611f94565b60405180910390f35b6101bb61052e565b6040516101c89190611fbe565b60405180910390f35b6101eb60048036038101906101e69190611fd9565b61053d565b6040516101f89190611f6a565b60405180910390f35b61021b6004803603810190610216919061202c565b61062f565b005b610225610652565b6040516102329190612075565b60405180910390f35b61025560048036038101906102509190611f0f565b610672565b6040516102629190611f6a565b60405180910390f35b61028560048036038101906102809190611f0f565b6107a1565b005b6102a1600480360381019061029c9190612090565b6107cf565b005b6102bd60048036038101906102b8919061202c565b6107dc565b6040516102ca9190611fbe565b60405180910390f35b6102ed60048036038101906102e89190611f0f565b6107ee565b005b6103096004803603810190610304919061202c565b6107fc565b6040516103169190611fbe565b60405180910390f35b61032761084e565b6040516103349190611e54565b60405180910390f35b61035760048036038101906103529190611f0f565b6108e9565b6040516103649190611f6a565b60405180910390f35b6103876004803603810190610382919061202c565b610a16565b6040516103949190611f6a565b60405180910390f35b6103b760048036038101906103b29190611f0f565b610a3e565b6040516103c49190611f6a565b60405180910390f35b6103e760048036038101906103e2919061202c565b610a55565b005b61040360048036038101906103fe919061202c565b610b31565b005b61041f600480360381019061041a919061202c565b610b54565b005b61043b6004803603810190610436919061211f565b610b60565b005b610457600480360381019061045291906121c1565b610d83565b6040516104649190611fbe565b60405180910390f35b6060610477610e13565b600001805461048590612230565b80601f01602080910402602001604051908101604052809291908181526020018280546104b190612230565b80156104fe5780601f106104d3576101008083540402835291602001916104fe565b820191906000526020600020905b8154815290600101906020018083116104e157829003601f168201915b5050505050905090565b6000610515338484610e40565b6001905092915050565b6000610529611014565b905090565b600061053861104c565b905090565b60008061054861105f565b60010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610602906122d4565b60405180910390fd5b6106188533858403610e40565b61062385858561108c565b60019150509392505050565b6000610639611318565b905061064e828261134590919063ffffffff16565b5050565b600061065c610e13565b60020160009054906101000a900460ff16905090565b60008061067d61105f565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808482011015610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90612366565b60405180910390fd5b61079533868684018560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055610e40565b60019250505092915050565b60006107ab611318565b90506107c033826113ab90919063ffffffff16565b6107ca838361143d565b505050565b6107d933826115a3565b50565b60006107e782611783565b9050919050565b6107f882826117d5565b5050565b60006108066117ee565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060610858610e13565b600101805461086690612230565b80601f016020809104026020016040519081016040528092919081815260200182805461089290612230565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050905090565b6000806108f461105f565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808411156109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b3906123f8565b60405180910390fd5b610a0a33868684038560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055610e40565b60019250505092915050565b600080610a21611318565b9050610a36838261181b90919063ffffffff16565b915050919050565b6000610a4b33848461108c565b6001905092915050565b610a5d611874565b6000610a67610e13565b90506000610a73611318565b9050610abd6040518060400160405280600481526020017f4e656363000000000000000000000000000000000000000000000000000000008152508361187e90919063ffffffff16565b610b056040518060400160405280600481526020017f4e454343000000000000000000000000000000000000000000000000000000008152508361189b90919063ffffffff16565b610b196009836118b890919063ffffffff16565b610b2c838261134590919063ffffffff16565b505050565b6000610b3b611318565b9050610b5082826118d990919063ffffffff16565b5050565b610b5d8161193f565b50565b83421115610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90612464565b60405180910390fd5b600080610bae6117ee565b60000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528960208201528860408201528760608201528160808201528660a082015260c081209250506000610c4661199a565b905060006040517f19010000000000000000000000000000000000000000000000000000000000008152826002820152846022820152604281209150506000610c9c888888856119e5909392919063ffffffff16565b90508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d03906124d0565b60405180910390fd5b610d146117ee565b60000160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610d659061251f565b9190505550610d758c8c8c610e40565b505050505050505050505050565b6000610d8d61105f565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea7906125da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f179061266c565b60405180910390fd5b80610f2961105f565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110079190611fbe565b60405180910390a3505050565b60008061101f611b70565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600061105661105f565b60020154905090565b6000807fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f3906126fe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116390612790565b60405180910390fd5b611177838383611b9d565b600061118161105f565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390612822565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190612842565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516113099190611fbe565b60405180910390a35050505050565b6000807f5d70cc522e320a58bfb729d340c4fbb499df72d53958e8375b19ef8b8b6c1d6590508091505090565b61134d611874565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b8160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611439576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611430906128e4565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490612950565b60405180910390fd5b6114b960008383611b9d565b60006114c361105f565b9050818160020160008282546114d99190612842565b92505081905550818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115319190612842565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115969190611fbe565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160a906129e2565b60405180910390fd5b61161f82600083611b9d565b600061162961105f565b905060008160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90612a74565b60405180910390fd5b8281038260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828260020160008282546117109190612a94565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516117759190611fbe565b60405180910390a350505050565b600061178d61105f565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117df82826108e9565b506117ea82826115a3565b5050565b6000807fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb990508091505090565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61187c611ba2565b565b80826000019080519060200190611896929190611d18565b505050565b808260010190805190602001906118b3929190611d18565b505050565b808260020160006101000a81548160ff021916908360ff1602179055505050565b6118e1611874565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611947611ba2565b6000611951611b70565b9050818160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806119a56117ee565b60010160006119b2611c3d565b81526020019081526020016000205490506000801b81146119d657809150506119e2565b6119de611c45565b9150505b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4490612b3a565b60405180910390fd5b601b8460ff161480611a625750601c8460ff16145b611aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9890612bcc565b60405180910390fd5b600060018686868660405160008152602001604052604051611ac69493929190612bfb565b6020604051602081039080840390855afa158015611ae8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5b90612c8c565b60405180910390fd5b80915050949350505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b505050565b611baa611b70565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3290612d1e565b60405180910390fd5b565b600046905090565b600080611c50611c3d565b905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c7d61046d565b805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208430604051602001611cd7959493929190612d3e565b60405160208183030381529060405280519060200120905080611cf86117ee565b600101600084815260200190815260200160002081905550809250505090565b828054611d2490612230565b90600052602060002090601f016020900481019282611d465760008555611d8d565b82601f10611d5f57805160ff1916838001178555611d8d565b82800160010185558215611d8d579182015b82811115611d8c578251825591602001919060010190611d71565b5b509050611d9a9190611d9e565b5090565b5b80821115611db7576000816000905550600101611d9f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611df5578082015181840152602081019050611dda565b83811115611e04576000848401525b50505050565b6000601f19601f8301169050919050565b6000611e2682611dbb565b611e308185611dc6565b9350611e40818560208601611dd7565b611e4981611e0a565b840191505092915050565b60006020820190508181036000830152611e6e8184611e1b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ea682611e7b565b9050919050565b611eb681611e9b565b8114611ec157600080fd5b50565b600081359050611ed381611ead565b92915050565b6000819050919050565b611eec81611ed9565b8114611ef757600080fd5b50565b600081359050611f0981611ee3565b92915050565b60008060408385031215611f2657611f25611e76565b5b6000611f3485828601611ec4565b9250506020611f4585828601611efa565b9150509250929050565b60008115159050919050565b611f6481611f4f565b82525050565b6000602082019050611f7f6000830184611f5b565b92915050565b611f8e81611e9b565b82525050565b6000602082019050611fa96000830184611f85565b92915050565b611fb881611ed9565b82525050565b6000602082019050611fd36000830184611faf565b92915050565b600080600060608486031215611ff257611ff1611e76565b5b600061200086828701611ec4565b935050602061201186828701611ec4565b925050604061202286828701611efa565b9150509250925092565b60006020828403121561204257612041611e76565b5b600061205084828501611ec4565b91505092915050565b600060ff82169050919050565b61206f81612059565b82525050565b600060208201905061208a6000830184612066565b92915050565b6000602082840312156120a6576120a5611e76565b5b60006120b484828501611efa565b91505092915050565b6120c681612059565b81146120d157600080fd5b50565b6000813590506120e3816120bd565b92915050565b6000819050919050565b6120fc816120e9565b811461210757600080fd5b50565b600081359050612119816120f3565b92915050565b600080600080600080600060e0888a03121561213e5761213d611e76565b5b600061214c8a828b01611ec4565b975050602061215d8a828b01611ec4565b965050604061216e8a828b01611efa565b955050606061217f8a828b01611efa565b94505060806121908a828b016120d4565b93505060a06121a18a828b0161210a565b92505060c06121b28a828b0161210a565b91505092959891949750929550565b600080604083850312156121d8576121d7611e76565b5b60006121e685828601611ec4565b92505060206121f785828601611ec4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061224857607f821691505b6020821081141561225c5761225b612201565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006122be602883611dc6565b91506122c982612262565b604082019050919050565b600060208201905081810360008301526122ed816122b1565b9050919050565b7f4552433230457874656e6465643a2065786365737369766520616c6c6f77616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612350602283611dc6565b915061235b826122f4565b604082019050919050565b6000602082019050818103600083015261237f81612343565b9050919050565b7f4552433230457874656e6465643a20696e73756666696369656e7420616c6c6f60008201527f77616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006123e2602583611dc6565b91506123ed82612386565b604082019050919050565b60006020820190508181036000830152612411816123d5565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b600061244e601d83611dc6565b915061245982612418565b602082019050919050565b6000602082019050818103600083015261247d81612441565b9050919050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b60006124ba601e83611dc6565b91506124c582612484565b602082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252a82611ed9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561255d5761255c6124f0565b5b600182019050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006125c4602483611dc6565b91506125cf82612568565b604082019050919050565b600060208201905081810360008301526125f3816125b7565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612656602283611dc6565b9150612661826125fa565b604082019050919050565b6000602082019050818103600083015261268581612649565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006126e8602583611dc6565b91506126f38261268c565b604082019050919050565b60006020820190508181036000830152612717816126db565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061277a602383611dc6565b91506127858261271e565b604082019050919050565b600060208201905081810360008301526127a98161276d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061280c602683611dc6565b9150612817826127b0565b604082019050919050565b6000602082019050818103600083015261283b816127ff565b9050919050565b600061284d82611ed9565b915061285883611ed9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561288d5761288c6124f0565b5b828201905092915050565b7f4e444f4c3a206f6e6c79207661756c7473000000000000000000000000000000600082015250565b60006128ce601183611dc6565b91506128d982612898565b602082019050919050565b600060208201905081810360008301526128fd816128c1565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061293a601f83611dc6565b915061294582612904565b602082019050919050565b600060208201905081810360008301526129698161292d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129cc602183611dc6565b91506129d782612970565b604082019050919050565b600060208201905081810360008301526129fb816129bf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a5e602283611dc6565b9150612a6982612a02565b604082019050919050565b60006020820190508181036000830152612a8d81612a51565b9050919050565b6000612a9f82611ed9565b9150612aaa83611ed9565b925082821015612abd57612abc6124f0565b5b828203905092915050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b24602283611dc6565b9150612b2f82612ac8565b604082019050919050565b60006020820190508181036000830152612b5381612b17565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bb6602283611dc6565b9150612bc182612b5a565b604082019050919050565b60006020820190508181036000830152612be581612ba9565b9050919050565b612bf5816120e9565b82525050565b6000608082019050612c106000830187612bec565b612c1d6020830186612066565b612c2a6040830185612bec565b612c376060830184612bec565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612c76601883611dc6565b9150612c8182612c40565b602082019050919050565b60006020820190508181036000830152612ca581612c69565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d08602283611dc6565b9150612d1382612cac565b604082019050919050565b60006020820190508181036000830152612d3781612cfb565b9050919050565b600060a082019050612d536000830188612bec565b612d606020830187612bec565b612d6d6040830186612bec565b612d7a6060830185611faf565b612d876080830184611f85565b969550505050505056fea2646970667358221220e030383118e8113190f8d86afa80961c9a2871d028dd8408dba152d4ed1bde6264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806379cc6790116100b8578063a9059cbb1161007c578063a9059cbb1461039d578063c4d66de8146103cd578063ceb68c23146103e9578063cfad57a214610405578063d505accf14610421578063dd62ed3e1461043d57610142565b806379cc6790146102d35780637ecebe00146102ef57806395d89b411461031f578063a457c2d71461033d578063a622ee7c1461036d57610142565b8063256b5a021161010a578063256b5a0214610201578063313ce5671461021d578063395093511461023b57806340c10f191461026b57806342966c681461028757806370a08231146102a357610142565b806306fdde0314610147578063095ea7b31461016557806312d43a511461019557806318160ddd146101b357806323b872dd146101d1575b600080fd5b61014f61046d565b60405161015c9190611e54565b60405180910390f35b61017f600480360381019061017a9190611f0f565b610508565b60405161018c9190611f6a565b60405180910390f35b61019d61051f565b6040516101aa9190611f94565b60405180910390f35b6101bb61052e565b6040516101c89190611fbe565b60405180910390f35b6101eb60048036038101906101e69190611fd9565b61053d565b6040516101f89190611f6a565b60405180910390f35b61021b6004803603810190610216919061202c565b61062f565b005b610225610652565b6040516102329190612075565b60405180910390f35b61025560048036038101906102509190611f0f565b610672565b6040516102629190611f6a565b60405180910390f35b61028560048036038101906102809190611f0f565b6107a1565b005b6102a1600480360381019061029c9190612090565b6107cf565b005b6102bd60048036038101906102b8919061202c565b6107dc565b6040516102ca9190611fbe565b60405180910390f35b6102ed60048036038101906102e89190611f0f565b6107ee565b005b6103096004803603810190610304919061202c565b6107fc565b6040516103169190611fbe565b60405180910390f35b61032761084e565b6040516103349190611e54565b60405180910390f35b61035760048036038101906103529190611f0f565b6108e9565b6040516103649190611f6a565b60405180910390f35b6103876004803603810190610382919061202c565b610a16565b6040516103949190611f6a565b60405180910390f35b6103b760048036038101906103b29190611f0f565b610a3e565b6040516103c49190611f6a565b60405180910390f35b6103e760048036038101906103e2919061202c565b610a55565b005b61040360048036038101906103fe919061202c565b610b31565b005b61041f600480360381019061041a919061202c565b610b54565b005b61043b6004803603810190610436919061211f565b610b60565b005b610457600480360381019061045291906121c1565b610d83565b6040516104649190611fbe565b60405180910390f35b6060610477610e13565b600001805461048590612230565b80601f01602080910402602001604051908101604052809291908181526020018280546104b190612230565b80156104fe5780601f106104d3576101008083540402835291602001916104fe565b820191906000526020600020905b8154815290600101906020018083116104e157829003601f168201915b5050505050905090565b6000610515338484610e40565b6001905092915050565b6000610529611014565b905090565b600061053861104c565b905090565b60008061054861105f565b60010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610602906122d4565b60405180910390fd5b6106188533858403610e40565b61062385858561108c565b60019150509392505050565b6000610639611318565b905061064e828261134590919063ffffffff16565b5050565b600061065c610e13565b60020160009054906101000a900460ff16905090565b60008061067d61105f565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808482011015610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90612366565b60405180910390fd5b61079533868684018560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055610e40565b60019250505092915050565b60006107ab611318565b90506107c033826113ab90919063ffffffff16565b6107ca838361143d565b505050565b6107d933826115a3565b50565b60006107e782611783565b9050919050565b6107f882826117d5565b5050565b60006108066117ee565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060610858610e13565b600101805461086690612230565b80601f016020809104026020016040519081016040528092919081815260200182805461089290612230565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050905090565b6000806108f461105f565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808411156109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b3906123f8565b60405180910390fd5b610a0a33868684038560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055610e40565b60019250505092915050565b600080610a21611318565b9050610a36838261181b90919063ffffffff16565b915050919050565b6000610a4b33848461108c565b6001905092915050565b610a5d611874565b6000610a67610e13565b90506000610a73611318565b9050610abd6040518060400160405280600481526020017f4e656363000000000000000000000000000000000000000000000000000000008152508361187e90919063ffffffff16565b610b056040518060400160405280600481526020017f4e454343000000000000000000000000000000000000000000000000000000008152508361189b90919063ffffffff16565b610b196009836118b890919063ffffffff16565b610b2c838261134590919063ffffffff16565b505050565b6000610b3b611318565b9050610b5082826118d990919063ffffffff16565b5050565b610b5d8161193f565b50565b83421115610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90612464565b60405180910390fd5b600080610bae6117ee565b60000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528960208201528860408201528760608201528160808201528660a082015260c081209250506000610c4661199a565b905060006040517f19010000000000000000000000000000000000000000000000000000000000008152826002820152846022820152604281209150506000610c9c888888856119e5909392919063ffffffff16565b90508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d03906124d0565b60405180910390fd5b610d146117ee565b60000160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610d659061251f565b9190505550610d758c8c8c610e40565b505050505050505050505050565b6000610d8d61105f565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea7906125da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f179061266c565b60405180910390fd5b80610f2961105f565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110079190611fbe565b60405180910390a3505050565b60008061101f611b70565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600061105661105f565b60020154905090565b6000807fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f3906126fe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116390612790565b60405180910390fd5b611177838383611b9d565b600061118161105f565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390612822565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190612842565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516113099190611fbe565b60405180910390a35050505050565b6000807f5d70cc522e320a58bfb729d340c4fbb499df72d53958e8375b19ef8b8b6c1d6590508091505090565b61134d611874565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b8160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611439576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611430906128e4565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490612950565b60405180910390fd5b6114b960008383611b9d565b60006114c361105f565b9050818160020160008282546114d99190612842565b92505081905550818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115319190612842565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115969190611fbe565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160a906129e2565b60405180910390fd5b61161f82600083611b9d565b600061162961105f565b905060008160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90612a74565b60405180910390fd5b8281038260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828260020160008282546117109190612a94565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516117759190611fbe565b60405180910390a350505050565b600061178d61105f565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117df82826108e9565b506117ea82826115a3565b5050565b6000807fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb990508091505090565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61187c611ba2565b565b80826000019080519060200190611896929190611d18565b505050565b808260010190805190602001906118b3929190611d18565b505050565b808260020160006101000a81548160ff021916908360ff1602179055505050565b6118e1611874565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611947611ba2565b6000611951611b70565b9050818160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806119a56117ee565b60010160006119b2611c3d565b81526020019081526020016000205490506000801b81146119d657809150506119e2565b6119de611c45565b9150505b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4490612b3a565b60405180910390fd5b601b8460ff161480611a625750601c8460ff16145b611aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9890612bcc565b60405180910390fd5b600060018686868660405160008152602001604052604051611ac69493929190612bfb565b6020604051602081039080840390855afa158015611ae8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5b90612c8c565b60405180910390fd5b80915050949350505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b505050565b611baa611b70565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3290612d1e565b60405180910390fd5b565b600046905090565b600080611c50611c3d565b905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c7d61046d565b805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208430604051602001611cd7959493929190612d3e565b60405160208183030381529060405280519060200120905080611cf86117ee565b600101600084815260200190815260200160002081905550809250505090565b828054611d2490612230565b90600052602060002090601f016020900481019282611d465760008555611d8d565b82601f10611d5f57805160ff1916838001178555611d8d565b82800160010185558215611d8d579182015b82811115611d8c578251825591602001919060010190611d71565b5b509050611d9a9190611d9e565b5090565b5b80821115611db7576000816000905550600101611d9f565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611df5578082015181840152602081019050611dda565b83811115611e04576000848401525b50505050565b6000601f19601f8301169050919050565b6000611e2682611dbb565b611e308185611dc6565b9350611e40818560208601611dd7565b611e4981611e0a565b840191505092915050565b60006020820190508181036000830152611e6e8184611e1b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ea682611e7b565b9050919050565b611eb681611e9b565b8114611ec157600080fd5b50565b600081359050611ed381611ead565b92915050565b6000819050919050565b611eec81611ed9565b8114611ef757600080fd5b50565b600081359050611f0981611ee3565b92915050565b60008060408385031215611f2657611f25611e76565b5b6000611f3485828601611ec4565b9250506020611f4585828601611efa565b9150509250929050565b60008115159050919050565b611f6481611f4f565b82525050565b6000602082019050611f7f6000830184611f5b565b92915050565b611f8e81611e9b565b82525050565b6000602082019050611fa96000830184611f85565b92915050565b611fb881611ed9565b82525050565b6000602082019050611fd36000830184611faf565b92915050565b600080600060608486031215611ff257611ff1611e76565b5b600061200086828701611ec4565b935050602061201186828701611ec4565b925050604061202286828701611efa565b9150509250925092565b60006020828403121561204257612041611e76565b5b600061205084828501611ec4565b91505092915050565b600060ff82169050919050565b61206f81612059565b82525050565b600060208201905061208a6000830184612066565b92915050565b6000602082840312156120a6576120a5611e76565b5b60006120b484828501611efa565b91505092915050565b6120c681612059565b81146120d157600080fd5b50565b6000813590506120e3816120bd565b92915050565b6000819050919050565b6120fc816120e9565b811461210757600080fd5b50565b600081359050612119816120f3565b92915050565b600080600080600080600060e0888a03121561213e5761213d611e76565b5b600061214c8a828b01611ec4565b975050602061215d8a828b01611ec4565b965050604061216e8a828b01611efa565b955050606061217f8a828b01611efa565b94505060806121908a828b016120d4565b93505060a06121a18a828b0161210a565b92505060c06121b28a828b0161210a565b91505092959891949750929550565b600080604083850312156121d8576121d7611e76565b5b60006121e685828601611ec4565b92505060206121f785828601611ec4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061224857607f821691505b6020821081141561225c5761225b612201565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006122be602883611dc6565b91506122c982612262565b604082019050919050565b600060208201905081810360008301526122ed816122b1565b9050919050565b7f4552433230457874656e6465643a2065786365737369766520616c6c6f77616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612350602283611dc6565b915061235b826122f4565b604082019050919050565b6000602082019050818103600083015261237f81612343565b9050919050565b7f4552433230457874656e6465643a20696e73756666696369656e7420616c6c6f60008201527f77616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006123e2602583611dc6565b91506123ed82612386565b604082019050919050565b60006020820190508181036000830152612411816123d5565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b600061244e601d83611dc6565b915061245982612418565b602082019050919050565b6000602082019050818103600083015261247d81612441565b9050919050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b60006124ba601e83611dc6565b91506124c582612484565b602082019050919050565b600060208201905081810360008301526124e9816124ad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252a82611ed9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561255d5761255c6124f0565b5b600182019050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006125c4602483611dc6565b91506125cf82612568565b604082019050919050565b600060208201905081810360008301526125f3816125b7565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612656602283611dc6565b9150612661826125fa565b604082019050919050565b6000602082019050818103600083015261268581612649565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006126e8602583611dc6565b91506126f38261268c565b604082019050919050565b60006020820190508181036000830152612717816126db565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061277a602383611dc6565b91506127858261271e565b604082019050919050565b600060208201905081810360008301526127a98161276d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061280c602683611dc6565b9150612817826127b0565b604082019050919050565b6000602082019050818103600083015261283b816127ff565b9050919050565b600061284d82611ed9565b915061285883611ed9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561288d5761288c6124f0565b5b828201905092915050565b7f4e444f4c3a206f6e6c79207661756c7473000000000000000000000000000000600082015250565b60006128ce601183611dc6565b91506128d982612898565b602082019050919050565b600060208201905081810360008301526128fd816128c1565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061293a601f83611dc6565b915061294582612904565b602082019050919050565b600060208201905081810360008301526129698161292d565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129cc602183611dc6565b91506129d782612970565b604082019050919050565b600060208201905081810360008301526129fb816129bf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a5e602283611dc6565b9150612a6982612a02565b604082019050919050565b60006020820190508181036000830152612a8d81612a51565b9050919050565b6000612a9f82611ed9565b9150612aaa83611ed9565b925082821015612abd57612abc6124f0565b5b828203905092915050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b24602283611dc6565b9150612b2f82612ac8565b604082019050919050565b60006020820190508181036000830152612b5381612b17565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bb6602283611dc6565b9150612bc182612b5a565b604082019050919050565b60006020820190508181036000830152612be581612ba9565b9050919050565b612bf5816120e9565b82525050565b6000608082019050612c106000830187612bec565b612c1d6020830186612066565b612c2a6040830185612bec565b612c376060830184612bec565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612c76601883611dc6565b9150612c8182612c40565b602082019050919050565b60006020820190508181036000830152612ca581612c69565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d08602283611dc6565b9150612d1382612cac565b604082019050919050565b60006020820190508181036000830152612d3781612cfb565b9050919050565b600060a082019050612d536000830188612bec565b612d606020830187612bec565b612d6d6040830186612bec565b612d7a6060830185611faf565b612d876080830184611f85565b969550505050505056fea2646970667358221220e030383118e8113190f8d86afa80961c9a2871d028dd8408dba152d4ed1bde6264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "holder": "approver of allowance",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "token allowance"
        }
      },
      "approve(address,uint256)": {
        "details": "prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)",
        "params": {
          "amount": "quantity of tokens approved for spending",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to decrease allowance",
          "spender": "address whose allowance to decrease"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to increase allowance",
          "spender": "address whose allowance to increase"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "name()": {
        "returns": {
          "_0": "token name"
        }
      },
      "nonces(address)": {
        "details": "inhertidoc IERC2612"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated.",
        "params": {
          "amount": "quantity of tokens to approve",
          "owner": "holder of tokens and signer of permit",
          "r": "secp256k1 'r' value",
          "s": "secp256k1 's' value",
          "spender": "beneficiary of approval",
          "v": "secp256k1 'v' value"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "token symbol"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "token supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "holder": "holder of tokens prior to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "query the allowance granted from given holder to given spender"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to spender to spend tokens"
      },
      "balanceOf(address)": {
        "notice": "query the token balance of given account"
      },
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "decrease spend amount granted to spender"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "increase spend amount granted to spender"
      },
      "name()": {
        "notice": "return token name"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "approve spender to transfer tokens held by owner via signature"
      },
      "symbol()": {
        "notice": "return token symbol"
      },
      "totalSupply()": {
        "notice": "query the total minted token supply"
      },
      "transfer(address,uint256)": {
        "notice": "transfer tokens to given recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer tokens to given recipient on behalf of given holder"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}