{
  "address": "0x2b062113f372D44913e102Ae74c99AdC356415Bb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DecreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "IncreasePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPrice",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entryFundingRate",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getNextAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNextFundingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "getPositionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_raise",
          "type": "bool"
        }
      ],
      "name": "validateLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x880ec46793654a8752806f94aeab508d4b62ece1d9abf933aa39f0d71df91416",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x2b062113f372D44913e102Ae74c99AdC356415Bb",
    "transactionIndex": 0,
    "gasUsed": "4666028",
    "logsBloom": "0x
    "blockHash": "0xc63938c4ddcf3e217ab660df6d0a16e7677be2e7dcec1d4b4d272919146b4efa",
    "transactionHash": "0x880ec46793654a8752806f94aeab508d4b62ece1d9abf933aa39f0d71df91416",
    "logs": [],
    "blockNumber": 9729790,
    "cumulativeGasUsed": "4666028",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b0a15566ba2035749abbb19b40cb5d2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"IncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFundingRate\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getNextAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNextFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getPositionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validateLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Vault/VaultFacet.sol\":\"VaultFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        onlyGov();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xc2f5c3feb5ea52eaeca64a71d95026a29e13245cc77dd5f93c384fce6ff8e4d6\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./VaultLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ncontract VaultFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event DecreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event LiquidatePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 reserveAmount,\\n        int256 realisedPnl,\\n        uint256 markPrice\\n    );\\n    event UpdatePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl\\n    );\\n    event ClosePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl\\n    );\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external {\\n        contractEntered();\\n        VaultLib._validateRouter(_account);\\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\\n\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position storage position = s.positions[key];\\n\\n        uint256 price = _isLong\\n            ? VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMinPrice(_indexToken, s.includeAmmPrice);\\n\\n        if (position.size == 0) {\\n            position.averagePrice = price;\\n        }\\n\\n        if (position.size > 0 && _sizeDelta > 0) {\\n            position.averagePrice = getNextAveragePrice(\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                price,\\n                _sizeDelta,\\n                position.lastIncreasedTime\\n            );\\n        }\\n\\n        uint256 fee = VaultLib._collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        uint256 collateralDelta = VaultLib.transferIn(s, _collateralToken);\\n        uint256 collateralDeltaUsd = VaultLib.tokenToUsdMin(\\n            s,\\n            _collateralToken,\\n            collateralDelta\\n        );\\n\\n        position.collateral = position.collateral.add(collateralDeltaUsd);\\n        require(\\n            position.collateral >= fee,\\n            \\\"Vault: insufficient collateral for fees\\\"\\n        );\\n\\n        position.collateral = position.collateral.sub(fee);\\n        position.entryFundingRate = s.cumulativeFundingRates[_collateralToken];\\n        position.size = position.size.add(_sizeDelta);\\n        position.lastIncreasedTime = block.timestamp;\\n\\n        require(position.size > 0, \\\"Vault: invalid position.size\\\");\\n        VaultLib.validatePosition(position.size, position.collateral);\\n        validateLiquidation(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong,\\n            true\\n        );\\n\\n        // reserve tokens to pay profits on the position\\n        uint256 reserveDelta = VaultLib.usdToTokenMax(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            s.includeAmmPrice\\n        );\\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\\n        VaultLib._increaseReservedAmount(s, _collateralToken, reserveDelta);\\n\\n        // guaranteedUsd stores the sum of (position.size - position.collateral) for all positions\\n        // if a fee is charged on the collateral then guaranteedUsd should be increased by that fee amount\\n        // since (position.size - position.collateral) would have increased by `fee`\\n        VaultLib._increaseGuaranteedUsd(\\n            s,\\n            _collateralToken,\\n            _sizeDelta.add(fee)\\n        );\\n        VaultLib._decreaseGuaranteedUsd(\\n            s,\\n            _collateralToken,\\n            collateralDeltaUsd\\n        );\\n        // treat the deposited collateral as part of the pool\\n        VaultLib._increasePoolAmount(s, _collateralToken, collateralDelta);\\n        // fees need to be deducted from the pool since fees are deducted from position.collateral\\n        // and collateral is treated as part of the pool\\n        VaultLib._decreasePoolAmount(\\n            s,\\n            _collateralToken,\\n            VaultLib.usdToTokenMin(s, _collateralToken, fee)\\n        );\\n\\n        emit IncreasePosition(\\n            key,\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            collateralDeltaUsd,\\n            _sizeDelta,\\n            _isLong,\\n            price,\\n            fee\\n        );\\n        emit UpdatePosition(\\n            key,\\n            position.size,\\n            position.collateral,\\n            position.averagePrice,\\n            position.entryFundingRate,\\n            position.reserveAmount,\\n            position.realisedPnl\\n        );\\n\\n        contractExited();\\n    }\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256) {\\n        contractEntered();\\n        VaultLib._validateRouter(_account);\\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\\n\\n        uint256 _amountOutAfterFees = _decreasePosition(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver\\n        );\\n        contractExited();\\n\\n        return _amountOutAfterFees;\\n    }\\n\\n    function _decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) private returns (uint256) {\\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\\n\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position storage position = s.positions[key];\\n        require(position.size > 0, \\\"Vault: empty position\\\");\\n        require(position.size >= _sizeDelta, \\\"Vault: position size exceeded\\\");\\n        require(\\n            position.collateral >= _collateralDelta,\\n            \\\"Vault: position collateral exceeded\\\"\\n        );\\n\\n        uint256 collateral = position.collateral;\\n        // scope variables to avoid stack too deep errors\\n        {\\n            uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(\\n                position.size\\n            );\\n            position.reserveAmount = position.reserveAmount.sub(reserveDelta);\\n            VaultLib._decreaseReservedAmount(s, _collateralToken, reserveDelta);\\n        }\\n\\n        (uint256 _usdOut, uint256 _usdOutAfterFee) = VaultLib._reduceCollateral(\\n            s,\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong\\n        );\\n\\n        if (position.size != _sizeDelta) {\\n            position.entryFundingRate = s.cumulativeFundingRates[\\n                _collateralToken\\n            ];\\n            position.size = position.size.sub(_sizeDelta);\\n\\n            VaultLib.validatePosition(position.size, position.collateral);\\n            validateLiquidation(\\n                _account,\\n                _collateralToken,\\n                _indexToken,\\n                _isLong,\\n                true\\n            );\\n\\n            VaultLib._increaseGuaranteedUsd(\\n                s,\\n                _collateralToken,\\n                collateral.sub(position.collateral)\\n            );\\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\\n\\n            uint256 price = _isLong\\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n            emit DecreasePosition(\\n                key,\\n                _account,\\n                _collateralToken,\\n                _indexToken,\\n                _collateralDelta,\\n                _sizeDelta,\\n                _isLong,\\n                price,\\n                _usdOut.sub(_usdOutAfterFee)\\n            );\\n            emit UpdatePosition(\\n                key,\\n                position.size,\\n                position.collateral,\\n                position.averagePrice,\\n                position.entryFundingRate,\\n                position.reserveAmount,\\n                position.realisedPnl\\n            );\\n        } else {\\n            VaultLib._increaseGuaranteedUsd(s, _collateralToken, collateral);\\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\\n\\n            uint256 price = _isLong\\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n            emit DecreasePosition(\\n                key,\\n                _account,\\n                _collateralToken,\\n                _indexToken,\\n                _collateralDelta,\\n                _sizeDelta,\\n                _isLong,\\n                price,\\n                _usdOut.sub(_usdOutAfterFee)\\n            );\\n            emit ClosePosition(\\n                key,\\n                position.size,\\n                position.collateral,\\n                position.averagePrice,\\n                position.entryFundingRate,\\n                position.reserveAmount,\\n                position.realisedPnl\\n            );\\n\\n            delete s.positions[key];\\n        }\\n\\n        return\\n            VaultLib._transferRemainingCollateral(\\n                s,\\n                _collateralToken,\\n                _receiver,\\n                _usdOut,\\n                _usdOutAfterFee\\n            );\\n    }\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external {\\n        contractEntered();\\n        // set INCLUDE_AMM_PRICE to false prevent manipulated liquidations\\n        s.includeAmmPrice = false;\\n\\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\\n\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position memory position = s.positions[key];\\n        require(position.size > 0, \\\"Vault: empty position\\\");\\n\\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong,\\n            false\\n        );\\n        require(liquidationState != 0, \\\"Vault: position cannot be liquidated\\\");\\n        // max leverage exceeded but there is collateral remaining after deducting losses\\n        // so decreasePosition instead by a half to keep alive\\n        if (liquidationState == 2) {\\n            _decreasePosition(\\n                _account,\\n                _collateralToken,\\n                _indexToken,\\n                0,\\n                position.size.mul(5).div(10), // div by 2\\n                _isLong,\\n                _account\\n            );\\n            return;\\n        }\\n\\n        s.feeReserves[_collateralToken] = s.feeReserves[_collateralToken].add(\\n            VaultLib.usdToTokenMin(s, _collateralToken, marginFees)\\n        );\\n\\n        VaultLib._decreaseReservedAmount(\\n            s,\\n            _collateralToken,\\n            position.reserveAmount\\n        );\\n        VaultLib._decreaseGuaranteedUsd(\\n            s,\\n            _collateralToken,\\n            position.size.sub(position.collateral)\\n        );\\n\\n        uint256 markPrice = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n\\n        emit LiquidatePosition(\\n            key,\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong,\\n            position.size,\\n            position.collateral,\\n            position.reserveAmount,\\n            position.realisedPnl,\\n            markPrice\\n        );\\n\\n        delete s.positions[key];\\n\\n        // pay the fee receiver using the pool,\\n        // we assume that in general the liquidated amount should be sufficient to cover\\n        // the liquidation fees\\n        VaultLib._decreasePoolAmount(\\n            s,\\n            _collateralToken,\\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD)\\n        );\\n\\n        s.includeAmmPrice = true;\\n\\n        VaultLib.transferOut(\\n            s,\\n            _collateralToken,\\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD),\\n            _feeReceiver\\n        );\\n\\n        contractExited();\\n    }\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    )\\n        public\\n        view\\n        returns (\\n            // returns (state, fees)\\n            uint256,\\n            uint256\\n        )\\n    {\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position memory position = s.positions[key];\\n\\n        (bool hasProfit, uint256 delta) = getDelta(\\n            _indexToken,\\n            position.size,\\n            position.averagePrice,\\n            _isLong,\\n            position.lastIncreasedTime\\n        );\\n        uint256 marginFees = getFundingFee(\\n            _collateralToken,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        marginFees = marginFees.add(getPositionFee(position.size));\\n\\n        if (!hasProfit && position.collateral < delta) {\\n            if (_raise) {\\n                revert(\\\"Vault: losses exceed collateral\\\");\\n            }\\n            return (1, marginFees);\\n        }\\n\\n        uint256 remainingCollateral = position.collateral;\\n        if (!hasProfit) {\\n            remainingCollateral = position.collateral.sub(delta);\\n        }\\n\\n        if (remainingCollateral < marginFees) {\\n            if (_raise) {\\n                revert(\\\"Vault: fees exceed collateral\\\");\\n            }\\n            // cap the fees to the remainingCollateral\\n            return (1, remainingCollateral);\\n        }\\n\\n        if (remainingCollateral < marginFees.add(LIQUIDATION_FEE_USD)) {\\n            if (_raise) {\\n                revert(\\\"Vault: liquidation fees exceed collateral\\\");\\n            }\\n            return (1, marginFees);\\n        }\\n\\n        if (\\n            remainingCollateral.mul(MAX_LEVERAGE) <\\n            position.size.mul(BASIS_POINTS_DIVISOR)\\n        ) {\\n            if (_raise) {\\n                revert(\\\"Vault: max leverage exceeded\\\");\\n            }\\n            return (2, marginFees);\\n        }\\n\\n        return (0, marginFees);\\n    }\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        )\\n    {\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position memory position = s.positions[key];\\n        uint256 realisedPnl = position.realisedPnl > 0\\n            ? uint256(position.realisedPnl)\\n            : uint256(-position.realisedPnl);\\n        return (\\n            position.size, // 0\\n            position.collateral, // 1\\n            position.averagePrice, // 2\\n            position.entryFundingRate, // 3\\n            position.reserveAmount, // 4\\n            realisedPnl, // 5\\n            position.realisedPnl >= 0, // 6\\n            position.lastIncreasedTime // 7\\n        );\\n    }\\n\\n    function getNextFundingRate(address _token) public view returns (uint256) {\\n        return VaultLib._getNextFundingRate(s, _token);\\n    }\\n\\n    function getUtilisation(address _token) public view returns (uint256) {\\n        uint256 poolAmount = s.poolAmounts[_token];\\n        if (poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            s.reservedAmounts[_token].mul(FUNDING_RATE_PRECISION).div(\\n                poolAmount\\n            );\\n    }\\n\\n    function getPositionLeverage(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) public view returns (uint256) {\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position memory position = s.positions[key];\\n        require(position.collateral > 0, \\\"Vault: invalid position\\\");\\n        return position.size.mul(BASIS_POINTS_DIVISOR).div(position.collateral);\\n    }\\n\\n    // // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\\n    // // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\\n    function getNextAveragePrice(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _nextPrice,\\n        uint256 _sizeDelta,\\n        uint256 _lastIncreasedTime\\n    ) public view returns (uint256) {\\n        (bool hasProfit, uint256 delta) = getDelta(\\n            _indexToken,\\n            _size,\\n            _averagePrice,\\n            _isLong,\\n            _lastIncreasedTime\\n        );\\n        uint256 nextSize = _size.add(_sizeDelta);\\n        uint256 divisor;\\n        if (_isLong) {\\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\\n        } else {\\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        }\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    function getPositionDelta(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) public view returns (bool, uint256) {\\n        bytes32 key = VaultLib.getPositionKey(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        );\\n        LibExchangeStorage.Position memory position = s.positions[key];\\n        return\\n            getDelta(\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n    }\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) public view returns (bool, uint256) {\\n        return\\n            VaultLib._getDelta(\\n                s,\\n                _indexToken,\\n                _size,\\n                _averagePrice,\\n                _isLong,\\n                _lastIncreasedTime\\n            );\\n    }\\n\\n    function getFundingFee(\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) public view returns (uint256) {\\n        return VaultLib._getFundingFee(s, _token, _size, _entryFundingRate);\\n    }\\n\\n    function getPositionFee(uint256 _sizeDelta) public pure returns (uint256) {\\n        return VaultLib._getPositionFee(_sizeDelta);\\n    }\\n\\n    function liquidationFeeUsd() public pure returns (uint256) {\\n        return LIQUIDATION_FEE_USD;\\n    }\\n\\n    function fundingRateFactor() public pure returns (uint256) {\\n        return FUNDING_RATE_FACTOR;\\n    }\\n\\n    function fundingInterval() public pure returns (uint256) {\\n        return FUNDING_INTERVAL;\\n    }\\n\\n    function marginFeeBasisPoints() public pure returns (uint256) {\\n        return MARGIN_FEE_BASIS_POINTS;\\n    }\\n\\n    function cumulativeFundingRates(address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s.cumulativeFundingRates[_token];\\n    }\\n\\n    function lastFundingTimes(address _token) public view returns (uint256) {\\n        return s.lastFundingTimes[_token];\\n    }\\n}\\n\",\"keccak256\":\"0x31574c677e97109480d24f5e06d3a0a2642ef690fc0fc8a4b74a9407dbbe7b34\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreaseNDOLAmount(address token, uint256 amount);\\n    event DecreaseNDOLAmount(address token, uint256 amount);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    function _getNextFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _intervals = block\\n            .timestamp\\n            .sub(s.lastFundingTimes[_token])\\n            .div(FUNDING_INTERVAL);\\n        uint256 _poolAmount = s.poolAmounts[_token];\\n        if (_poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            FUNDING_RATE_FACTOR\\n                .mul(s.reservedAmounts[_token])\\n                .mul(_intervals)\\n                .div(_poolAmount);\\n    }\\n\\n    function updateCumulativeFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        if (s.lastFundingTimes[_token] == 0) {\\n            s.lastFundingTimes[_token] = block\\n                .timestamp\\n                .div(FUNDING_INTERVAL)\\n                .mul(FUNDING_INTERVAL);\\n            return;\\n        }\\n\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = _getNextFundingRate(s, _token);\\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\\n            fundingRate\\n        );\\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\\n            FUNDING_INTERVAL\\n        );\\n\\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\\n    }\\n\\n    function adjustForDecimals(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 _decimalsDiv = _tokenDiv == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenDiv];\\n        uint256 _decimalsMul = _tokenMul == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenMul];\\n\\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\\n    }\\n\\n    function getMinPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                false,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function getMaxPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                true,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function isTokenWhitelisted(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(s.whitelistedTokens[_token], \\\"Vault: token not whitelisted\\\");\\n    }\\n\\n    function isPoolAmountBelowBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(s.poolAmounts[_token] <= balance, \\\"Vault: invalid increase\\\");\\n    }\\n\\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 prevBalance = s.tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        s.tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function transferOut(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\\n            _amount\\n        );\\n\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function tokenToUsdMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMaxPrice(_token, s.includeAmmPrice)\\n            );\\n    }\\n\\n    function usdToToken(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _usdAmount.mul(10**_decimals).div(_price);\\n    }\\n\\n    function tokenToUsdMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMinPrice(_token, includeAmmPrice)\\n            );\\n    }\\n\\n    function updateTokenBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\\n\\n        s.tokenBalances[_token] = _nextBalance;\\n    }\\n\\n    function validatePosition(uint256 _size, uint256 _collateral)\\n        internal\\n        pure\\n    {\\n        if (_size == 0) {\\n            require(_collateral == 0, \\\"Vault: collateral should be withdrawn\\\");\\n            return;\\n        }\\n        require(\\n            _size >= _collateral,\\n            \\\"Vault: _size must be more than _collateral\\\"\\n        );\\n    }\\n\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {\\n            return;\\n        }\\n        if (msg.sender == address(this)) {\\n            return;\\n        }\\n        revert(\\\"Vault: invalid msg.sender\\\");\\n    }\\n\\n    function validateTokens(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken\\n    ) internal view {\\n        require(_collateralToken == _indexToken, \\\"Vault: mismatched tokens\\\");\\n        isTokenWhitelisted(s, _collateralToken);\\n        isTokenWhitelisted(s, _indexToken);\\n    }\\n\\n    function getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _account,\\n                    _collateralToken,\\n                    _indexToken,\\n                    _isLong\\n                )\\n            );\\n    }\\n\\n    function _collectSwapFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        bool _isBuyingNDOL\\n    ) internal returns (uint256, uint256) {\\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\\n            s,\\n            _token,\\n            SWAP_FEE_BASIS_POINTS\\n        );\\n        uint256 _afterFeeAmount = _amount\\n            .mul(\\n                BASIS_POINTS_DIVISOR.sub(\\n                    _isBuyingNDOL ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\\n                )\\n            )\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\\n\\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\\n\\n        emit CollectSwapFees(\\n            _token,\\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\\n            _feeAmount\\n        );\\n        return (_feeAmount, _afterFeeAmount);\\n    }\\n\\n    function _increasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit IncreasePoolAmount(_token, _amount);\\n\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function _decreasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: poolAmount exceeded\\\"\\n        );\\n        isReservedAmountBelowPoolAmount(s, _token);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function isReservedAmountBelowPoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n    }\\n\\n    function _transferRemainingCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _receiver,\\n        uint256 _usdOut,\\n        uint256 _usdOutAfterFee\\n    ) internal returns (uint256) {\\n        if (_usdOut > 0) {\\n            VaultLib._decreasePoolAmount(\\n                s,\\n                _collateralToken,\\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\\n            );\\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                _usdOutAfterFee\\n            );\\n            VaultLib.transferOut(\\n                s,\\n                _collateralToken,\\n                _amountOutAfterFees,\\n                _receiver\\n            );\\n\\n            return _amountOutAfterFees;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _increaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.ndolAmounts[_token] = s.ndolAmounts[_token].add(_amount);\\n\\n        emit IncreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _decreaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _value = s.ndolAmounts[_token];\\n        // since NDOL can be minted using multiple assets\\n        // it is possible for the NDOL debt for a single asset to be less than zero\\n        // the NDOL debt is capped to zero for this case\\n        if (_value <= _amount) {\\n            s.ndolAmounts[_token] = 0;\\n            emit DecreaseNDOLAmount(_token, _value);\\n            return;\\n        }\\n        s.ndolAmounts[_token] = _value.sub(_amount);\\n\\n        emit DecreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _reduceCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256, uint256) {\\n        LibExchangeStorage.Position storage position = s.positions[\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\\n        ];\\n\\n        uint256 fee = _collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n            (bool _hasProfit, uint256 delta) = _getDelta(\\n                s,\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n            hasProfit = _hasProfit;\\n            // get the proportional change in pnl\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        if (usdOut < fee) {\\n            position.collateral = position.collateral.sub(fee);\\n            uint256 feeTokens = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                fee\\n            );\\n            VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\\n        }\\n\\n        emit UpdatePnl(\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\\n            hasProfit,\\n            adjustedDelta\\n        );\\n\\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\\n    }\\n\\n    function _collectMarginFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n\\n        uint256 fundingFee = _getFundingFee(\\n            s,\\n            _token,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\\n\\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _increaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: insufficient reserve\\\"\\n        );\\n\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\\n\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\\n\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _getDelta(\\n        LibExchangeStorage.Storage storage s,\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) internal view returns (bool, uint256) {\\n        require(_averagePrice > 0, \\\"Vault: invalid _averagePrice\\\");\\n        uint256 price = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n        uint256 priceDelta = _averagePrice > price\\n            ? _averagePrice.sub(price)\\n            : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp >\\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\\n            ? 0\\n            : s.minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function _getFundingFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal view returns (uint256) {\\n        if (_size == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\\n            _entryFundingRate\\n        );\\n        if (fundingRate == 0) {\\n            return 0;\\n        }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = _sizeDelta\\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function _getTargetAdjustedFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _fee\\n    ) internal view returns (uint256) {\\n        uint256 _initialAmount = s.ndolAmounts[_token];\\n        uint256 _targetAmount = _getTargetNDOLAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function _getTargetNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        uint256 _ndolSupply = IERC20(s.ndol).totalSupply();\\n        if (_ndolSupply == 0) {\\n            return 0;\\n        }\\n        uint256 _tokenWeight = s.tokenWeights[_token];\\n\\n        return _ndolSupply.mul(_tokenWeight).div(s.totalTokenWeight);\\n    }\\n}\\n\",\"keccak256\":\"0xd5876017bfebabcbb9fdc25b60cf2a089eaabecdd731ac352bfe763d76423932\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVaultPriceFeed {\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf24961f2f3cdb035b8b7a14596d22443f44bd141f4bd9725097d54dbdb22e5fa\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NDOL_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.exchange.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address ndol;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) ndolAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNDOLMinted;\\n        mapping(address => mapping(address => int256)) ndolMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xb93d4fae1622e4ef47346ad61e3c329fceaa52fa2f57f4dfb29fdc22fce1ab33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806382a08490116100ad578063cc5b814411610071578063cc5b814414610373578063d54d5a9f146103a3578063d8f897c3146103d4578063db97495f14610404578063de2ea9481461043457610121565b806382a08490146102a75780639849e412146102d7578063a93acac2146102f5578063c4f718bf14610325578063c65bc7b11461034357610121565b806345a6f370116100f457806345a6f370146101c257806348d91abf146101f35780634a3f088d1461020f57806351723e82146102465780635c07eaab1461027657610121565b806304fef1db14610126578063174d26941461015657806317bbf25c14610174578063318bc689146101a4575b600080fd5b610140600480360381019061013b919061393a565b610450565b60405161014d9190613980565b60405180910390f35b61015e61051e565b60405161016b9190613980565b60405180910390f35b61018e600480360381019061018991906139c7565b61053f565b60405161019b9190613980565b60405180910390f35b6101ac610551565b6040516101b99190613980565b60405180910390f35b6101dc60048036038101906101d79190613a2c565b61055a565b6040516101ea929190613aa2565b60405180910390f35b61020d60048036038101906102089190613acb565b6105ff565b005b61022960048036038101906102249190613a2c565b6109d9565b60405161023d989796959493929190613b46565b60405180910390f35b610260600480360381019061025b9190613a2c565b610ad1565b60405161026d9190613980565b60405180910390f35b610290600480360381019061028b9190613bc4565b610bce565b60405161029e929190613aa2565b60405180910390f35b6102c160048036038101906102bc9190613c3f565b610bee565b6040516102ce9190613980565b60405180910390f35b6102df610c37565b6040516102ec9190613980565b60405180910390f35b61030f600480360381019061030a919061393a565b610c41565b60405161031c9190613980565b60405180910390f35b61032d610c55565b60405161033a9190613980565b60405180910390f35b61035d6004803603810190610358919061393a565b610c5f565b60405161036a9190613980565b60405180910390f35b61038d60048036038101906103889190613ce1565b610caa565b60405161039a9190613980565b60405180910390f35b6103bd60048036038101906103b89190613d34565b610cc2565b6040516103cb929190613daf565b60405180910390f35b6103ee60048036038101906103e9919061393a565b610fa8565b6040516103fb9190613980565b60405180910390f35b61041e60048036038101906104199190613dd8565b610ff3565b60405161042b9190613980565b60405180910390f35b61044e60048036038101906104499190613e7a565b6110ca565b005b6000806000600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156104ab576000915050610519565b61051581610507620f42406000600d0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ce90919063ffffffff16565b6114e490919063ffffffff16565b9150505b919050565b60006c0c9f2c9cd04674edea40000000600561053a9190613f24565b905090565b600061054a826114fa565b9050919050565b6000600a905090565b600080600061056b87878787611569565b905060008060060160008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506105f08682600001518360400151888560c00151610bce565b93509350505094509492505050565b6106076115a2565b61061085611613565b61061c600085856116c3565b61062760008561174a565b600061063586868685611569565b9050600080600601600083815260200190815260200160002090506000836106785761067386600060020160149054906101000a900460ff166119fe565b610695565b61069486600060020160149054906101000a900460ff16611a87565b5b90506000826000015414156106ae578082600201819055505b600082600001541180156106c25750600085115b156106eb576106e2868360000154846002015487858a8860060154610ff3565b82600201819055505b60006107036000898886600001548760030154611b10565b9050600061071260008a611c35565b9050600061072260008b84611d5d565b905061073b818660010154611e1290919063ffffffff16565b8560010181905550828560010154101561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190614001565b60405180910390fd5b6107a1838660010154611e2890919063ffffffff16565b85600101819055506000600f0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856003018190555061080b888660000154611e1290919063ffffffff16565b85600001819055504285600601819055506000856000015411610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a9061406d565b60405180910390fd5b61087585600001548660010154611e3e565b6108838b8b8b8a6001610cc2565b505060006108a660008c8b600060020160149054906101000a900460ff16611ed7565b90506108bf818760040154611e1290919063ffffffff16565b86600401819055506108d360008c83611f0a565b6108f160008c6108ec878d611e1290919063ffffffff16565b6120a6565b6108fd60008c8461217d565b61090960008c85612254565b5061092160008c61091c60008f8961237d565b6123c0565b7f2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022878d8d8d868e8e8c8c604051610960999897969594939291906140b5565b60405180910390a17f25e8a331a7394a9f09862048843323b00bdbada258f524f5ce624a45bf00aabb878760000154886001015489600201548a600301548b600401548c600501546040516109bb979695949392919061415b565b60405180910390a16109cb6124e2565b505050505050505050505050565b60008060008060008060008060006109f38d8d8d8d611569565b905060008060060160008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000808260a0015113610a7f578160a00151610a7a906141ca565b610a85565b8160a001515b9050816000015182602001518360400151846060015185608001518560008860a0015112158860c001519a509a509a509a509a509a509a509a5050505094995094995094999196509450565b600080610ae086868686611569565b905060008060060160008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816020015111610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a9061425f565b60405180910390fd5b610bc28160200151610bb461271084600001516114ce90919063ffffffff16565b6114e490919063ffffffff16565b92505050949350505050565b600080610be060008888888888612501565b915091509550959350505050565b6000610bf86115a2565b610c0188611613565b610c0d600088886116c3565b6000610c1e898989898989896126c0565b9050610c286124e2565b80915050979650505050505050565b6000617080905090565b6000610c4e600083612b94565b9050919050565b6000610258905090565b600080600f0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610cb96000858585612d47565b90509392505050565b6000806000610cd388888888611569565b905060008060060160008381526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050600080610d5b89846000015185604001518b8760c00151610bce565b915091506000610d748b85600001518660600151610caa565b9050610d95610d86856000015161053f565b82611e1290919063ffffffff16565b905082158015610da85750818460200151105b15610dff578715610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de5906142cb565b60405180910390fd5b600181965096505050505050610f9e565b60008460200151905083610e2757610e24838660200151611e2890919063ffffffff16565b90505b81811015610e82578815610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6790614337565b60405180910390fd5b60018197509750505050505050610f9e565b610eae6c0c9f2c9cd04674edea400000006005610e9f9190613f24565b83611e1290919063ffffffff16565b811015610f08578815610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed906143c9565b60405180910390fd5b60018297509750505050505050610f9e565b610f2161271086600001516114ce90919063ffffffff16565b610f376207a120836114ce90919063ffffffff16565b1015610f90578815610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590614435565b60405180910390fd5b60028297509750505050505050610f9e565b600082975097505050505050505b9550959350505050565b60008060100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060006110058a8a8a8a88610bce565b91509150600061101e868b611e1290919063ffffffff16565b9050600088156110605783611045576110408383611e2890919063ffffffff16565b611059565b6110588383611e1290919063ffffffff16565b5b9050611094565b8361107d576110788383611e1290919063ffffffff16565b611091565b6110908383611e2890919063ffffffff16565b5b90505b6110b9816110ab848b6114ce90919063ffffffff16565b6114e490919063ffffffff16565b945050505050979650505050505050565b6110d26115a2565b60008060020160146101000a81548160ff0219169083151502179055506110fb600085856116c3565b61110660008561174a565b600061111486868686611569565b905060008060060160008381526020019081526020016000206040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905060008160000151116111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be906144a1565b60405180910390fd5b6000806111d8898989896000610cc2565b915091506000821415611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121790614533565b60405180910390fd5b600282141561126d57611263898989600061125c600a61124e60058b600001516114ce90919063ffffffff16565b6114e490919063ffffffff16565b8b8f6126c0565b50505050506114c7565b6112cd61127c60008a8461237d565b600060110160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b600060110160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113236000898560800151612df9565b61134960008961134486602001518760000151611e2890919063ffffffff16565b61217d565b6000866113715761136c88600060020160149054906101000a900460ff16611a87565b61138e565b61138d88600060020160149054906101000a900460ff166119fe565b5b90507f2e1f85a64a2f22cf2f0c42584e7c919ed4abe8d53675cff0f62bf1e95a1c676f858b8b8b8b89600001518a602001518b608001518c60a001518a6040516113e19a99989796959493929190614553565b60405180910390a160006006016000868152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000905560058201600090556006820160009055505061146a60008a61146560008d6c0c9f2c9cd04674edea4000000060056114609190613f24565b61237d565b6123c0565b6001600060020160146101000a81548160ff0219169083151502179055506114b960008a6114b360008d6c0c9f2c9cd04674edea4000000060056114ae9190613f24565b61237d565b89612f07565b6114c16124e2565b50505050505b5050505050565b600081836114dc9190613f24565b905092915050565b600081836114f2919061461e565b905092915050565b60008082141561150d5760009050611564565b600061154b61271061153d61152e600a612710611e2890919063ffffffff16565b866114ce90919063ffffffff16565b6114e490919063ffffffff16565b90506115608184611e2890919063ffffffff16565b9150505b919050565b60008484848460405160200161158294939291906146df565b604051602081830303815290604052805190602001209050949350505050565b6000800160009054906101000a900460ff16156115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb90614779565b60405180910390fd5b60016000800160006101000a81548160ff021916908315150217905550565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561164c576116c0565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611685576116c0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b7906147e5565b60405180910390fd5b50565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172890614851565b60405180910390fd5b61173b8383613009565b6117458382613009565b505050565b60008260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611807576117bd6170806117af617080426114e490919063ffffffff16565b6114ce90919063ffffffff16565b8260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119fa565b4261185e6170808460100160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b1115611869576119fa565b60006118758383612b94565b90506118cb8184600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b83600f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061193961708061192b617080426114e490919063ffffffff16565b6114ce90919063ffffffff16565b8360100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab8284600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516119f0929190614871565b60405180910390a1505b5050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401611a3e9392919061489a565b602060405180830381865afa158015611a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7f91906148e6565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b8152600401611ac79392919061489a565b602060405180830381865afa158015611ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0891906148e6565b905092915050565b600080611b1c856114fa565b90506000611b2c88888787612d47565b9050611b418183611e1290919063ffffffff16565b91506000611b5089898561237d565b9050611ba6818a60110160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b8960110160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a888483604051611c1e93929190614913565b60405180910390a182935050505095945050505050565b60008083600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cb7919061494a565b602060405180830381865afa158015611cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf891906148e6565b90508085600a0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d538282611e2890919063ffffffff16565b9250505092915050565b600080821415611d705760009050611e0b565b6000611d8d848660020160149054906101000a900460ff166119fe565b905060008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611e0681600a611de59190614a98565b611df884876114ce90919063ffffffff16565b6114e490919063ffffffff16565b925050505b9392505050565b60008183611e209190614ae3565b905092915050565b60008183611e369190614b39565b905092915050565b6000821415611e8f5760008114611e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8190614bdf565b60405180910390fd5b611ed3565b80821015611ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec990614c71565b60405180910390fd5b5b5050565b600080831415611eea5760009050611f02565b611eff858585611efa88876119fe565b61309b565b90505b949350505050565b611f5e8184600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b83600d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205f90614cdd565b60405180910390fd5b7faa5649d82f5462be9d19b0f2b31a59b2259950a6076550bac9f3a1c07db9f66d8282604051612099929190614871565b60405180910390a1505050565b6120fa8184600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b83600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd9d4761f75e0d0103b5cbeab941eeb443d7a56a35b5baf2a0787c03f03f4e4748282604051612170929190614871565b60405180910390a1505050565b6121d18184600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2890919063ffffffff16565b83600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f34e07158b9db50df5613e591c44ea2ebc82834eff4a4dc3a46e000e608261d688282604051612247929190614871565b60405180910390a1505050565b60006122aa8285600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b84600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122f98484613131565b7f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f4737838360405161232a929190614871565b60405180910390a183600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b60008082141561239057600090506123b9565b6123b68484846123b1878960020160149054906101000a900460ff16611a87565b61309b565b90505b9392505050565b61244b816040518060400160405280601a81526020017f5661756c743a20706f6f6c416d6f756e7420657863656564656400000000000081525085600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132389092919063ffffffff16565b83600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061249a838361328d565b6124a48383613131565b7f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb082826040516124d5929190614871565b60405180910390a1505050565b60008060000160006101000a81548160ff021916908315150217905550565b60008060008511612547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253e90614d49565b60405180910390fd5b60008461256e57612569888a60020160149054906101000a900460ff16611a87565b61258a565b612589888a60020160149054906101000a900460ff166119fe565b5b905060008187116125ad576125a88783611e2890919063ffffffff16565b6125c1565b6125c08288611e2890919063ffffffff16565b5b905060006125ea886125dc848c6114ce90919063ffffffff16565b6114e490919063ffffffff16565b9050600087156125fe578884119050612604565b83891190505b600061261b61038489611e1290919063ffffffff16565b4211612668578c60090160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461266b565b60005b90508180156126a05750612688818c6114ce90919063ffffffff16565b61269d612710856114ce90919063ffffffff16565b11155b156126aa57600092505b8183965096505050505050965096945050505050565b60006126cd60008861174a565b60006126db89898987611569565b905060008060060160008381526020019081526020016000209050600081600001541161273d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612734906144a1565b60405180910390fd5b8581600001541015612784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277b90614db5565b60405180910390fd5b86816001015410156127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c290614e47565b60405180910390fd5b600081600101549050600061280383600001546127f58a86600401546114ce90919063ffffffff16565b6114e490919063ffffffff16565b905061281c818460040154611e2890919063ffffffff16565b836004018190555061283060008c83612df9565b5060008061284460008e8e8e8e8e8e613356565b9150915088846000015414612a0e576000600f0160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484600301819055506128b5898560000154611e2890919063ffffffff16565b84600001819055506128cf84600001548560010154611e3e565b6128dd8d8d8d8b6001610cc2565b505061290160008d6128fc876001015487611e2890919063ffffffff16565b6120a6565b61290d60008d8b61217d565b600088612935576129308c600060020160149054906101000a900460ff16611a87565b612952565b6129518c600060020160149054906101000a900460ff166119fe565b5b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886129908b8d611e2890919063ffffffff16565b6040516129a5999897969594939291906140b5565b60405180910390a17f25e8a331a7394a9f09862048843323b00bdbada258f524f5ce624a45bf00aabb8686600001548760010154886002015489600301548a600401548b60050154604051612a00979695949392919061415b565b60405180910390a150612b74565b612a1a60008d856120a6565b612a2660008d8b61217d565b600088612a4e57612a498c600060020160149054906101000a900460ff16611a87565b612a6b565b612a6a8c600060020160149054906101000a900460ff166119fe565b5b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f88612aa98b8d611e2890919063ffffffff16565b604051612abe999897969594939291906140b5565b60405180910390a17f73af1d417d82c240fdb6d319b34ad884487c6bf2845d98980cc52ad9171cb4558686600001548760010154886002015489600301548a600401548b60050154604051612b19979695949392919061415b565b60405180910390a1600060060160008781526020019081526020016000206000808201600090556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090555050505b612b8260008d898585613593565b95505050505050979650505050505050565b600042612bed6170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e1290919063ffffffff16565b1115612bfc5760009050612d41565b6000612c66617080612c588660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611e2890919063ffffffff16565b6114e490919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415612cc257600092505050612d41565b612d3c81612d2e84612d2089600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102586114ce90919063ffffffff16565b6114ce90919063ffffffff16565b6114e490919063ffffffff16565b925050505b92915050565b600080831415612d5a5760009050612df1565b6000612db08387600f0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e2890919063ffffffff16565b90506000811415612dc5576000915050612df1565b612ded620f4240612ddf83876114ce90919063ffffffff16565b6114e490919063ffffffff16565b9150505b949350505050565b612e84816040518060400160405280601b81526020017f5661756c743a20696e73756666696369656e742072657365727665000000000081525085600d0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132389092919063ffffffff16565b83600d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f533cb5ed32be6a90284e96b5747a1bfc2d38fdb5768a6b5f67ff7d62144ed67b8282604051612efa929190614871565b60405180910390a1505050565b612f93828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f44919061494a565b602060405180830381865afa158015612f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8591906148e6565b611e2890919063ffffffff16565b84600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061300381838573ffffffffffffffffffffffffffffffffffffffff166135e49092919063ffffffff16565b50505050565b8160050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16613097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308e90614eb3565b60405180910390fd5b5050565b6000808314156130ae5760009050613129565b60008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506131258361311783600a6131089190614a98565b876114ce90919063ffffffff16565b6114e490919063ffffffff16565b9150505b949350505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161316c919061494a565b602060405180830381865afa158015613189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ad91906148e6565b90508083600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322a90614f1f565b60405180910390fd5b505050565b6000838311158290613280576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132779190614fc7565b60405180910390fd5b5082840390509392505050565b81600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990614cdd565b60405180910390fd5b5050565b600080600089600601600061336d8b8b8b89611569565b8152602001908152602001600020905060006133948b8a8885600001548660030154611b10565b90506000806000806133b68f8d886000015489600201548d8b60060154612501565b915091508193506133e686600001546133d8838d6114ce90919063ffffffff16565b6114e490919063ffffffff16565b9250505060008280156133f95750600082115b1561341a578190508185600501546134119190614fe9565b85600501819055505b821580156134285750600082115b1561346557613444828660010154611e2890919063ffffffff16565b856001018190555081856005015461345c919061507d565b85600501819055505b60008a11156134a3576134818a82611e1290919063ffffffff16565b905061349a8a8660010154611e2890919063ffffffff16565b85600101819055505b88856000015414156134d3576134c6856001015482611e1290919063ffffffff16565b9050600085600101819055505b83811015613516576134f2848660010154611e2890919063ffffffff16565b856001018190555060006135078f8e8761237d565b90506135148f8e836123c0565b505b7f3ff41bdde87755b687ae83d0221a232b6be51a803330ed9661c1b5d0105e0d8a6135438e8e8e8c611569565b848460405161355493929190615111565b60405180910390a18084821161356a578161357e565b61357d8583611e2890919063ffffffff16565b5b96509650505050505097509795505050505050565b6000808311156135d6576135b286866135ad89898861237d565b6123c0565b60006135bf87878561237d565b90506135cd87878388612f07565b809150506135db565b600090505b95945050505050565b6136658363a9059cbb60e01b8484604051602401613603929190614871565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061366a565b505050565b60006136cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166137319092919063ffffffff16565b905060008151111561372c57808060200190518101906136ec919061515d565b61372b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613722906151fc565b60405180910390fd5b5b505050565b60606137408484600085613749565b90509392505050565b60608247101561378e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137859061528e565b60405180910390fd5b6137978561385d565b6137d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137cd906152fa565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516137ff9190615361565b60006040518083038185875af1925050503d806000811461383c576040519150601f19603f3d011682016040523d82523d6000602084013e613841565b606091505b5091509150613851828286613870565b92505050949350505050565b600080823b905060008111915050919050565b60608315613880578290506138d0565b6000835111156138935782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138c79190614fc7565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613907826138dc565b9050919050565b613917816138fc565b811461392257600080fd5b50565b6000813590506139348161390e565b92915050565b6000602082840312156139505761394f6138d7565b5b600061395e84828501613925565b91505092915050565b6000819050919050565b61397a81613967565b82525050565b60006020820190506139956000830184613971565b92915050565b6139a481613967565b81146139af57600080fd5b50565b6000813590506139c18161399b565b92915050565b6000602082840312156139dd576139dc6138d7565b5b60006139eb848285016139b2565b91505092915050565b60008115159050919050565b613a09816139f4565b8114613a1457600080fd5b50565b600081359050613a2681613a00565b92915050565b60008060008060808587031215613a4657613a456138d7565b5b6000613a5487828801613925565b9450506020613a6587828801613925565b9350506040613a7687828801613925565b9250506060613a8787828801613a17565b91505092959194509250565b613a9c816139f4565b82525050565b6000604082019050613ab76000830185613a93565b613ac46020830184613971565b9392505050565b600080600080600060a08688031215613ae757613ae66138d7565b5b6000613af588828901613925565b9550506020613b0688828901613925565b9450506040613b1788828901613925565b9350506060613b28888289016139b2565b9250506080613b3988828901613a17565b9150509295509295909350565b600061010082019050613b5c600083018b613971565b613b69602083018a613971565b613b766040830189613971565b613b836060830188613971565b613b906080830187613971565b613b9d60a0830186613971565b613baa60c0830185613a93565b613bb760e0830184613971565b9998505050505050505050565b600080600080600060a08688031215613be057613bdf6138d7565b5b6000613bee88828901613925565b9550506020613bff888289016139b2565b9450506040613c10888289016139b2565b9350506060613c2188828901613a17565b9250506080613c32888289016139b2565b9150509295509295909350565b600080600080600080600060e0888a031215613c5e57613c5d6138d7565b5b6000613c6c8a828b01613925565b9750506020613c7d8a828b01613925565b9650506040613c8e8a828b01613925565b9550506060613c9f8a828b016139b2565b9450506080613cb08a828b016139b2565b93505060a0613cc18a828b01613a17565b92505060c0613cd28a828b01613925565b91505092959891949750929550565b600080600060608486031215613cfa57613cf96138d7565b5b6000613d0886828701613925565b9350506020613d19868287016139b2565b9250506040613d2a868287016139b2565b9150509250925092565b600080600080600060a08688031215613d5057613d4f6138d7565b5b6000613d5e88828901613925565b9550506020613d6f88828901613925565b9450506040613d8088828901613925565b9350506060613d9188828901613a17565b9250506080613da288828901613a17565b9150509295509295909350565b6000604082019050613dc46000830185613971565b613dd16020830184613971565b9392505050565b600080600080600080600060e0888a031215613df757613df66138d7565b5b6000613e058a828b01613925565b9750506020613e168a828b016139b2565b9650506040613e278a828b016139b2565b9550506060613e388a828b01613a17565b9450506080613e498a828b016139b2565b93505060a0613e5a8a828b016139b2565b92505060c0613e6b8a828b016139b2565b91505092959891949750929550565b600080600080600060a08688031215613e9657613e956138d7565b5b6000613ea488828901613925565b9550506020613eb588828901613925565b9450506040613ec688828901613925565b9350506060613ed788828901613a17565b9250506080613ee888828901613925565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f2f82613967565b9150613f3a83613967565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f7357613f72613ef5565b5b828202905092915050565b600082825260208201905092915050565b7f5661756c743a20696e73756666696369656e7420636f6c6c61746572616c206660008201527f6f72206665657300000000000000000000000000000000000000000000000000602082015250565b6000613feb602783613f7e565b9150613ff682613f8f565b604082019050919050565b6000602082019050818103600083015261401a81613fde565b9050919050565b7f5661756c743a20696e76616c696420706f736974696f6e2e73697a6500000000600082015250565b6000614057601c83613f7e565b915061406282614021565b602082019050919050565b600060208201905081810360008301526140868161404a565b9050919050565b6000819050919050565b6140a08161408d565b82525050565b6140af816138fc565b82525050565b6000610120820190506140cb600083018c614097565b6140d8602083018b6140a6565b6140e5604083018a6140a6565b6140f260608301896140a6565b6140ff6080830188613971565b61410c60a0830187613971565b61411960c0830186613a93565b61412660e0830185613971565b614134610100830184613971565b9a9950505050505050505050565b6000819050919050565b61415581614142565b82525050565b600060e082019050614170600083018a614097565b61417d6020830189613971565b61418a6040830188613971565b6141976060830187613971565b6141a46080830186613971565b6141b160a0830185613971565b6141be60c083018461414c565b98975050505050505050565b60006141d582614142565b91507f800000000000000000000000000000000000000000000000000000000000000082141561420857614207613ef5565b5b816000039050919050565b7f5661756c743a20696e76616c696420706f736974696f6e000000000000000000600082015250565b6000614249601783613f7e565b915061425482614213565b602082019050919050565b600060208201905081810360008301526142788161423c565b9050919050565b7f5661756c743a206c6f737365732065786365656420636f6c6c61746572616c00600082015250565b60006142b5601f83613f7e565b91506142c08261427f565b602082019050919050565b600060208201905081810360008301526142e4816142a8565b9050919050565b7f5661756c743a20666565732065786365656420636f6c6c61746572616c000000600082015250565b6000614321601d83613f7e565b915061432c826142eb565b602082019050919050565b6000602082019050818103600083015261435081614314565b9050919050565b7f5661756c743a206c69717569646174696f6e206665657320657863656564206360008201527f6f6c6c61746572616c0000000000000000000000000000000000000000000000602082015250565b60006143b3602983613f7e565b91506143be82614357565b604082019050919050565b600060208201905081810360008301526143e2816143a6565b9050919050565b7f5661756c743a206d6178206c6576657261676520657863656564656400000000600082015250565b600061441f601c83613f7e565b915061442a826143e9565b602082019050919050565b6000602082019050818103600083015261444e81614412565b9050919050565b7f5661756c743a20656d70747920706f736974696f6e0000000000000000000000600082015250565b600061448b601583613f7e565b915061449682614455565b602082019050919050565b600060208201905081810360008301526144ba8161447e565b9050919050565b7f5661756c743a20706f736974696f6e2063616e6e6f74206265206c697175696460008201527f6174656400000000000000000000000000000000000000000000000000000000602082015250565b600061451d602483613f7e565b9150614528826144c1565b604082019050919050565b6000602082019050818103600083015261454c81614510565b9050919050565b600061014082019050614569600083018d614097565b614576602083018c6140a6565b614583604083018b6140a6565b614590606083018a6140a6565b61459d6080830189613a93565b6145aa60a0830188613971565b6145b760c0830187613971565b6145c460e0830186613971565b6145d261010083018561414c565b6145e0610120830184613971565b9b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061462982613967565b915061463483613967565b925082614644576146436145ef565b5b828204905092915050565b60008160601b9050919050565b60006146678261464f565b9050919050565b60006146798261465c565b9050919050565b61469161468c826138fc565b61466e565b82525050565b60008160f81b9050919050565b60006146af82614697565b9050919050565b60006146c1826146a4565b9050919050565b6146d96146d4826139f4565b6146b6565b82525050565b60006146eb8287614680565b6014820191506146fb8286614680565b60148201915061470b8285614680565b60148201915061471b82846146c8565b60018201915081905095945050505050565b7f436f6e747261637420616c726561647920656e74657265640000000000000000600082015250565b6000614763601883613f7e565b915061476e8261472d565b602082019050919050565b6000602082019050818103600083015261479281614756565b9050919050565b7f5661756c743a20696e76616c6964206d73672e73656e64657200000000000000600082015250565b60006147cf601983613f7e565b91506147da82614799565b602082019050919050565b600060208201905081810360008301526147fe816147c2565b9050919050565b7f5661756c743a206d69736d61746368656420746f6b656e730000000000000000600082015250565b600061483b601883613f7e565b915061484682614805565b602082019050919050565b6000602082019050818103600083015261486a8161482e565b9050919050565b600060408201905061488660008301856140a6565b6148936020830184613971565b9392505050565b60006060820190506148af60008301866140a6565b6148bc6020830185613a93565b6148c96040830184613a93565b949350505050565b6000815190506148e08161399b565b92915050565b6000602082840312156148fc576148fb6138d7565b5b600061490a848285016148d1565b91505092915050565b600060608201905061492860008301866140a6565b6149356020830185613971565b6149426040830184613971565b949350505050565b600060208201905061495f60008301846140a6565b92915050565b60008160011c9050919050565b6000808291508390505b60018511156149bc5780860481111561499857614997613ef5565b5b60018516156149a75780820291505b80810290506149b585614965565b945061497c565b94509492505050565b6000826149d55760019050614a91565b816149e35760009050614a91565b81600181146149f95760028114614a0357614a32565b6001915050614a91565b60ff841115614a1557614a14613ef5565b5b8360020a915084821115614a2c57614a2b613ef5565b5b50614a91565b5060208310610133831016604e8410600b8410161715614a675782820a905083811115614a6257614a61613ef5565b5b614a91565b614a748484846001614972565b92509050818404811115614a8b57614a8a613ef5565b5b81810290505b9392505050565b6000614aa382613967565b9150614aae83613967565b9250614adb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846149c5565b905092915050565b6000614aee82613967565b9150614af983613967565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614b2e57614b2d613ef5565b5b828201905092915050565b6000614b4482613967565b9150614b4f83613967565b925082821015614b6257614b61613ef5565b5b828203905092915050565b7f5661756c743a20636f6c6c61746572616c2073686f756c64206265207769746860008201527f647261776e000000000000000000000000000000000000000000000000000000602082015250565b6000614bc9602583613f7e565b9150614bd482614b6d565b604082019050919050565b60006020820190508181036000830152614bf881614bbc565b9050919050565b7f5661756c743a205f73697a65206d757374206265206d6f7265207468616e205f60008201527f636f6c6c61746572616c00000000000000000000000000000000000000000000602082015250565b6000614c5b602a83613f7e565b9150614c6682614bff565b604082019050919050565b60006020820190508181036000830152614c8a81614c4e565b9050919050565b7f5661756c743a2072657365727665206578636565647320706f6f6c0000000000600082015250565b6000614cc7601b83613f7e565b9150614cd282614c91565b602082019050919050565b60006020820190508181036000830152614cf681614cba565b9050919050565b7f5661756c743a20696e76616c6964205f61766572616765507269636500000000600082015250565b6000614d33601c83613f7e565b9150614d3e82614cfd565b602082019050919050565b60006020820190508181036000830152614d6281614d26565b9050919050565b7f5661756c743a20706f736974696f6e2073697a65206578636565646564000000600082015250565b6000614d9f601d83613f7e565b9150614daa82614d69565b602082019050919050565b60006020820190508181036000830152614dce81614d92565b9050919050565b7f5661756c743a20706f736974696f6e20636f6c6c61746572616c20657863656560008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b6000614e31602383613f7e565b9150614e3c82614dd5565b604082019050919050565b60006020820190508181036000830152614e6081614e24565b9050919050565b7f5661756c743a20746f6b656e206e6f742077686974656c697374656400000000600082015250565b6000614e9d601c83613f7e565b9150614ea882614e67565b602082019050919050565b60006020820190508181036000830152614ecc81614e90565b9050919050565b7f5661756c743a20696e76616c696420696e637265617365000000000000000000600082015250565b6000614f09601783613f7e565b9150614f1482614ed3565b602082019050919050565b60006020820190508181036000830152614f3881614efc565b9050919050565b600081519050919050565b60005b83811015614f68578082015181840152602081019050614f4d565b83811115614f77576000848401525b50505050565b6000601f19601f8301169050919050565b6000614f9982614f3f565b614fa38185613f7e565b9350614fb3818560208601614f4a565b614fbc81614f7d565b840191505092915050565b60006020820190508181036000830152614fe18184614f8e565b905092915050565b6000614ff482614142565b9150614fff83614142565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561503a57615039613ef5565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561507257615071613ef5565b5b828201905092915050565b600061508882614142565b915061509383614142565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156150ce576150cd613ef5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561510657615105613ef5565b5b828203905092915050565b60006060820190506151266000830186614097565b6151336020830185613a93565b6151406040830184613971565b949350505050565b60008151905061515781613a00565b92915050565b600060208284031215615173576151726138d7565b5b600061518184828501615148565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006151e6602a83613f7e565b91506151f18261518a565b604082019050919050565b60006020820190508181036000830152615215816151d9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000615278602683613f7e565b91506152838261521c565b604082019050919050565b600060208201905081810360008301526152a78161526b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006152e4601d83613f7e565b91506152ef826152ae565b602082019050919050565b60006020820190508181036000830152615313816152d7565b9050919050565b600081519050919050565b600081905092915050565b600061533b8261531a565b6153458185615325565b9350615355818560208601614f4a565b80840191505092915050565b600061536d8284615330565b91508190509291505056fea2646970667358221220e43fe3d9816afd0969fcfe32d591003fd3e6002c74ff29188a2583db1b8e99c364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12694,
        "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21205_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)21090_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)21090_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)21090_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 21077,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21079,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21081,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21083,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21085,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21087,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 21089,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)21205_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 21092,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21094,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21096,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21098,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21100,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21102,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21105,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 21109,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21114,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)21090_storage)"
          },
          {
            "astId": 21118,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21122,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21126,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21130,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21134,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "ndolAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21138,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21142,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21146,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21150,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21154,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21158,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21162,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21164,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 21168,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21172,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21176,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21180,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21184,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21188,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21190,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 21192,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 21196,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 21198,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "totalNDOLMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 21204,
            "contract": "contracts/facets/Vault/VaultFacet.sol:VaultFacet",
            "label": "ndolMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}