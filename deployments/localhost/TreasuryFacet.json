{
  "address": "0x248Fb82741C87FF38177B1DcF88599BeE9cc1f0B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "activated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "ChangeActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "ChangeQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excessReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Necc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nNecc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_NDOL",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksNeededForQueue",
          "type": "uint256"
        }
      ],
      "name": "initializeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithNecc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "toggle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "valueOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b24a01d96d9a9ae10c5f6c9de36c7b0b09064f6841e0f783383c3a5ccdd0e24",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x248Fb82741C87FF38177B1DcF88599BeE9cc1f0B",
    "transactionIndex": 0,
    "gasUsed": "4204347",
    "logsBloom": "0x
    "blockHash": "0x9f0de70b1a16999cd43cb642885505278ffef2093805b8f9bbe8c39f185fe46b",
    "transactionHash": "0x2b24a01d96d9a9ae10c5f6c9de36c7b0b09064f6841e0f783383c3a5ccdd0e24",
    "logs": [],
    "blockNumber": 54541440,
    "cumulativeGasUsed": "4204347",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f711853f742528c82491f9fe84f0ad9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Necc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nNecc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NDOL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"name\":\"initializeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithNecc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"queue(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"repayDebtWithNecc(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"toggle(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"valueOfToken(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"},\"returns\":{\"_value\":\"uint\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for Necc\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mintRewards(address,uint256)\":{\"notice\":\"send epoch reward to staking contract\"},\"queue(uint8,address)\":{\"notice\":\"queue address to change boolean in mapping\"},\"repayDebtWithNecc(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with Necc\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"toggle(uint8,address)\":{\"notice\":\"verify queue then set boolean in mapping\"},\"valueOfToken(address,uint256)\":{\"notice\":\"returns Necc valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn Necc for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Treasury/TreasuryFacet.sol\":\"TreasuryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Treasury/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibTreasuryStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibTreasuryStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x32610d078fcc64bc25544d91162acadfaca346cdf9a8814df81394686d170d32\",\"license\":\"MIT\"},\"contracts/facets/Treasury/TreasuryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface IBondCalculator {\\n    function valuation(address pair_, uint256 amount_)\\n        external\\n        view\\n        returns (uint256 _value);\\n}\\n\\ninterface IERC20Mintable {\\n    function decimals() external view returns (uint256);\\n\\n    function mint(uint256 amount_) external;\\n\\n    function mint(address account_, uint256 ammount_) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ncontract TreasuryFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit(address indexed token, uint256 amount, uint256 value);\\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n    event CreateDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event RepayDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event ReservesManaged(address indexed token, uint256 amount);\\n    event ReservesUpdated(uint256 indexed totalReserves);\\n    event ReservesAudited(uint256 indexed totalReserves);\\n    event RewardsMinted(\\n        address indexed caller,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    event ChangeQueued(MANAGING indexed managing, address queued);\\n    event ChangeActivated(\\n        MANAGING indexed managing,\\n        address activated,\\n        bool result\\n    );\\n\\n    enum MANAGING {\\n        RESERVEDEPOSITOR,\\n        RESERVESPENDER,\\n        RESERVETOKEN,\\n        RESERVEMANAGER,\\n        LIQUIDITYDEPOSITOR,\\n        LIQUIDITYTOKEN,\\n        LIQUIDITYMANAGER,\\n        DEBTOR,\\n        REWARDMANAGER,\\n        NNECC\\n    }\\n\\n    function initializeTreasury(\\n        address _Necc,\\n        address _nNecc,\\n        address _NDOL,\\n        uint256 _blocksNeededForQueue\\n    ) external {\\n        onlyGov();\\n        require(_Necc != address(0));\\n        require(_nNecc != address(0));\\n        s.nNecc = _nNecc;\\n        s.Necc = _Necc;\\n\\n        s.isReserveToken[_NDOL] = true;\\n        s.reserveTokens.push(_NDOL);\\n\\n        s.blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards(address _recipient, uint256 _amount) external {\\n        require(s.isRewardManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(_amount <= excessReserves(), \\\"Treasury: Insufficient reserves\\\");\\n\\n        IERC20Mintable(s.Necc).mint(_recipient, _amount);\\n\\n        emit RewardsMinted(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for Necc\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_) {\\n        require(\\n            s.isReserveToken[_token] || s.isLiquidityToken[_token],\\n            \\\"Treasury: Not accepted\\\"\\n        );\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (s.isReserveToken[_token]) {\\n            require(s.isReserveDepositor[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else {\\n            require(\\n                s.isLiquidityDepositor[msg.sender],\\n                \\\"Treasury: Not approved\\\"\\n            );\\n        }\\n\\n        uint256 value = valueOfToken(_token, _amount);\\n        // mint Necc needed and store amount of rewards for distribution\\n        send_ = value.sub(_profit);\\n        IERC20Mintable(s.Necc).mint(msg.sender, send_);\\n\\n        s.totalReserves = s.totalReserves.add(value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        emit Deposit(_token, _amount, value);\\n\\n        return send_;\\n    }\\n\\n    /**\\n        @notice allow approved address to burn Necc for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw(uint256 _amount, address _token) external {\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\"); // Only reserves can be used for redemptions\\n        require(\\n            s.isReserveSpender[msg.sender] == true,\\n            \\\"Treasury: Not approved\\\"\\n        );\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _value);\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdrawal(_token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt(uint256 _amount, address _token) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\");\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n\\n        uint256 maximumDebt = IERC20(s.sNecc).balanceOf(msg.sender); // Can only borrow against sNecc held\\n        uint256 availableDebt = maximumDebt.sub(s.debtorBalance[msg.sender]);\\n        require(_value <= availableDebt, \\\"Exceeds debt limit\\\");\\n\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].add(_value);\\n        s.totalDebt = s.totalDebt.add(_value);\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).transfer(msg.sender, _amount);\\n\\n        emit CreateDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve(uint256 _amount, address _token) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_value);\\n        s.totalDebt = s.totalDebt.sub(_value);\\n\\n        s.totalReserves = s.totalReserves.add(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        emit RepayDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with Necc\\n        @param _amount uint\\n     */\\n    function repayDebtWithNecc(uint256 _amount) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _amount);\\n\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_amount);\\n        s.totalDebt = s.totalDebt.sub(_amount);\\n\\n        emit RepayDebt(msg.sender, s.Necc, _amount, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage(address _token, uint256 _amount) external {\\n        if (s.isLiquidityToken[_token]) {\\n            require(s.isLiquidityManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else {\\n            require(s.isReserveManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        }\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        (_token, _amount);\\n        require(_value <= excessReserves(), \\\"Treasury: Insufficient reserves\\\");\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit ReservesManaged(_token, _amount);\\n    }\\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns (uint256) {\\n        return\\n            s.totalReserves.sub(IERC20(s.Necc).totalSupply().sub(s.totalDebt));\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external {\\n        onlyGov();\\n        uint256 reserves;\\n        for (uint256 i = 0; i < s.reserveTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.reserveTokens[i],\\n                    IERC20(s.reserveTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        for (uint256 i = 0; i < s.liquidityTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.liquidityTokens[i],\\n                    IERC20(s.liquidityTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        s.totalReserves = reserves;\\n        emit ReservesUpdated(reserves);\\n        emit ReservesAudited(reserves);\\n    }\\n\\n    /**\\n        @notice returns Necc valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return _value uint\\n     */\\n    function valueOfToken(address _token, uint256 _amount)\\n        public\\n        view\\n        returns (uint256 _value)\\n    {\\n        if (s.isReserveToken[_token]) {\\n            // convert amount to match Necc decimals\\n            _value = _amount.mul(10**IERC20Mintable(s.Necc).decimals()).div(\\n                10**IERC20Mintable(_token).decimals()\\n            );\\n        } else if (s.isLiquidityToken[_token]) {\\n            _value = IBondCalculator(address(this)).valuation(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            s.reserveDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            s.reserveSpenderQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            s.reserveTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            s.ReserveManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            s.LiquidityDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            s.LiquidityTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            s.LiquidityManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            s.debtorQueue[_address] = block.number.add(s.blocksNeededForQueue);\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            s.rewardManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.NNECC) {\\n            // 9\\n            s.sNeccQueue = block.number.add(s.blocksNeededForQueue);\\n        } else return false;\\n\\n        emit ChangeQueued(_managing, _address);\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function toggle(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        bool _result;\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            if (\\n                requirements(\\n                    s.reserveDepositorQueue,\\n                    s.isReserveDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.reserveDepositorQueue[_address] = 0;\\n                if (!listContains(s.reserveDepositors, _address)) {\\n                    s.reserveDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveDepositor[_address];\\n            s.isReserveDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            if (\\n                requirements(\\n                    s.reserveSpenderQueue,\\n                    s.isReserveSpender,\\n                    _address\\n                )\\n            ) {\\n                s.reserveSpenderQueue[_address] = 0;\\n                if (!listContains(s.reserveSpenders, _address)) {\\n                    s.reserveSpenders.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveSpender[_address];\\n            s.isReserveSpender[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            if (requirements(s.reserveTokenQueue, s.isReserveToken, _address)) {\\n                s.reserveTokenQueue[_address] = 0;\\n                if (!listContains(s.reserveTokens, _address)) {\\n                    s.reserveTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveToken[_address];\\n            s.isReserveToken[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            if (\\n                requirements(\\n                    s.ReserveManagerQueue,\\n                    s.isReserveManager,\\n                    _address\\n                )\\n            ) {\\n                s.reserveManagers.push(_address);\\n                s.ReserveManagerQueue[_address] = 0;\\n                if (!listContains(s.reserveManagers, _address)) {\\n                    s.reserveManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveManager[_address];\\n            s.isReserveManager[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            if (\\n                requirements(\\n                    s.LiquidityDepositorQueue,\\n                    s.isLiquidityDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.liquidityDepositors.push(_address);\\n                s.LiquidityDepositorQueue[_address] = 0;\\n                if (!listContains(s.liquidityDepositors, _address)) {\\n                    s.liquidityDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityDepositor[_address];\\n            s.isLiquidityDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            if (\\n                requirements(\\n                    s.LiquidityTokenQueue,\\n                    s.isLiquidityToken,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityTokenQueue[_address] = 0;\\n                if (!listContains(s.liquidityTokens, _address)) {\\n                    s.liquidityTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityToken[_address];\\n            s.isLiquidityToken[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            if (\\n                requirements(\\n                    s.LiquidityManagerQueue,\\n                    s.isLiquidityManager,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityManagerQueue[_address] = 0;\\n                if (!listContains(s.liquidityManagers, _address)) {\\n                    s.liquidityManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityManager[_address];\\n            s.isLiquidityManager[_address] = _result;\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            if (requirements(s.debtorQueue, s.isDebtor, _address)) {\\n                s.debtorQueue[_address] = 0;\\n                if (!listContains(s.debtors, _address)) {\\n                    s.debtors.push(_address);\\n                }\\n            }\\n            _result = !s.isDebtor[_address];\\n            s.isDebtor[_address] = _result;\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            if (\\n                requirements(s.rewardManagerQueue, s.isRewardManager, _address)\\n            ) {\\n                s.rewardManagerQueue[_address] = 0;\\n                if (!listContains(s.rewardManagers, _address)) {\\n                    s.rewardManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isRewardManager[_address];\\n            s.isRewardManager[_address] = _result;\\n        } else if (_managing == MANAGING.NNECC) {\\n            // 9\\n            s.sNeccQueue = 0;\\n            s.sNecc = _address;\\n            _result = true;\\n        } else return false;\\n\\n        emit ChangeActivated(_managing, _address, _result);\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements(\\n        mapping(address => uint256) storage queue_,\\n        mapping(address => bool) storage status_,\\n        address _address\\n    ) internal view returns (bool) {\\n        if (!status_[_address]) {\\n            require(queue_[_address] != 0, \\\"Must queue\\\");\\n            require(queue_[_address] <= block.number, \\\"Queue not expired\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains(address[] storage _list, address _token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _list.length; i++) {\\n            if (_list[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x6b6a638c86ff8caf08a02e06c940338873b3675c63e81625a912e817add0171d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibTreasuryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary LibTreasuryStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.treasury.storage\\\");\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc;\\n        address nNecc;\\n        address sNecc;\\n        uint256 blocksNeededForQueue;\\n        address[] reserveTokens; // Push only, beware false-positives.\\n        uint256 sNeccQueue; // Delays change to sNecc address\\n        uint256 totalReserves; // Risk-free value of all assets\\n        uint256 totalDebt;\\n        mapping(address => bool) isReserveToken;\\n        mapping(address => uint256) reserveTokenQueue; // Delays changes to mapping.\\n        address[] reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveDepositor;\\n        mapping(address => uint256) reserveDepositorQueue; // Delays changes to mapping.\\n        address[] reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveSpender;\\n        mapping(address => uint256) reserveSpenderQueue; // Delays changes to mapping.\\n        address[] liquidityTokens; // Push only, beware false-positives.\\n        mapping(address => bool) isLiquidityToken;\\n        mapping(address => uint256) LiquidityTokenQueue; // Delays changes to mapping.\\n        address[] liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityDepositor;\\n        mapping(address => uint256) LiquidityDepositorQueue; // Delays changes to mapping.\\n        address[] reserveManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveManager;\\n        mapping(address => uint256) ReserveManagerQueue; // Delays changes to mapping.\\n        address[] liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityManager;\\n        mapping(address => uint256) LiquidityManagerQueue; // Delays changes to mapping.\\n        address[] debtors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isDebtor;\\n        mapping(address => uint256) debtorQueue; // Delays changes to mapping.\\n        mapping(address => uint256) debtorBalance;\\n        address[] rewardManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isRewardManager;\\n        mapping(address => uint256) rewardManagerQueue; // Delays changes to mapping.\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xbf0f0d51157d7760b0d36bfc05b4fad46effc4f566bcd699e97d3876d6ff5cc8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80637823f58e1161008c578063d1b317e511610066578063d1b317e5146101d3578063d5e8be0d14610203578063d796ffb814610233578063e83afee31461024f576100ce565b80637823f58e1461016b578063bc157ac114610187578063cad9311e146101b7576100ce565b8062f714ce146100d35780630b0eee30146100ef5780630c3513a81461010b57806312422d23146101295780632b7ce500146101455780636a20de921461014f575b600080fd5b6100ed60048036038101906100e89190613e21565b61027f565b005b61010960048036038101906101049190613e61565b610516565b005b6101136107b8565b6040516101209190613eb0565b60405180910390f35b610143600480360381019061013e9190613e21565b610880565b005b61014d610ce6565b005b61016960048036038101906101649190613e61565b610fda565b005b61018560048036038101906101809190613ecb565b6111ad565b005b6101a1600480360381019061019c9190613f32565b611381565b6040516101ae9190613eb0565b60405180910390f35b6101d160048036038101906101cc9190613f85565b61176d565b005b6101ed60048036038101906101e89190613e61565b6119d7565b6040516101fa9190613eb0565b60405180910390f35b61021d60048036038101906102189190613fd7565b611c4c565b60405161022a9190614032565b60405180910390f35b61024d60048036038101906102489190613e21565b612dc3565b005b61026960048036038101906102649190613fd7565b613097565b6040516102769190614032565b60405180910390f35b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661030e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610305906140aa565b60405180910390fd5b600115156000600e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90614116565b60405180910390fd5b60006103b082846119d7565b90506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401610411929190614145565b600060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b5050505061045b816000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a26104c133848473ffffffffffffffffffffffffffffffffffffffff166136e09092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb848360405161050992919061416e565b60405180910390a2505050565b600060110160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156105ff576000601a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190614116565b60405180910390fd5b61068f565b600060170160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068590614116565b60405180910390fd5b5b600061069b83836119d7565b90506106a56107b8565b8111156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906141e3565b60405180910390fd5b6106ff816000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a261076533838573ffffffffffffffffffffffffffffffffffffffff166136e09092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd80836040516107ab9190613eb0565b60405180910390a2505050565b600061087b6108676000600701546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190614218565b6136ca90919063ffffffff16565b6000600601546136ca90919063ffffffff16565b905090565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690614116565b60405180910390fd5b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610995906140aa565b60405180910390fd5b60006109aa82846119d7565b905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a0b9190614245565b602060405180830381865afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190614218565b90506000610aa56000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836136ca90919063ffffffff16565b905080831115610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae1906142ac565b60405180910390fd5b610b3f836000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461376690919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9d8360006007015461376690919063ffffffff16565b600060070181905550610bbe836000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401610c34929190614145565b6020604051808303816000875af1158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7791906142f8565b508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d68786604051610cd792919061416e565b60405180910390a35050505050565b610cee61377c565b600080600090505b600060040180549050811015610e3257610e1d610e0e60006004018381548110610d2357610d22614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006004018481548110610d6557610d64614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dc89190614245565b602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190614218565b6119d7565b8361376690919063ffffffff16565b91508080610e2a90614383565b915050610cf6565b5060005b600060100180549050811015610f7257610f5d610f4e60006010018381548110610e6357610e62614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006010018481548110610ea557610ea4614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f089190614245565b602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190614218565b6119d7565b8361376690919063ffffffff16565b91508080610f6a90614383565b915050610e36565b5080600060060181905550807f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a2807fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446660405160405180910390a250565b600060210160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106090614116565b60405180910390fd5b6110716107b8565b8111156110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110aa906141e3565b60405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401611112929190614145565b600060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c836040516111a19190613eb0565b60405180910390a35050565b6111b561377c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561122957600080fd5b82600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060006003018190555050505050565b60008060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806114295750600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145f906140aa565b60405180910390fd5b6114953330868673ffffffffffffffffffffffffffffffffffffffff16613786909392919063ffffffff16565b600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561157e576000600b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157090614116565b60405180910390fd5b61160e565b600060140160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490614116565b60405180910390fd5b5b600061161a84866119d7565b905061162f83826136ca90919063ffffffff16565b91506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401611690929190614145565b600060405180830381600087803b1580156116aa57600080fd5b505af11580156116be573d6000803e3d6000fd5b505050506116da8160006006015461376690919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15868360405161175d92919061416e565b60405180910390a2509392505050565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f390614116565b60405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b815260040161185b929190614145565b600060405180830381600087803b15801561187557600080fd5b505af1158015611889573d6000803e3d6000fd5b505050506118e2816000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ca90919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611940816000600701546136ca90919063ffffffff16565b6000600701819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f30983846040516119cc92919061416e565b60405180910390a350565b60008060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611b7157611b6a8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f9190614218565b600a611aab91906144ff565b611b5c6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190614218565b600a611b4d91906144ff565b8561380f90919063ffffffff16565b61382590919063ffffffff16565b9050611c46565b600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611c45573073ffffffffffffffffffffffffffffffffffffffff16634249719f84846040518363ffffffff1660e01b8152600401611c01929190614145565b602060405180830381865afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614218565b90505b5b92915050565b6000611c5661377c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c9057600080fd5b6000806009811115611ca557611ca461454a565b5b846009811115611cb857611cb761454a565b5b1415611e4957611cd16000600c016000600b018561383b565b15611d9757600080600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d2b6000600a01846139a5565b611d96576000600a01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d6b565b60016009811115611e5d57611e5c61454a565b5b846009811115611e7057611e6f61454a565b5b141561200157611e896000600f016000600e018561383b565b15611f4f57600080600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ee36000600d01846139a5565b611f4e576000600d01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d6a565b600260098111156120155761201461454a565b5b8460098111156120285761202761454a565b5b14156121b957612041600060090160006008018561383b565b156121075760008060090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061209b6000600401846139a5565b612106576000600401839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d69565b600360098111156121cd576121cc61454a565b5b8460098111156121e0576121df61454a565b5b14156123d7576121f9600060180160006017018561383b565b15612325576000601601839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060180160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122b96000601601846139a5565b612324576000601601839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060170160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d68565b600460098111156123eb576123ea61454a565b5b8460098111156123fe576123fd61454a565b5b14156125f557612417600060150160006014018561383b565b15612543576000601301839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060150160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124d76000601301846139a5565b612542576000601301839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060140160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060140160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d67565b600560098111156126095761260861454a565b5b84600981111561261c5761261b61454a565b5b14156127ad57612635600060120160006011018561383b565b156126fb5760008060120160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061268f6000601001846139a5565b6126fa576000601001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060110160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d66565b600660098111156127c1576127c061454a565b5b8460098111156127d4576127d361454a565b5b1415612965576127ed6000601b016000601a018561383b565b156128b357600080601b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128476000601901846139a5565b6128b2576000601901839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000601a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000601a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d65565b600760098111156129795761297861454a565b5b84600981111561298c5761298b61454a565b5b1415612b1d576129a56000601e016000601d018561383b565b15612a6b57600080601e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129ff6000601c01846139a5565b612a6a576000601c01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d64565b60086009811115612b3157612b3061454a565b5b846009811115612b4457612b4361454a565b5b1415612cd557612b5d600060220160006021018561383b565b15612c235760008060220160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bb76000602001846139a5565b612c22576000602001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060210160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060210160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d63565b600980811115612ce857612ce761454a565b5b846009811115612cfb57612cfa61454a565b5b1415612d58576000806005018190555082600060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612d62565b6000915050612dbd565b5b5b5b5b5b5b5b5b5b836009811115612d7e57612d7d61454a565b5b7f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc4778483604051612daf929190614579565b60405180910390a260019150505b92915050565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4990614116565b60405180910390fd5b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed8906140aa565b60405180910390fd5b612f0e3330848473ffffffffffffffffffffffffffffffffffffffff16613786909392919063ffffffff16565b6000612f1a82846119d7565b9050612f71816000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ca90919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612fcf816000600701546136ca90919063ffffffff16565b600060070181905550612ff08160006006015461376690919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309858460405161308a92919061416e565b60405180910390a3505050565b60006130a161377c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156130db57600080fd5b600060098111156130ef576130ee61454a565b5b8360098111156131025761310161454a565b5b141561316b576131206000600301544361376690919063ffffffff16565b6000600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613675565b6001600981111561317f5761317e61454a565b5b8360098111156131925761319161454a565b5b14156131fb576131b06000600301544361376690919063ffffffff16565b6000600f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613674565b6002600981111561320f5761320e61454a565b5b8360098111156132225761322161454a565b5b141561328b576132406000600301544361376690919063ffffffff16565b600060090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613673565b6003600981111561329f5761329e61454a565b5b8360098111156132b2576132b161454a565b5b141561332e576132e36132d4600260006003015461380f90919063ffffffff16565b4361376690919063ffffffff16565b600060180160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613672565b600460098111156133425761334161454a565b5b8360098111156133555761335461454a565b5b14156133be576133736000600301544361376690919063ffffffff16565b600060150160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613671565b600560098111156133d2576133d161454a565b5b8360098111156133e5576133e461454a565b5b141561344e576134036000600301544361376690919063ffffffff16565b600060120160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613670565b600660098111156134625761346161454a565b5b8360098111156134755761347461454a565b5b14156134f1576134a6613497600260006003015461380f90919063ffffffff16565b4361376690919063ffffffff16565b6000601b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366f565b600760098111156135055761350461454a565b5b8360098111156135185761351761454a565b5b1415613581576135366000600301544361376690919063ffffffff16565b6000601e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366e565b600860098111156135955761359461454a565b5b8360098111156135a8576135a761454a565b5b1415613611576135c66000600301544361376690919063ffffffff16565b600060220160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366d565b6009808111156136245761362361454a565b5b8360098111156136375761363661454a565b5b1415613663576136556000600301544361376690919063ffffffff16565b60006005018190555061366c565b600090506136c4565b5b5b5b5b5b5b5b5b5b8260098111156136885761368761454a565b5b7f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf836040516136b79190614245565b60405180910390a2600190505b92915050565b600081836136d891906145a2565b905092915050565b6137618363a9059cbb60e01b84846040516024016136ff929190614145565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a53565b505050565b6000818361377491906145d6565b905092915050565b613784613b1a565b565b613809846323b872dd60e01b8585856040516024016137a79392919061462c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a53565b50505050565b6000818361381d9190614663565b905092915050565b6000818361383391906146ec565b905092915050565b60008260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166139995760008460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561390f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161390690614769565b60405180910390fd5b438460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613990576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613987906147d5565b60405180910390fd5b6001905061399e565b600090505b9392505050565b600080600090505b8380549050811015613a47578273ffffffffffffffffffffffffffffffffffffffff168482815481106139e3576139e2614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613a34576001915050613a4d565b8080613a3f90614383565b9150506139ad565b50600090505b92915050565b6000613ab5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613bb59092919063ffffffff16565b9050600081511115613b155780806020019051810190613ad591906142f8565b613b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0b90614867565b60405180910390fd5b5b505050565b613b22613bcd565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613baa906148f9565b60405180910390fd5b565b6060613bc48484600085613bfa565b90509392505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b606082471015613c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c369061498b565b60405180910390fd5b613c4885613d0e565b613c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7e906149f7565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613cb09190614a91565b60006040518083038185875af1925050503d8060008114613ced576040519150601f19603f3d011682016040523d82523d6000602084013e613cf2565b606091505b5091509150613d02828286613d21565b92505050949350505050565b600080823b905060008111915050919050565b60608315613d3157829050613d81565b600083511115613d445782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d789190614afd565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b613da081613d8d565b8114613dab57600080fd5b50565b600081359050613dbd81613d97565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613dee82613dc3565b9050919050565b613dfe81613de3565b8114613e0957600080fd5b50565b600081359050613e1b81613df5565b92915050565b60008060408385031215613e3857613e37613d88565b5b6000613e4685828601613dae565b9250506020613e5785828601613e0c565b9150509250929050565b60008060408385031215613e7857613e77613d88565b5b6000613e8685828601613e0c565b9250506020613e9785828601613dae565b9150509250929050565b613eaa81613d8d565b82525050565b6000602082019050613ec56000830184613ea1565b92915050565b60008060008060808587031215613ee557613ee4613d88565b5b6000613ef387828801613e0c565b9450506020613f0487828801613e0c565b9350506040613f1587828801613e0c565b9250506060613f2687828801613dae565b91505092959194509250565b600080600060608486031215613f4b57613f4a613d88565b5b6000613f5986828701613dae565b9350506020613f6a86828701613e0c565b9250506040613f7b86828701613dae565b9150509250925092565b600060208284031215613f9b57613f9a613d88565b5b6000613fa984828501613dae565b91505092915050565b600a8110613fbf57600080fd5b50565b600081359050613fd181613fb2565b92915050565b60008060408385031215613fee57613fed613d88565b5b6000613ffc85828601613fc2565b925050602061400d85828601613e0c565b9150509250929050565b60008115159050919050565b61402c81614017565b82525050565b60006020820190506140476000830184614023565b92915050565b600082825260208201905092915050565b7f54726561737572793a204e6f7420616363657074656400000000000000000000600082015250565b600061409460168361404d565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f54726561737572793a204e6f7420617070726f76656400000000000000000000600082015250565b600061410060168361404d565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b61413f81613de3565b82525050565b600060408201905061415a6000830185614136565b6141676020830184613ea1565b9392505050565b60006040820190506141836000830185613ea1565b6141906020830184613ea1565b9392505050565b7f54726561737572793a20496e73756666696369656e7420726573657276657300600082015250565b60006141cd601f8361404d565b91506141d882614197565b602082019050919050565b600060208201905081810360008301526141fc816141c0565b9050919050565b60008151905061421281613d97565b92915050565b60006020828403121561422e5761422d613d88565b5b600061423c84828501614203565b91505092915050565b600060208201905061425a6000830184614136565b92915050565b7f457863656564732064656274206c696d69740000000000000000000000000000600082015250565b600061429660128361404d565b91506142a182614260565b602082019050919050565b600060208201905081810360008301526142c581614289565b9050919050565b6142d581614017565b81146142e057600080fd5b50565b6000815190506142f2816142cc565b92915050565b60006020828403121561430e5761430d613d88565b5b600061431c848285016142e3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061438e82613d8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143c1576143c0614354565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b6001851115614423578086048111156143ff576143fe614354565b5b600185161561440e5780820291505b808102905061441c856143cc565b94506143e3565b94509492505050565b60008261443c57600190506144f8565b8161444a57600090506144f8565b8160018114614460576002811461446a57614499565b60019150506144f8565b60ff84111561447c5761447b614354565b5b8360020a91508482111561449357614492614354565b5b506144f8565b5060208310610133831016604e8410600b84101617156144ce5782820a9050838111156144c9576144c8614354565b5b6144f8565b6144db84848460016143d9565b925090508184048111156144f2576144f1614354565b5b81810290505b9392505050565b600061450a82613d8d565b915061451583613d8d565b92506145427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461442c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060408201905061458e6000830185614136565b61459b6020830184614023565b9392505050565b60006145ad82613d8d565b91506145b883613d8d565b9250828210156145cb576145ca614354565b5b828203905092915050565b60006145e182613d8d565b91506145ec83613d8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561462157614620614354565b5b828201905092915050565b60006060820190506146416000830186614136565b61464e6020830185614136565b61465b6040830184613ea1565b949350505050565b600061466e82613d8d565b915061467983613d8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146b2576146b1614354565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006146f782613d8d565b915061470283613d8d565b925082614712576147116146bd565b5b828204905092915050565b7f4d75737420717565756500000000000000000000000000000000000000000000600082015250565b6000614753600a8361404d565b915061475e8261471d565b602082019050919050565b6000602082019050818103600083015261478281614746565b9050919050565b7f5175657565206e6f742065787069726564000000000000000000000000000000600082015250565b60006147bf60118361404d565b91506147ca82614789565b602082019050919050565b600060208201905081810360008301526147ee816147b2565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614851602a8361404d565b915061485c826147f5565b604082019050919050565b6000602082019050818103600083015261488081614844565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006148e360228361404d565b91506148ee82614887565b604082019050919050565b60006020820190508181036000830152614912816148d6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061497560268361404d565b915061498082614919565b604082019050919050565b600060208201905081810360008301526149a481614968565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006149e1601d8361404d565b91506149ec826149ab565b602082019050919050565b60006020820190508181036000830152614a10816149d4565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015614a4b578082015181840152602081019050614a30565b83811115614a5a576000848401525b50505050565b6000614a6b82614a17565b614a758185614a22565b9350614a85818560208601614a2d565b80840191505092915050565b6000614a9d8284614a60565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000614acf82614aa8565b614ad9818561404d565b9350614ae9818560208601614a2d565b614af281614ab3565b840191505092915050565b60006020820190508181036000830152614b178184614ac4565b90509291505056fea2646970667358221220806da59d6bd813ca4b638f5bcc883e60928792a06e8182a5aa6aadf803df1b7564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c80637823f58e1161008c578063d1b317e511610066578063d1b317e5146101d3578063d5e8be0d14610203578063d796ffb814610233578063e83afee31461024f576100ce565b80637823f58e1461016b578063bc157ac114610187578063cad9311e146101b7576100ce565b8062f714ce146100d35780630b0eee30146100ef5780630c3513a81461010b57806312422d23146101295780632b7ce500146101455780636a20de921461014f575b600080fd5b6100ed60048036038101906100e89190613e21565b61027f565b005b61010960048036038101906101049190613e61565b610516565b005b6101136107b8565b6040516101209190613eb0565b60405180910390f35b610143600480360381019061013e9190613e21565b610880565b005b61014d610ce6565b005b61016960048036038101906101649190613e61565b610fda565b005b61018560048036038101906101809190613ecb565b6111ad565b005b6101a1600480360381019061019c9190613f32565b611381565b6040516101ae9190613eb0565b60405180910390f35b6101d160048036038101906101cc9190613f85565b61176d565b005b6101ed60048036038101906101e89190613e61565b6119d7565b6040516101fa9190613eb0565b60405180910390f35b61021d60048036038101906102189190613fd7565b611c4c565b60405161022a9190614032565b60405180910390f35b61024d60048036038101906102489190613e21565b612dc3565b005b61026960048036038101906102649190613fd7565b613097565b6040516102769190614032565b60405180910390f35b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661030e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610305906140aa565b60405180910390fd5b600115156000600e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90614116565b60405180910390fd5b60006103b082846119d7565b90506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401610411929190614145565b600060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b5050505061045b816000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a26104c133848473ffffffffffffffffffffffffffffffffffffffff166136e09092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb848360405161050992919061416e565b60405180910390a2505050565b600060110160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156105ff576000601a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190614116565b60405180910390fd5b61068f565b600060170160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068590614116565b60405180910390fd5b5b600061069b83836119d7565b90506106a56107b8565b8111156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906141e3565b60405180910390fd5b6106ff816000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a261076533838573ffffffffffffffffffffffffffffffffffffffff166136e09092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd80836040516107ab9190613eb0565b60405180910390a2505050565b600061087b6108676000600701546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190614218565b6136ca90919063ffffffff16565b6000600601546136ca90919063ffffffff16565b905090565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690614116565b60405180910390fd5b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610995906140aa565b60405180910390fd5b60006109aa82846119d7565b905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a0b9190614245565b602060405180830381865afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190614218565b90506000610aa56000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836136ca90919063ffffffff16565b905080831115610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae1906142ac565b60405180910390fd5b610b3f836000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461376690919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9d8360006007015461376690919063ffffffff16565b600060070181905550610bbe836000600601546136ca90919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401610c34929190614145565b6020604051808303816000875af1158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7791906142f8565b508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d68786604051610cd792919061416e565b60405180910390a35050505050565b610cee61377c565b600080600090505b600060040180549050811015610e3257610e1d610e0e60006004018381548110610d2357610d22614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006004018481548110610d6557610d64614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dc89190614245565b602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190614218565b6119d7565b8361376690919063ffffffff16565b91508080610e2a90614383565b915050610cf6565b5060005b600060100180549050811015610f7257610f5d610f4e60006010018381548110610e6357610e62614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006010018481548110610ea557610ea4614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f089190614245565b602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190614218565b6119d7565b8361376690919063ffffffff16565b91508080610f6a90614383565b915050610e36565b5080600060060181905550807f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a2807fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446660405160405180910390a250565b600060210160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106090614116565b60405180910390fd5b6110716107b8565b8111156110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110aa906141e3565b60405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401611112929190614145565b600060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c836040516111a19190613eb0565b60405180910390a35050565b6111b561377c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561122957600080fd5b82600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600401829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060006003018190555050505050565b60008060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806114295750600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145f906140aa565b60405180910390fd5b6114953330868673ffffffffffffffffffffffffffffffffffffffff16613786909392919063ffffffff16565b600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561157e576000600b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157090614116565b60405180910390fd5b61160e565b600060140160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490614116565b60405180910390fd5b5b600061161a84866119d7565b905061162f83826136ca90919063ffffffff16565b91506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401611690929190614145565b600060405180830381600087803b1580156116aa57600080fd5b505af11580156116be573d6000803e3d6000fd5b505050506116da8160006006015461376690919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15868360405161175d92919061416e565b60405180910390a2509392505050565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f390614116565b60405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b815260040161185b929190614145565b600060405180830381600087803b15801561187557600080fd5b505af1158015611889573d6000803e3d6000fd5b505050506118e2816000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ca90919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611940816000600701546136ca90919063ffffffff16565b6000600701819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f30983846040516119cc92919061416e565b60405180910390a350565b60008060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611b7157611b6a8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f9190614218565b600a611aab91906144ff565b611b5c6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190614218565b600a611b4d91906144ff565b8561380f90919063ffffffff16565b61382590919063ffffffff16565b9050611c46565b600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611c45573073ffffffffffffffffffffffffffffffffffffffff16634249719f84846040518363ffffffff1660e01b8152600401611c01929190614145565b602060405180830381865afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614218565b90505b5b92915050565b6000611c5661377c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c9057600080fd5b6000806009811115611ca557611ca461454a565b5b846009811115611cb857611cb761454a565b5b1415611e4957611cd16000600c016000600b018561383b565b15611d9757600080600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d2b6000600a01846139a5565b611d96576000600a01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d6b565b60016009811115611e5d57611e5c61454a565b5b846009811115611e7057611e6f61454a565b5b141561200157611e896000600f016000600e018561383b565b15611f4f57600080600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ee36000600d01846139a5565b611f4e576000600d01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d6a565b600260098111156120155761201461454a565b5b8460098111156120285761202761454a565b5b14156121b957612041600060090160006008018561383b565b156121075760008060090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061209b6000600401846139a5565b612106576000600401839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d69565b600360098111156121cd576121cc61454a565b5b8460098111156121e0576121df61454a565b5b14156123d7576121f9600060180160006017018561383b565b15612325576000601601839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060180160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122b96000601601846139a5565b612324576000601601839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060170160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d68565b600460098111156123eb576123ea61454a565b5b8460098111156123fe576123fd61454a565b5b14156125f557612417600060150160006014018561383b565b15612543576000601301839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060150160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124d76000601301846139a5565b612542576000601301839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060140160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060140160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d67565b600560098111156126095761260861454a565b5b84600981111561261c5761261b61454a565b5b14156127ad57612635600060120160006011018561383b565b156126fb5760008060120160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061268f6000601001846139a5565b6126fa576000601001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060110160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d66565b600660098111156127c1576127c061454a565b5b8460098111156127d4576127d361454a565b5b1415612965576127ed6000601b016000601a018561383b565b156128b357600080601b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128476000601901846139a5565b6128b2576000601901839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000601a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000601a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d65565b600760098111156129795761297861454a565b5b84600981111561298c5761298b61454a565b5b1415612b1d576129a56000601e016000601d018561383b565b15612a6b57600080601e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129ff6000601c01846139a5565b612a6a576000601c01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d64565b60086009811115612b3157612b3061454a565b5b846009811115612b4457612b4361454a565b5b1415612cd557612b5d600060220160006021018561383b565b15612c235760008060220160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612bb76000602001846139a5565b612c22576000602001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060210160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060210160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d63565b600980811115612ce857612ce761454a565b5b846009811115612cfb57612cfa61454a565b5b1415612d58576000806005018190555082600060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050612d62565b6000915050612dbd565b5b5b5b5b5b5b5b5b5b836009811115612d7e57612d7d61454a565b5b7f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc4778483604051612daf929190614579565b60405180910390a260019150505b92915050565b6000601d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4990614116565b60405180910390fd5b600060080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed8906140aa565b60405180910390fd5b612f0e3330848473ffffffffffffffffffffffffffffffffffffffff16613786909392919063ffffffff16565b6000612f1a82846119d7565b9050612f71816000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136ca90919063ffffffff16565b6000601f0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612fcf816000600701546136ca90919063ffffffff16565b600060070181905550612ff08160006006015461376690919063ffffffff16565b6000600601819055506000600601547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309858460405161308a92919061416e565b60405180910390a3505050565b60006130a161377c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156130db57600080fd5b600060098111156130ef576130ee61454a565b5b8360098111156131025761310161454a565b5b141561316b576131206000600301544361376690919063ffffffff16565b6000600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613675565b6001600981111561317f5761317e61454a565b5b8360098111156131925761319161454a565b5b14156131fb576131b06000600301544361376690919063ffffffff16565b6000600f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613674565b6002600981111561320f5761320e61454a565b5b8360098111156132225761322161454a565b5b141561328b576132406000600301544361376690919063ffffffff16565b600060090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613673565b6003600981111561329f5761329e61454a565b5b8360098111156132b2576132b161454a565b5b141561332e576132e36132d4600260006003015461380f90919063ffffffff16565b4361376690919063ffffffff16565b600060180160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613672565b600460098111156133425761334161454a565b5b8360098111156133555761335461454a565b5b14156133be576133736000600301544361376690919063ffffffff16565b600060150160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613671565b600560098111156133d2576133d161454a565b5b8360098111156133e5576133e461454a565b5b141561344e576134036000600301544361376690919063ffffffff16565b600060120160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613670565b600660098111156134625761346161454a565b5b8360098111156134755761347461454a565b5b14156134f1576134a6613497600260006003015461380f90919063ffffffff16565b4361376690919063ffffffff16565b6000601b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366f565b600760098111156135055761350461454a565b5b8360098111156135185761351761454a565b5b1415613581576135366000600301544361376690919063ffffffff16565b6000601e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366e565b600860098111156135955761359461454a565b5b8360098111156135a8576135a761454a565b5b1415613611576135c66000600301544361376690919063ffffffff16565b600060220160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061366d565b6009808111156136245761362361454a565b5b8360098111156136375761363661454a565b5b1415613663576136556000600301544361376690919063ffffffff16565b60006005018190555061366c565b600090506136c4565b5b5b5b5b5b5b5b5b5b8260098111156136885761368761454a565b5b7f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf836040516136b79190614245565b60405180910390a2600190505b92915050565b600081836136d891906145a2565b905092915050565b6137618363a9059cbb60e01b84846040516024016136ff929190614145565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a53565b505050565b6000818361377491906145d6565b905092915050565b613784613b1a565b565b613809846323b872dd60e01b8585856040516024016137a79392919061462c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a53565b50505050565b6000818361381d9190614663565b905092915050565b6000818361383391906146ec565b905092915050565b60008260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166139995760008460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561390f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161390690614769565b60405180910390fd5b438460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613990576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613987906147d5565b60405180910390fd5b6001905061399e565b600090505b9392505050565b600080600090505b8380549050811015613a47578273ffffffffffffffffffffffffffffffffffffffff168482815481106139e3576139e2614325565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613a34576001915050613a4d565b8080613a3f90614383565b9150506139ad565b50600090505b92915050565b6000613ab5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613bb59092919063ffffffff16565b9050600081511115613b155780806020019051810190613ad591906142f8565b613b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0b90614867565b60405180910390fd5b5b505050565b613b22613bcd565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613baa906148f9565b60405180910390fd5b565b6060613bc48484600085613bfa565b90509392505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b606082471015613c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c369061498b565b60405180910390fd5b613c4885613d0e565b613c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7e906149f7565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613cb09190614a91565b60006040518083038185875af1925050503d8060008114613ced576040519150601f19603f3d011682016040523d82523d6000602084013e613cf2565b606091505b5091509150613d02828286613d21565b92505050949350505050565b600080823b905060008111915050919050565b60608315613d3157829050613d81565b600083511115613d445782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d789190614afd565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b613da081613d8d565b8114613dab57600080fd5b50565b600081359050613dbd81613d97565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613dee82613dc3565b9050919050565b613dfe81613de3565b8114613e0957600080fd5b50565b600081359050613e1b81613df5565b92915050565b60008060408385031215613e3857613e37613d88565b5b6000613e4685828601613dae565b9250506020613e5785828601613e0c565b9150509250929050565b60008060408385031215613e7857613e77613d88565b5b6000613e8685828601613e0c565b9250506020613e9785828601613dae565b9150509250929050565b613eaa81613d8d565b82525050565b6000602082019050613ec56000830184613ea1565b92915050565b60008060008060808587031215613ee557613ee4613d88565b5b6000613ef387828801613e0c565b9450506020613f0487828801613e0c565b9350506040613f1587828801613e0c565b9250506060613f2687828801613dae565b91505092959194509250565b600080600060608486031215613f4b57613f4a613d88565b5b6000613f5986828701613dae565b9350506020613f6a86828701613e0c565b9250506040613f7b86828701613dae565b9150509250925092565b600060208284031215613f9b57613f9a613d88565b5b6000613fa984828501613dae565b91505092915050565b600a8110613fbf57600080fd5b50565b600081359050613fd181613fb2565b92915050565b60008060408385031215613fee57613fed613d88565b5b6000613ffc85828601613fc2565b925050602061400d85828601613e0c565b9150509250929050565b60008115159050919050565b61402c81614017565b82525050565b60006020820190506140476000830184614023565b92915050565b600082825260208201905092915050565b7f54726561737572793a204e6f7420616363657074656400000000000000000000600082015250565b600061409460168361404d565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f54726561737572793a204e6f7420617070726f76656400000000000000000000600082015250565b600061410060168361404d565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b61413f81613de3565b82525050565b600060408201905061415a6000830185614136565b6141676020830184613ea1565b9392505050565b60006040820190506141836000830185613ea1565b6141906020830184613ea1565b9392505050565b7f54726561737572793a20496e73756666696369656e7420726573657276657300600082015250565b60006141cd601f8361404d565b91506141d882614197565b602082019050919050565b600060208201905081810360008301526141fc816141c0565b9050919050565b60008151905061421281613d97565b92915050565b60006020828403121561422e5761422d613d88565b5b600061423c84828501614203565b91505092915050565b600060208201905061425a6000830184614136565b92915050565b7f457863656564732064656274206c696d69740000000000000000000000000000600082015250565b600061429660128361404d565b91506142a182614260565b602082019050919050565b600060208201905081810360008301526142c581614289565b9050919050565b6142d581614017565b81146142e057600080fd5b50565b6000815190506142f2816142cc565b92915050565b60006020828403121561430e5761430d613d88565b5b600061431c848285016142e3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061438e82613d8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143c1576143c0614354565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b6001851115614423578086048111156143ff576143fe614354565b5b600185161561440e5780820291505b808102905061441c856143cc565b94506143e3565b94509492505050565b60008261443c57600190506144f8565b8161444a57600090506144f8565b8160018114614460576002811461446a57614499565b60019150506144f8565b60ff84111561447c5761447b614354565b5b8360020a91508482111561449357614492614354565b5b506144f8565b5060208310610133831016604e8410600b84101617156144ce5782820a9050838111156144c9576144c8614354565b5b6144f8565b6144db84848460016143d9565b925090508184048111156144f2576144f1614354565b5b81810290505b9392505050565b600061450a82613d8d565b915061451583613d8d565b92506145427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461442c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060408201905061458e6000830185614136565b61459b6020830184614023565b9392505050565b60006145ad82613d8d565b91506145b883613d8d565b9250828210156145cb576145ca614354565b5b828203905092915050565b60006145e182613d8d565b91506145ec83613d8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561462157614620614354565b5b828201905092915050565b60006060820190506146416000830186614136565b61464e6020830185614136565b61465b6040830184613ea1565b949350505050565b600061466e82613d8d565b915061467983613d8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146b2576146b1614354565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006146f782613d8d565b915061470283613d8d565b925082614712576147116146bd565b5b828204905092915050565b7f4d75737420717565756500000000000000000000000000000000000000000000600082015250565b6000614753600a8361404d565b915061475e8261471d565b602082019050919050565b6000602082019050818103600083015261478281614746565b9050919050565b7f5175657565206e6f742065787069726564000000000000000000000000000000600082015250565b60006147bf60118361404d565b91506147ca82614789565b602082019050919050565b600060208201905081810360008301526147ee816147b2565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614851602a8361404d565b915061485c826147f5565b604082019050919050565b6000602082019050818103600083015261488081614844565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006148e360228361404d565b91506148ee82614887565b604082019050919050565b60006020820190508181036000830152614912816148d6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061497560268361404d565b915061498082614919565b604082019050919050565b600060208201905081810360008301526149a481614968565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006149e1601d8361404d565b91506149ec826149ab565b602082019050919050565b60006020820190508181036000830152614a10816149d4565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015614a4b578082015181840152602081019050614a30565b83811115614a5a576000848401525b50505050565b6000614a6b82614a17565b614a758185614a22565b9350614a85818560208601614a2d565b80840191505092915050565b6000614a9d8284614a60565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000614acf82614aa8565b614ad9818561404d565b9350614ae9818560208601614a2d565b614af281614ab3565b840191505092915050565b60006020820190508181036000830152614b178184614ac4565b90509291505056fea2646970667358221220806da59d6bd813ca4b638f5bcc883e60928792a06e8182a5aa6aadf803df1b7564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint",
          "_profit": "uint",
          "_token": "address"
        },
        "returns": {
          "send_": "uint"
        }
      },
      "excessReserves()": {
        "returns": {
          "_0": "uint"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "queue(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "repayDebtWithNecc(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "toggle(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "valueOfToken(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        },
        "returns": {
          "_value": "uint"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for Necc"
      },
      "excessReserves()": {
        "notice": "returns excess reserves not backing tokens"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mintRewards(address,uint256)": {
        "notice": "send epoch reward to staking contract"
      },
      "queue(uint8,address)": {
        "notice": "queue address to change boolean in mapping"
      },
      "repayDebtWithNecc(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with Necc"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "toggle(uint8,address)": {
        "notice": "verify queue then set boolean in mapping"
      },
      "valueOfToken(address,uint256)": {
        "notice": "returns Necc valuation of asset"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn Necc for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2332,
        "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)5141_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Storage)5141_storage": {
        "encoding": "inplace",
        "label": "struct LibTreasuryStorage.Storage",
        "members": [
          {
            "astId": 5025,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5027,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5029,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5031,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "blocksNeededForQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5034,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5036,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "sNeccQueue",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5038,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalReserves",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5040,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5044,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveToken",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5048,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokenQueue",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5051,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositors",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5055,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveDepositor",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5059,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositorQueue",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5062,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenders",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5066,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveSpender",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5070,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenderQueue",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5073,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityTokens",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5077,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityToken",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5081,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityTokenQueue",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5084,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityDepositors",
            "offset": 0,
            "slot": "19",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5088,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityDepositor",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5092,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityDepositorQueue",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5095,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveManagers",
            "offset": 0,
            "slot": "22",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5099,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveManager",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5103,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "ReserveManagerQueue",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5106,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityManagers",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5110,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityManager",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5114,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityManagerQueue",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5117,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtors",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5121,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isDebtor",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5125,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtorQueue",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5129,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtorBalance",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 5132,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagers",
            "offset": 0,
            "slot": "32",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5136,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isRewardManager",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5140,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagerQueue",
            "offset": 0,
            "slot": "34",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "1120"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}