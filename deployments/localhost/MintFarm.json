{
  "address": "0x25dc670f0Ca16354041da5e1daf6583EC8308428",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnstaked",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDistributor",
          "name": "_rewardDistributor",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "previousCumulatedRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFarmRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0c02992aec739599569c127a733e5d13867ae1d6e6a451298349903d50b3f2a",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x25dc670f0Ca16354041da5e1daf6583EC8308428",
    "transactionIndex": 0,
    "gasUsed": "2637605",
    "logsBloom": "0x
    "blockHash": "0x53e638cd4c9725dae43836c65c47b18b153f37cac39bad04ac728310f9cccc01",
    "transactionHash": "0xe0c02992aec739599569c127a733e5d13867ae1d6e6a451298349903d50b3f2a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9677472,
        "transactionHash": "0xe0c02992aec739599569c127a733e5d13867ae1d6e6a451298349903d50b3f2a",
        "address": "0x25dc670f0Ca16354041da5e1daf6583EC8308428",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000082fce134ae4b8b7acae666cb0d575bd8c508cb98"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x53e638cd4c9725dae43836c65c47b18b153f37cac39bad04ac728310f9cccc01"
      }
    ],
    "blockNumber": 9677472,
    "cumulativeGasUsed": "2637605",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2b2f658d4c7341ee341a361741fb91c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"_rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousCumulatedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Claim(address,uint256)\":{\"details\":\"Emitted when an account claims TRU rewards\",\"params\":{\"amountClaimed\":\"Amount of TRU claimed\",\"who\":\"Account claiming\"}},\"Stake(address,uint256)\":{\"details\":\"Emitted when an account stakes\",\"params\":{\"amountStaked\":\"Amount of tokens staked\",\"who\":\"Account staking\"}},\"Unstake(address,uint256)\":{\"details\":\"Emitted when an account unstakes\",\"params\":{\"amountUnstaked\":\"Amount of tokens unstaked\",\"who\":\"Account unstaking\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Farm/MintFarm.sol\":\"MintFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/core/Farm/MintFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function beneficiary() external view returns (address);\\n\\n    function distribute() external;\\n\\n    function nextDistribution() external view returns (uint256);\\n\\n    function empty() external;\\n}\\n\\ncontract MintFarm is Ownable {\\n    using SafeMath for uint256;\\n    uint256 constant PRECISION = 1e30;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardToken;\\n    IDistributor public rewardDistributor;\\n\\n    // track stakes\\n    uint256 public totalStaked;\\n    mapping(address => uint256) public staked;\\n\\n    // track overall cumulative rewards\\n    uint256 public cumulativeRewardPerToken;\\n    // track previous cumulate rewards for accounts\\n    mapping(address => uint256) public previousCumulatedRewardPerToken;\\n    // track claimable rewards for accounts\\n    mapping(address => uint256) public claimableReward;\\n\\n    // track total rewards\\n    uint256 public totalClaimedRewards;\\n    uint256 public totalFarmRewards;\\n\\n    // ======= STORAGE DECLARATION END ============\\n\\n    /**\\n     * @dev Emitted when an account stakes\\n     * @param who Account staking\\n     * @param amountStaked Amount of tokens staked\\n     */\\n    event Stake(address indexed who, uint256 amountStaked);\\n\\n    /**\\n     * @dev Emitted when an account unstakes\\n     * @param who Account unstaking\\n     * @param amountUnstaked Amount of tokens unstaked\\n     */\\n    event Unstake(address indexed who, uint256 amountUnstaked);\\n\\n    /**\\n     * @dev Emitted when an account claims TRU rewards\\n     * @param who Account claiming\\n     * @param amountClaimed Amount of TRU claimed\\n     */\\n    event Claim(address indexed who, uint256 amountClaimed);\\n\\n    function initialize(IDistributor _rewardDistributor, IERC20 _stakingToken)\\n        public\\n        onlyOwner\\n    {\\n        stakingToken = _stakingToken;\\n        rewardDistributor = _rewardDistributor;\\n        rewardToken = _rewardDistributor.rewardToken();\\n        require(\\n            rewardDistributor.beneficiary() == address(this),\\n            \\\"MintFarm: Distributor beneficiary is not set\\\"\\n        );\\n    }\\n\\n    function stake(uint256 amount) external update {\\n        if (claimableReward[msg.sender] > 0) {\\n            _claim();\\n        }\\n        staked[msg.sender] = staked[msg.sender].add(amount);\\n        totalStaked = totalStaked.add(amount);\\n        require(stakingToken.transferFrom(msg.sender, address(this), amount));\\n        emit Stake(msg.sender, amount);\\n    }\\n\\n    function _unstake(uint256 amount) internal {\\n        require(\\n            amount <= staked[msg.sender],\\n            \\\"MintFarm: Cannot withdraw amount bigger than available balance\\\"\\n        );\\n        staked[msg.sender] = staked[msg.sender].sub(amount);\\n        totalStaked = totalStaked.sub(amount);\\n        require(stakingToken.transfer(msg.sender, amount));\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    function _claim() internal {\\n        totalClaimedRewards = totalClaimedRewards.add(\\n            claimableReward[msg.sender]\\n        );\\n        uint256 rewardToClaim = claimableReward[msg.sender];\\n        claimableReward[msg.sender] = 0;\\n        require(rewardToken.transfer(msg.sender, rewardToClaim));\\n        emit Claim(msg.sender, rewardToClaim);\\n    }\\n\\n    function unstake(uint256 amount) external update {\\n        _unstake(amount);\\n    }\\n\\n    function claim() external update {\\n        _claim();\\n    }\\n\\n    function exit(uint256 amount) external update {\\n        _unstake(amount);\\n        _claim();\\n    }\\n\\n    function claimable(address account) external view returns (uint256) {\\n        if (staked[account] == 0) {\\n            return claimableReward[account];\\n        }\\n        // calculate total rewards (including pending)\\n        uint256 newTotalFarmRewards = rewardToken\\n            .balanceOf(address(this))\\n            .add(totalClaimedRewards)\\n            .mul(PRECISION);\\n        // calculate block reward\\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\\n        // calculate next cumulative reward per token\\n        uint256 nextcumulativeRewardPerToken = cumulativeRewardPerToken.add(\\n            totalBlockReward.div(totalStaked)\\n        );\\n        // return claimable reward for this account\\n        // prettier-ignore\\n        return claimableReward[account].add(\\n            staked[account].mul(nextcumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[account])).div(PRECISION));\\n    }\\n\\n    modifier update() {\\n        // pull TRU from distributor\\n        // only pull if there is distribution and distributor farm is set to this farm\\n        if (\\n            IERC20(rewardToken).balanceOf(address(rewardDistributor)) > 0 &&\\n            rewardDistributor.beneficiary() == address(this)\\n        ) {\\n            rewardDistributor.distribute();\\n        }\\n        // calculate total rewards\\n        uint256 newTotalFarmRewards = rewardToken\\n            .balanceOf(address(this))\\n            .add(totalClaimedRewards)\\n            .mul(PRECISION);\\n        // calculate block reward\\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\\n        // update farm rewards\\n        totalFarmRewards = newTotalFarmRewards;\\n        // if there are stakers\\n        if (totalStaked > 0) {\\n            cumulativeRewardPerToken = cumulativeRewardPerToken.add(\\n                totalBlockReward.div(totalStaked)\\n            );\\n        }\\n        // update claimable reward for sender\\n        claimableReward[msg.sender] = claimableReward[msg.sender].add(\\n            staked[msg.sender]\\n                .mul(\\n                    cumulativeRewardPerToken.sub(\\n                        previousCumulatedRewardPerToken[msg.sender]\\n                    )\\n                )\\n                .div(PRECISION)\\n        );\\n        // update previous cumulative for sender\\n        previousCumulatedRewardPerToken[msg.sender] = cumulativeRewardPerToken;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b4a50f86813a40bfec70e5857b51e748b5fdd61c3bd3e246cb269ea75f69452\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e5380620001146000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063e950342511610071578063e9503425146102d0578063ea0cddfe14610300578063f2fde38b1461031e578063f5fc50761461033a578063f7c618c11461035857610121565b80638da5cb5b1461022a57806398807d8414610248578063a694fc3a14610278578063acc2166a14610294578063d578ceab146102b257610121565b80634e71d92d116100f45780634e71d92d146101be578063715018a6146101c857806372f702f3146101d25780637f8661a1146101f0578063817b1cd21461020c57610121565b80632e17de7814610126578063402914f51461014257806344a0841114610172578063485cc955146101a2575b600080fd5b610140600480360381019061013b919061266e565b610376565b005b61015c600480360381019061015791906126f9565b610860565b6040516101699190612735565b60405180910390f35b61018c600480360381019061018791906126f9565b610b27565b6040516101999190612735565b60405180910390f35b6101bc60048036038101906101b791906127cc565b610b3f565b005b6101c6610dee565b005b6101d06112d6565b005b6101da61135e565b6040516101e7919061286b565b60405180910390f35b61020a6004803603810190610205919061266e565b611384565b005b610214611876565b6040516102219190612735565b60405180910390f35b61023261187c565b60405161023f9190612895565b60405180910390f35b610262600480360381019061025d91906126f9565b6118a5565b60405161026f9190612735565b60405180910390f35b610292600480360381019061028d919061266e565b6118bd565b005b61029c611f98565b6040516102a991906128d1565b60405180910390f35b6102ba611fbe565b6040516102c79190612735565b60405180910390f35b6102ea60048036038101906102e591906126f9565b611fc4565b6040516102f79190612735565b60405180910390f35b610308611fdc565b6040516103159190612735565b60405180910390f35b610338600480360381019061033391906126f9565b611fe2565b005b6103426120da565b60405161034f9190612735565b60405180910390f35b6103606120e0565b60405161036d919061286b565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016103f59190612895565b602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190612901565b1180156104fe57503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b1561058657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b505050505b60006106576c0c9f2c9cd04674edea40000000610649600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105fa9190612895565b602060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b90506000610670600a548361213290919063ffffffff16565b905081600a81905550600060045411156106b4576106ad61069c6004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6107c961077b6c0c9f2c9cd04674edea4000000061076d61071f600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085b8361215e565b505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156108f057600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b22565b60006109c16c0c9f2c9cd04674edea400000006109b3600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109649190612895565b602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b905060006109da600a548361213290919063ffffffff16565b90506000610a076109f66004548461214890919063ffffffff16565b60065461210690919063ffffffff16565b9050610b1c610ace6c0c9f2c9cd04674edea40000000610ac0610a72600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548661213290919063ffffffff16565b600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b93505050505b919050565b60076020528060005260406000206000915090505481565b610b4761238a565b73ffffffffffffffffffffffffffffffffffffffff16610b6561187c565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb2906129cd565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190612a02565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612943565b73ffffffffffffffffffffffffffffffffffffffff1614610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190612aa1565b60405180910390fd5b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610e6d9190612895565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612901565b118015610f7657503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b15610ffe57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fe557600080fd5b505af1158015610ff9573d6000803e3d6000fd5b505050505b60006110cf6c0c9f2c9cd04674edea400000006110c1600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110729190612895565b602060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b39190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b905060006110e8600a548361213290919063ffffffff16565b905081600a819055506000600454111561112c576111256111146004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6112416111f36c0c9f2c9cd04674edea400000006111e5611197600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d2612392565b5050565b6112de61238a565b73ffffffffffffffffffffffffffffffffffffffff166112fc61187c565b73ffffffffffffffffffffffffffffffffffffffff1614611352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611349906129cd565b60405180910390fd5b61135c600061256f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016114039190612895565b602060405180830381865afa158015611420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114449190612901565b11801561150c57503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b1561159457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050505b60006116656c0c9f2c9cd04674edea40000000611657600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116089190612895565b602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b9050600061167e600a548361213290919063ffffffff16565b905081600a81905550600060045411156116c2576116bb6116aa6004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6117d76117896c0c9f2c9cd04674edea4000000061177b61172d600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118698361215e565b611871612392565b505050565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60056020528060005260406000206000915090505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161193c9190612895565b602060405180830381865afa158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190612901565b118015611a4557503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b15611acd57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ab457600080fd5b505af1158015611ac8573d6000803e3d6000fd5b505050505b6000611b9e6c0c9f2c9cd04674edea40000000611b90600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b419190612895565b602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b90506000611bb7600a548361213290919063ffffffff16565b905081600a8190555060006004541115611bfb57611bf4611be36004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b611d10611cc26c0c9f2c9cd04674edea40000000611cb4611c66600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611dea57611de9612392565b5b611e3c83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e948360045461210690919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611ef993929190612ac1565b6020604051808303816000875af1158015611f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3c9190612b30565b611f4557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a84604051611f8b9190612735565b60405180910390a2505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60086020528060005260406000206000915090505481565b600a5481565b611fea61238a565b73ffffffffffffffffffffffffffffffffffffffff1661200861187c565b73ffffffffffffffffffffffffffffffffffffffff161461205e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612055906129cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c590612bcf565b60405180910390fd5b6120d78161256f565b50565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836121149190612c1e565b905092915050565b6000818361212a9190612c74565b905092915050565b600081836121409190612cce565b905092915050565b600081836121569190612d31565b905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156121e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d790612dd4565b60405180910390fd5b61223281600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061228a8160045461213290919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016122ed929190612df4565b6020604051808303816000875af115801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190612b30565b61233957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8260405161237f9190612735565b60405180910390a250565b600033905090565b6123e6600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460095461210690919063ffffffff16565b6009819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016124d2929190612df4565b6020604051808303816000875af11580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125159190612b30565b61251e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516125649190612735565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b61264b81612638565b811461265657600080fd5b50565b60008135905061266881612642565b92915050565b60006020828403121561268457612683612633565b5b600061269284828501612659565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126c68261269b565b9050919050565b6126d6816126bb565b81146126e157600080fd5b50565b6000813590506126f3816126cd565b92915050565b60006020828403121561270f5761270e612633565b5b600061271d848285016126e4565b91505092915050565b61272f81612638565b82525050565b600060208201905061274a6000830184612726565b92915050565b600061275b826126bb565b9050919050565b61276b81612750565b811461277657600080fd5b50565b60008135905061278881612762565b92915050565b6000612799826126bb565b9050919050565b6127a98161278e565b81146127b457600080fd5b50565b6000813590506127c6816127a0565b92915050565b600080604083850312156127e3576127e2612633565b5b60006127f185828601612779565b9250506020612802858286016127b7565b9150509250929050565b6000819050919050565b600061283161282c6128278461269b565b61280c565b61269b565b9050919050565b600061284382612816565b9050919050565b600061285582612838565b9050919050565b6128658161284a565b82525050565b6000602082019050612880600083018461285c565b92915050565b61288f816126bb565b82525050565b60006020820190506128aa6000830184612886565b92915050565b60006128bb82612838565b9050919050565b6128cb816128b0565b82525050565b60006020820190506128e660008301846128c2565b92915050565b6000815190506128fb81612642565b92915050565b60006020828403121561291757612916612633565b5b6000612925848285016128ec565b91505092915050565b60008151905061293d816126cd565b92915050565b60006020828403121561295957612958612633565b5b60006129678482850161292e565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129b7602083612970565b91506129c282612981565b602082019050919050565b600060208201905081810360008301526129e6816129aa565b9050919050565b6000815190506129fc816127a0565b92915050565b600060208284031215612a1857612a17612633565b5b6000612a26848285016129ed565b91505092915050565b7f4d696e744661726d3a204469737472696275746f722062656e6566696369617260008201527f79206973206e6f74207365740000000000000000000000000000000000000000602082015250565b6000612a8b602c83612970565b9150612a9682612a2f565b604082019050919050565b60006020820190508181036000830152612aba81612a7e565b9050919050565b6000606082019050612ad66000830186612886565b612ae36020830185612886565b612af06040830184612726565b949350505050565b60008115159050919050565b612b0d81612af8565b8114612b1857600080fd5b50565b600081519050612b2a81612b04565b92915050565b600060208284031215612b4657612b45612633565b5b6000612b5484828501612b1b565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612bb9602683612970565b9150612bc482612b5d565b604082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c2982612638565b9150612c3483612638565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c6957612c68612bef565b5b828201905092915050565b6000612c7f82612638565b9150612c8a83612638565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cc357612cc2612bef565b5b828202905092915050565b6000612cd982612638565b9150612ce483612638565b925082821015612cf757612cf6612bef565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d3c82612638565b9150612d4783612638565b925082612d5757612d56612d02565b5b828204905092915050565b7f4d696e744661726d3a2043616e6e6f7420776974686472617720616d6f756e7460008201527f20626967676572207468616e20617661696c61626c652062616c616e63650000602082015250565b6000612dbe603e83612970565b9150612dc982612d62565b604082019050919050565b60006020820190508181036000830152612ded81612db1565b9050919050565b6000604082019050612e096000830185612886565b612e166020830184612726565b939250505056fea2646970667358221220b15fb41fc6c31dbf48d9dca85b3e71a2a104265eb89fefdc174b9f82b58c2c1764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063e950342511610071578063e9503425146102d0578063ea0cddfe14610300578063f2fde38b1461031e578063f5fc50761461033a578063f7c618c11461035857610121565b80638da5cb5b1461022a57806398807d8414610248578063a694fc3a14610278578063acc2166a14610294578063d578ceab146102b257610121565b80634e71d92d116100f45780634e71d92d146101be578063715018a6146101c857806372f702f3146101d25780637f8661a1146101f0578063817b1cd21461020c57610121565b80632e17de7814610126578063402914f51461014257806344a0841114610172578063485cc955146101a2575b600080fd5b610140600480360381019061013b919061266e565b610376565b005b61015c600480360381019061015791906126f9565b610860565b6040516101699190612735565b60405180910390f35b61018c600480360381019061018791906126f9565b610b27565b6040516101999190612735565b60405180910390f35b6101bc60048036038101906101b791906127cc565b610b3f565b005b6101c6610dee565b005b6101d06112d6565b005b6101da61135e565b6040516101e7919061286b565b60405180910390f35b61020a6004803603810190610205919061266e565b611384565b005b610214611876565b6040516102219190612735565b60405180910390f35b61023261187c565b60405161023f9190612895565b60405180910390f35b610262600480360381019061025d91906126f9565b6118a5565b60405161026f9190612735565b60405180910390f35b610292600480360381019061028d919061266e565b6118bd565b005b61029c611f98565b6040516102a991906128d1565b60405180910390f35b6102ba611fbe565b6040516102c79190612735565b60405180910390f35b6102ea60048036038101906102e591906126f9565b611fc4565b6040516102f79190612735565b60405180910390f35b610308611fdc565b6040516103159190612735565b60405180910390f35b610338600480360381019061033391906126f9565b611fe2565b005b6103426120da565b60405161034f9190612735565b60405180910390f35b6103606120e0565b60405161036d919061286b565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016103f59190612895565b602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190612901565b1180156104fe57503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b1561058657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b505050505b60006106576c0c9f2c9cd04674edea40000000610649600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105fa9190612895565b602060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b90506000610670600a548361213290919063ffffffff16565b905081600a81905550600060045411156106b4576106ad61069c6004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6107c961077b6c0c9f2c9cd04674edea4000000061076d61071f600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085b8361215e565b505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156108f057600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b22565b60006109c16c0c9f2c9cd04674edea400000006109b3600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109649190612895565b602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b905060006109da600a548361213290919063ffffffff16565b90506000610a076109f66004548461214890919063ffffffff16565b60065461210690919063ffffffff16565b9050610b1c610ace6c0c9f2c9cd04674edea40000000610ac0610a72600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548661213290919063ffffffff16565b600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b93505050505b919050565b60076020528060005260406000206000915090505481565b610b4761238a565b73ffffffffffffffffffffffffffffffffffffffff16610b6561187c565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb2906129cd565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190612a02565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612943565b73ffffffffffffffffffffffffffffffffffffffff1614610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190612aa1565b60405180910390fd5b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610e6d9190612895565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612901565b118015610f7657503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b15610ffe57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fe557600080fd5b505af1158015610ff9573d6000803e3d6000fd5b505050505b60006110cf6c0c9f2c9cd04674edea400000006110c1600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110729190612895565b602060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b39190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b905060006110e8600a548361213290919063ffffffff16565b905081600a819055506000600454111561112c576111256111146004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6112416111f36c0c9f2c9cd04674edea400000006111e5611197600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112d2612392565b5050565b6112de61238a565b73ffffffffffffffffffffffffffffffffffffffff166112fc61187c565b73ffffffffffffffffffffffffffffffffffffffff1614611352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611349906129cd565b60405180910390fd5b61135c600061256f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016114039190612895565b602060405180830381865afa158015611420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114449190612901565b11801561150c57503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b1561159457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050505b60006116656c0c9f2c9cd04674edea40000000611657600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116089190612895565b602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b9050600061167e600a548361213290919063ffffffff16565b905081600a81905550600060045411156116c2576116bb6116aa6004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b6117d76117896c0c9f2c9cd04674edea4000000061177b61172d600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118698361215e565b611871612392565b505050565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60056020528060005260406000206000915090505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161193c9190612895565b602060405180830381865afa158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190612901565b118015611a4557503073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338af3eed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190612943565b73ffffffffffffffffffffffffffffffffffffffff16145b15611acd57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ab457600080fd5b505af1158015611ac8573d6000803e3d6000fd5b505050505b6000611b9e6c0c9f2c9cd04674edea40000000611b90600954600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b419190612895565b602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190612901565b61210690919063ffffffff16565b61211c90919063ffffffff16565b90506000611bb7600a548361213290919063ffffffff16565b905081600a8190555060006004541115611bfb57611bf4611be36004548361214890919063ffffffff16565b60065461210690919063ffffffff16565b6006819055505b611d10611cc26c0c9f2c9cd04674edea40000000611cb4611c66600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211c90919063ffffffff16565b61214890919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611dea57611de9612392565b5b611e3c83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210690919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e948360045461210690919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611ef993929190612ac1565b6020604051808303816000875af1158015611f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3c9190612b30565b611f4557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a84604051611f8b9190612735565b60405180910390a2505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60086020528060005260406000206000915090505481565b600a5481565b611fea61238a565b73ffffffffffffffffffffffffffffffffffffffff1661200861187c565b73ffffffffffffffffffffffffffffffffffffffff161461205e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612055906129cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c590612bcf565b60405180910390fd5b6120d78161256f565b50565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836121149190612c1e565b905092915050565b6000818361212a9190612c74565b905092915050565b600081836121409190612cce565b905092915050565b600081836121569190612d31565b905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156121e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d790612dd4565b60405180910390fd5b61223281600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061228a8160045461213290919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016122ed929190612df4565b6020604051808303816000875af115801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190612b30565b61233957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8260405161237f9190612735565b60405180910390a250565b600033905090565b6123e6600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460095461210690919063ffffffff16565b6009819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016124d2929190612df4565b6020604051808303816000875af11580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125159190612b30565b61251e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516125649190612735565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b61264b81612638565b811461265657600080fd5b50565b60008135905061266881612642565b92915050565b60006020828403121561268457612683612633565b5b600061269284828501612659565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126c68261269b565b9050919050565b6126d6816126bb565b81146126e157600080fd5b50565b6000813590506126f3816126cd565b92915050565b60006020828403121561270f5761270e612633565b5b600061271d848285016126e4565b91505092915050565b61272f81612638565b82525050565b600060208201905061274a6000830184612726565b92915050565b600061275b826126bb565b9050919050565b61276b81612750565b811461277657600080fd5b50565b60008135905061278881612762565b92915050565b6000612799826126bb565b9050919050565b6127a98161278e565b81146127b457600080fd5b50565b6000813590506127c6816127a0565b92915050565b600080604083850312156127e3576127e2612633565b5b60006127f185828601612779565b9250506020612802858286016127b7565b9150509250929050565b6000819050919050565b600061283161282c6128278461269b565b61280c565b61269b565b9050919050565b600061284382612816565b9050919050565b600061285582612838565b9050919050565b6128658161284a565b82525050565b6000602082019050612880600083018461285c565b92915050565b61288f816126bb565b82525050565b60006020820190506128aa6000830184612886565b92915050565b60006128bb82612838565b9050919050565b6128cb816128b0565b82525050565b60006020820190506128e660008301846128c2565b92915050565b6000815190506128fb81612642565b92915050565b60006020828403121561291757612916612633565b5b6000612925848285016128ec565b91505092915050565b60008151905061293d816126cd565b92915050565b60006020828403121561295957612958612633565b5b60006129678482850161292e565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129b7602083612970565b91506129c282612981565b602082019050919050565b600060208201905081810360008301526129e6816129aa565b9050919050565b6000815190506129fc816127a0565b92915050565b600060208284031215612a1857612a17612633565b5b6000612a26848285016129ed565b91505092915050565b7f4d696e744661726d3a204469737472696275746f722062656e6566696369617260008201527f79206973206e6f74207365740000000000000000000000000000000000000000602082015250565b6000612a8b602c83612970565b9150612a9682612a2f565b604082019050919050565b60006020820190508181036000830152612aba81612a7e565b9050919050565b6000606082019050612ad66000830186612886565b612ae36020830185612886565b612af06040830184612726565b949350505050565b60008115159050919050565b612b0d81612af8565b8114612b1857600080fd5b50565b600081519050612b2a81612b04565b92915050565b600060208284031215612b4657612b45612633565b5b6000612b5484828501612b1b565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612bb9602683612970565b9150612bc482612b5d565b604082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c2982612638565b9150612c3483612638565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c6957612c68612bef565b5b828201905092915050565b6000612c7f82612638565b9150612c8a83612638565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cc357612cc2612bef565b5b828202905092915050565b6000612cd982612638565b9150612ce483612638565b925082821015612cf757612cf6612bef565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d3c82612638565b9150612d4783612638565b925082612d5757612d56612d02565b5b828204905092915050565b7f4d696e744661726d3a2043616e6e6f7420776974686472617720616d6f756e7460008201527f20626967676572207468616e20617661696c61626c652062616c616e63650000602082015250565b6000612dbe603e83612970565b9150612dc982612d62565b604082019050919050565b60006020820190508181036000830152612ded81612db1565b9050919050565b6000604082019050612e096000830185612886565b612e166020830184612726565b939250505056fea2646970667358221220b15fb41fc6c31dbf48d9dca85b3e71a2a104265eb89fefdc174b9f82b58c2c1764736f6c634300080a0033",
  "devdoc": {
    "events": {
      "Claim(address,uint256)": {
        "details": "Emitted when an account claims TRU rewards",
        "params": {
          "amountClaimed": "Amount of TRU claimed",
          "who": "Account claiming"
        }
      },
      "Stake(address,uint256)": {
        "details": "Emitted when an account stakes",
        "params": {
          "amountStaked": "Amount of tokens staked",
          "who": "Account staking"
        }
      },
      "Unstake(address,uint256)": {
        "details": "Emitted when an account unstakes",
        "params": {
          "amountUnstaked": "Amount of tokens unstaked",
          "who": "Account unstaking"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3904,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)181"
      },
      {
        "astId": 3907,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)181"
      },
      {
        "astId": 3910,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "rewardDistributor",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IDistributor)3893"
      },
      {
        "astId": 3912,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3916,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "staked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3918,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "cumulativeRewardPerToken",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3922,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "previousCumulatedRewardPerToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3926,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "claimableReward",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3928,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "totalClaimedRewards",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3930,
        "contract": "contracts/core/Farm/MintFarm.sol:MintFarm",
        "label": "totalFarmRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDistributor)3893": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)181": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}