{
  "address": "0xDB0D8991482A0a58c0C8e2e6d25b6c9923688B07",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "LogRebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "LogStakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "LogSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        }
      ],
      "name": "balanceForGons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fromN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "gonsForBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nNecc",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_INDEX",
          "type": "uint256"
        }
      ],
      "name": "setIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "toN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69c58efad4faed213073590690e2f6f65799ad6ea15dda1121de0012ea53474f",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xDB0D8991482A0a58c0C8e2e6d25b6c9923688B07",
    "transactionIndex": 0,
    "gasUsed": "2661461",
    "logsBloom": "0x
    "blockHash": "0xb695c7fe6994bac5d5a07f4746c96074b55ee4c88b0b4c39cdd708ea395be9a6",
    "transactionHash": "0x69c58efad4faed213073590690e2f6f65799ad6ea15dda1121de0012ea53474f",
    "logs": [],
    "blockNumber": 54403839,
    "cumulativeGasUsed": "2661461",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b25fdb449e81246734de55deaa372783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"LogStakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nNecc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_INDEX\",\"type\":\"uint256\"}],\"name\":\"setIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"holder\":\"approver of allowance\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"token allowance\"}},\"approve(address,uint256)\":{\"details\":\"prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\",\"params\":{\"amount\":\"quantity of tokens approved for spending\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}},\"name()\":{\"returns\":{\"_0\":\"token name\"}},\"nonces(address)\":{\"details\":\"inhertidoc IERC2612\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated.\",\"params\":{\"amount\":\"quantity of tokens to approve\",\"owner\":\"holder of tokens and signer of permit\",\"r\":\"secp256k1 'r' value\",\"s\":\"secp256k1 's' value\",\"spender\":\"beneficiary of approval\",\"v\":\"secp256k1 'v' value\"}},\"rebase(uint256,uint256)\":{\"params\":{\"profit_\":\"uint256\"},\"returns\":{\"_0\":\"uint256\"}},\"symbol()\":{\"returns\":{\"_0\":\"token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"token supply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"query the allowance granted from given holder to given spender\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to spender to spend tokens\"},\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"},\"name()\":{\"notice\":\"return token name\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"approve spender to transfer tokens held by owner via signature\"},\"rebase(uint256,uint256)\":{\"notice\":\"increases sNecc supply to increase staking balances relative to profit_\"},\"symbol()\":{\"notice\":\"return token symbol\"},\"totalSupply()\":{\"notice\":\"query the total minted token supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/sNecc/sNeccFacet.sol\":\"sNeccFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Elliptic Curve Digital Signature Algorithm (ECDSA) operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary ECDSA {\\n    /**\\n     * @notice recover signer of hashed message from signature\\n     * @param hash hashed data payload\\n     * @param signature signed data payload\\n     * @return recovered message signer\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(signature.length == 65, 'ECDSA: invalid signature length');\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice recover signer of hashed message from signature v, r, and s values\\n     * @param hash hashed data payload\\n     * @param v signature \\\"v\\\" value\\n     * @param r signature \\\"r\\\" value\\n     * @param s signature \\\"s\\\" value\\n     * @return recovered message signer\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), 'ECDSA: invalid signature');\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice generate an \\\"Ethereum Signed Message\\\" in the format returned by the eth_sign JSON-RPC method\\n     * @param hash hashed data payload\\n     * @return signed message hash\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x56a804af4ee7653c1b4d67f8d68156377f4e87d2058badcd0730ab760bb91e76\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20Base } from './base/ERC20Base.sol';\\nimport { ERC20Extended } from './extended/ERC20Extended.sol';\\nimport { ERC20Metadata } from './metadata/ERC20Metadata.sol';\\n\\n/**\\n * @title SolidState ERC20 implementation, including recommended extensions\\n */\\nabstract contract ERC20 is ERC20Base, ERC20Extended, ERC20Metadata {\\n\\n}\\n\",\"keccak256\":\"0xfc09ac97ea954c88edb5037bf46f6d6726786731e34ffecbdd6a5e5388016437\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(address holder, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdee3bc4616540528afc0ccefed67b15dbdf98962bd3260cff0029193f81de23a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/IERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x1d5cf12e795a2f7a9ab6f7672ddcb1d2526673341059c638f3d186577402cb2b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '../IERC20.sol';\\nimport { ERC20BaseInternal } from './ERC20BaseInternal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20Base is IERC20, ERC20BaseInternal {\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function allowance(address holder, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC20BaseStorage.layout().allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = ERC20BaseStorage.layout().allowances[holder][\\n            msg.sender\\n        ];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(holder, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(holder, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x49f7af2905ccb45a291f7a24fae62efb8bcc477e7da540798c63bd2d00ed8d8b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from '../IERC20Internal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20BaseInternal is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function _totalSupply() internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().totalSupply;\\n    }\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ERC20BaseStorage.layout().balances[account];\\n    }\\n\\n    /**\\n     * @notice enable spender to spend tokens on behalf of holder\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\\n\\n        emit Approval(holder, spender, amount);\\n    }\\n\\n    /**\\n     * @notice mint tokens for given account\\n     * @param account recipient of minted tokens\\n     * @param amount quantity of tokens minted\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        l.totalSupply += amount;\\n        l.balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice burn tokens held by given account\\n     * @param account holder of burned tokens\\n     * @param amount quantity of tokens burned\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 balance = l.balances[account];\\n        require(balance >= amount, 'ERC20: burn amount exceeds balance');\\n        unchecked {\\n            l.balances[account] = balance - amount;\\n        }\\n        l.totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens from holder to recipient\\n     * @param holder owner of tokens to be transferred\\n     * @param recipient beneficiary of transfer\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _transfer(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(holder, recipient, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 holderBalance = l.balances[holder];\\n        require(\\n            holderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            l.balances[holder] = holderBalance - amount;\\n        }\\n        l.balances[recipient] += amount;\\n\\n        emit Transfer(holder, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice ERC20 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xefcc47e90f48d05a722de066a3dd2a99e84804762a7a624acaf228c2b2c498ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20BaseStorage {\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9714dbad5c2815b8c2da10b97d6145d5c1da48c534fdea83a50132810d0253e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/ERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20Base, ERC20BaseStorage } from '../base/ERC20Base.sol';\\n\\n/**\\n * @title ERC20 safe approval extensions\\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n */\\nabstract contract ERC20Extended is ERC20Base {\\n    /**\\n     * @notice increase spend amount granted to spender\\n     * @param spender address whose allowance to increase\\n     * @param amount quantity by which to increase allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function increaseAllowance(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        unchecked {\\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\\n                .layout()\\n                .allowances[msg.sender];\\n\\n            uint256 allowance = allowances[spender];\\n            require(\\n                allowance + amount >= allowance,\\n                'ERC20Extended: excessive allowance'\\n            );\\n\\n            _approve(\\n                msg.sender,\\n                spender,\\n                allowances[spender] = allowance + amount\\n            );\\n\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice decrease spend amount granted to spender\\n     * @param spender address whose allowance to decrease\\n     * @param amount quantity by which to decrease allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        unchecked {\\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\\n                .layout()\\n                .allowances[msg.sender];\\n\\n            uint256 allowance = allowances[spender];\\n            require(\\n                amount <= allowance,\\n                'ERC20Extended: insufficient allowance'\\n            );\\n\\n            _approve(\\n                msg.sender,\\n                spender,\\n                allowances[spender] = allowance - amount\\n            );\\n\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb5dd2a1f2e2a65abecd429766ebe92ef6072f3a8efecbc367e1f1e0c34d7fc8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC20MetadataStorage } from './ERC20MetadataStorage.sol';\\nimport { IERC20Metadata } from './IERC20Metadata.sol';\\n\\n/**\\n * @title ERC20 metadata extensions\\n */\\nabstract contract ERC20Metadata is IERC20Metadata {\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC20MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC20MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return ERC20MetadataStorage.layout().decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xf663e8fe2c69023abb9efd080e1b481e030eed442d953e5163f459ac460d748b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Metadata');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setName(Layout storage l, string memory name) internal {\\n        l.name = name;\\n    }\\n\\n    function setSymbol(Layout storage l, string memory symbol) internal {\\n        l.symbol = symbol;\\n    }\\n\\n    function setDecimals(Layout storage l, uint8 decimals) internal {\\n        l.decimals = decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7695b0b05a2bc2ccd7341f32f852477527f685daaf9c0057f8ff9fc8f238a734\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9065db15c6fc9249fbb8f8c2149b6894fbf25e18d7333b310193e2201be747b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ECDSA } from '../../../cryptography/ECDSA.sol';\\nimport { ERC20Base } from '../base/ERC20Base.sol';\\nimport { ERC20Metadata } from '../metadata/ERC20Metadata.sol';\\nimport { ERC20PermitStorage } from './ERC20PermitStorage.sol';\\nimport { IERC2612 } from './IERC2612.sol';\\n\\n/**\\n * @title ERC20 extension with support for ERC2612 permits\\n * @dev derived from https://github.com/soliditylabs/ERC20-Permit (MIT license)\\n */\\nabstract contract ERC20Permit is IERC2612, ERC20Base, ERC20Metadata {\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @inheritdoc IERC2612\\n     * @dev If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\\n     * EIP712 Domain Separator is automatically recalculated.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, 'ERC20Permit: expired deadline');\\n\\n        // Assembly for more efficiently computing:\\n        // bytes32 hashStruct = keccak256(\\n        //   abi.encode(\\n        //     _PERMIT_TYPEHASH,\\n        //     owner,\\n        //     spender,\\n        //     amount,\\n        //     _nonces[owner].current(),\\n        //     deadline\\n        //   )\\n        // );\\n\\n        bytes32 hashStruct;\\n        uint256 nonce = ERC20PermitStorage.layout().nonces[owner];\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n            mstore(\\n                memPtr,\\n                0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n            )\\n            mstore(add(memPtr, 32), owner)\\n            mstore(add(memPtr, 64), spender)\\n            mstore(add(memPtr, 96), amount)\\n            mstore(add(memPtr, 128), nonce)\\n            mstore(add(memPtr, 160), deadline)\\n\\n            hashStruct := keccak256(memPtr, 192)\\n        }\\n\\n        bytes32 eip712DomainHash = _domainSeparator();\\n\\n        // Assembly for more efficient computing:\\n        // bytes32 hash = keccak256(\\n        //   abi.encodePacked(uint16(0x1901), eip712DomainHash, hashStruct)\\n        // );\\n\\n        bytes32 hash;\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(\\n                memPtr,\\n                0x1901000000000000000000000000000000000000000000000000000000000000\\n            ) // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash) // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\\n\\n            hash := keccak256(memPtr, 66)\\n        }\\n\\n        address signer = hash.recover(v, r, s);\\n\\n        require(signer == owner, 'ERC20Permit: invalid signature');\\n\\n        ERC20PermitStorage.layout().nonces[owner]++;\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev inhertidoc IERC2612\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces[owner];\\n    }\\n\\n    /**\\n     * @notice update domain separator for new chain ID\\n     * @return new domain separator\\n     */\\n    function _updateDomainSeparator() private returns (bytes32) {\\n        uint256 chainId = _chainId();\\n\\n        // no need for assembly, running very rarely\\n        bytes32 newDomainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n                ),\\n                keccak256(bytes(name())), // ERC-20 Name\\n                keccak256(bytes('1')), // Version\\n                chainId,\\n                address(this)\\n            )\\n        );\\n\\n        ERC20PermitStorage.layout().domainSeparators[\\n            chainId\\n        ] = newDomainSeparator;\\n\\n        return newDomainSeparator;\\n    }\\n\\n    /**\\n     * @notice update chain ID if changed and return domain separator\\n     * @return domain separator\\n     */\\n    function _domainSeparator() private returns (bytes32) {\\n        bytes32 domainSeparator = ERC20PermitStorage.layout().domainSeparators[\\n            _chainId()\\n        ];\\n\\n        if (domainSeparator != 0x00) {\\n            return domainSeparator;\\n        }\\n\\n        return _updateDomainSeparator();\\n    }\\n\\n    /**\\n     * @notice get the current chain ID\\n     * @return chainId chain ID\\n     */\\n    function _chainId() private view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35f9325ea7514ba330571a94ec8694ad30842eb48b0f5e5da15d8a3afa759d24\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20PermitStorage {\\n    struct Layout {\\n        mapping(address => uint256) nonces;\\n        // Mapping of ChainID to domain separators. This is a very gas efficient way\\n        // to not recalculate the domain separator on every call, while still\\n        // automatically detecting ChainID changes.\\n        mapping(uint256 => bytes32) domainSeparators;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Permit');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce331ee66ec27140c325285345ba9a4af8ea676891889e8d74fad0c0a20c52bd\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC2612 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @notice approve spender to transfer tokens held by owner via signature\\n     * @dev this function may be vulnerable to approval replay attacks\\n     * @param owner holder of tokens and signer of permit\\n     * @param spender beneficiary of approval\\n     * @param amount quantity of tokens to approve\\n     * @param v secp256k1 'v' value\\n     * @param r secp256k1 'r' value\\n     * @param s secp256k1 's' value\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice get the current ERC2612 nonce for the given address\\n     * @return current nonce\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x70f20ef3c4d2babd515063813e8f7dc8bb3e106b9cd84029763813df180ba706\",\"license\":\"MIT\"},\"contracts/facets/sNecc/sNeccFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ERC20, ERC20Extended} from \\\"@solidstate/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Permit} from \\\"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\\\";\\nimport {ERC20BaseStorage} from \\\"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\\\";\\nimport \\\"../../lib/LibsNeccStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\ninterface InNecc is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\\ncontract sNeccFacet is ERC20, ERC20Permit {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using LibsNeccStorage for LibsNeccStorage.Layout;\\n    using SafeMath for uint256;\\n\\n    event LogSupply(\\n        uint256 indexed epoch,\\n        uint256 timestamp,\\n        uint256 totalSupply\\n    );\\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\\n    event LogStakingContractUpdated(address stakingContract);\\n\\n    function initialize(address _stakingContract, address _nNecc) external {\\n        LibsNeccStorage._onlyGov();\\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n\\n        s.setName(\\\"Staked Necc\\\");\\n        s.setSymbol(\\\"sNECC\\\");\\n        s.setDecimals(9);\\n        b.totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        n._gonsPerFragment = TOTAL_GONS.div(b.totalSupply);\\n        n.stakingContract = _stakingContract;\\n        n.nNecc = _nNecc;\\n        n._gonBalances[n.stakingContract] = TOTAL_GONS;\\n\\n        emit Transfer(address(0x0), _stakingContract, b.totalSupply);\\n        emit LogStakingContractUpdated(_stakingContract);\\n    }\\n\\n    function setGov(address _newOwner) public {\\n        LibsNeccStorage._setGov(_newOwner);\\n    }\\n\\n    function gov() public view returns (address) {\\n        return LibsNeccStorage._gov();\\n    }\\n\\n    function stakingContract() public view returns (address) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n\\n        return n.stakingContract;\\n    }\\n\\n    /**\\n        @notice increases sNecc supply to increase staking balances relative to profit_\\n        @param profit_ uint256\\n        @return uint256\\n     */\\n    function rebase(uint256 profit_, uint256 epoch_) public returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\\n        n._onlyStakingContract();\\n\\n        uint256 rebaseAmount;\\n        uint256 circulatingSupply_ = circulatingSupply();\\n\\n        if (profit_ == 0) {\\n            emit LogSupply(epoch_, block.timestamp, b.totalSupply);\\n            emit LogRebase(epoch_, 0, index());\\n            return b.totalSupply;\\n        } else if (circulatingSupply_ > 0) {\\n            rebaseAmount = profit_.mul(b.totalSupply).div(circulatingSupply_);\\n        } else {\\n            rebaseAmount = profit_;\\n        }\\n\\n        b.totalSupply = b.totalSupply.add(rebaseAmount);\\n\\n        if (b.totalSupply > MAX_SUPPLY) {\\n            b.totalSupply = MAX_SUPPLY;\\n        }\\n        n._gonsPerFragment = TOTAL_GONS.div(b.totalSupply);\\n\\n        _storeRebase(circulatingSupply_, profit_, epoch_);\\n\\n        return b.totalSupply;\\n    }\\n\\n    /**\\n        @notice emits event with data about rebase\\n        @param previousCirculating_ uint\\n        @param profit_ uint\\n        @param epoch_ uint\\n        @return bool\\n     */\\n    function _storeRebase(\\n        uint256 previousCirculating_,\\n        uint256 profit_,\\n        uint256 epoch_\\n    ) internal returns (bool) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\\n\\n        n.rebases.push(\\n            LibsNeccStorage.Rebase({\\n                epoch: epoch_,\\n                rebase: rebasePercent, // 18 decimals\\n                totalStakedBefore: previousCirculating_,\\n                totalStakedAfter: circulatingSupply(),\\n                amountRebased: profit_,\\n                index: index(),\\n                blockNumberOccured: block.number\\n            })\\n        );\\n\\n        emit LogSupply(epoch_, block.timestamp, b.totalSupply);\\n        emit LogRebase(epoch_, rebasePercent, index());\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            allowance(msg.sender, spender).add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowance(msg.sender, spender);\\n        if (subtractedValue >= oldValue) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            _approve(msg.sender, spender, oldValue.sub(subtractedValue));\\n        }\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        uint256 gonValue = value.mul(n._gonsPerFragment);\\n\\n        n._gonBalances[msg.sender] = n._gonBalances[msg.sender].sub(gonValue);\\n        n._gonBalances[to] = n._gonBalances[to].add(gonValue);\\n\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        decreaseAllowance(to, value);\\n        emit Approval(from, msg.sender, allowance(msg.sender, to));\\n\\n        uint256 gonValue = gonsForBalance(value);\\n        n._gonBalances[from] = n._gonBalances[from].sub(gonValue);\\n        n._gonBalances[to] = n._gonBalances[to].add(gonValue);\\n\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function balanceOf(address who) public view override returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return n._gonBalances[who].div(n._gonsPerFragment);\\n    }\\n\\n    function gonsForBalance(uint256 amount) public view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return amount.mul(n._gonsPerFragment);\\n    }\\n\\n    function balanceForGons(uint256 gons) public view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return gons.div(n._gonsPerFragment);\\n    }\\n\\n    function toN(uint256 amount) external view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return InNecc(n.nNecc).balanceTo(amount);\\n    }\\n\\n    function fromN(uint256 amount) external view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return InNecc(n.nNecc).balanceFrom(amount);\\n    }\\n\\n    // Staking contract holds excess sNecc\\n    function circulatingSupply() public view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\\n\\n        return\\n            b.totalSupply.sub(balanceOf(n.stakingContract)).add(\\n                InNecc(n.nNecc).balanceFrom(\\n                    IERC20(address(InNecc(n.nNecc))).totalSupply()\\n                )\\n            );\\n    }\\n\\n    function index() public view returns (uint256) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        return balanceForGons(n.INDEX);\\n    }\\n\\n    function setIndex(uint256 _INDEX) external returns (bool) {\\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\\n        require(n.INDEX == 0, \\\"Index already set\\\");\\n        n.INDEX = gonsForBalance(_INDEX);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x461ca805629489e7188abbf26efe4830323978f2aa615e6e5ceb1848f98323ac\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibsNeccStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./LibDiamond.sol\\\";\\n\\ninterface IOracle {\\n    function getPrice(address _pool) external returns (uint256);\\n}\\n\\nuint256 constant MAX_UINT256 = ~uint256(0);\\nuint256 constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\\n// TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n// Use the highest value that fits in a uint256 for max granularity.\\nuint256 constant TOTAL_GONS = MAX_UINT256 -\\n    (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n// MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\\nuint256 constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n\\nlibrary LibsNeccStorage {\\n    using SafeMath for uint256;\\n\\n    struct Rebase {\\n        uint256 epoch;\\n        uint256 rebase; // 18 decimals\\n        uint256 totalStakedBefore;\\n        uint256 totalStakedAfter;\\n        uint256 amountRebased;\\n        uint256 index;\\n        uint256 blockNumberOccured;\\n    }\\n\\n    struct Layout {\\n        uint256 INDEX; // Index Gons - tracks rebase growth\\n        address stakingContract; // balance used to calc rebase\\n        address nNecc; // balance used to calc rebase\\n        IOracle oracle; // pulls price from pool\\n        address pool;\\n        Rebase[] rebases; // past rebase data\\n        uint256 _gonsPerFragment;\\n        mapping(address => uint256) _gonBalances;\\n        mapping(address => mapping(address => uint256)) _allowedValue;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"necc.dao.sNecc.storage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function _onlyStakingContract(Layout storage n) internal view {\\n        require(msg.sender == n.stakingContract, \\\"NDOL: only stakingContract\\\");\\n    }\\n\\n    function _onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _gov() internal view returns (address) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.contractOwner;\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n}\\n\",\"keccak256\":\"0x9f0fa76c133590b3d20c5cae31f804cdd8ce26a6d0e23431f3b3851ffa55031c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f54806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80634a6b9245116100de57806395d89b4111610097578063cfad57a211610071578063cfad57a2146104d6578063d505accf146104f2578063dd62ed3e1461050e578063ee99205c1461053e57610173565b806395d89b4114610458578063a457c2d714610476578063a9059cbb146104a657610173565b80634a6b92451461034a5780636525d0651461037a57806370a08231146103aa5780637965d56d146103da5780637ecebe001461040a5780639358928b1461043a57610173565b806323b872dd1161013057806323b872dd146102625780632986c0e514610292578063313ce567146102b057806339509351146102ce57806340a5737f146102fe578063485cc9551461032e57610173565b8063058ecdb41461017857806306fdde03146101a8578063095ea7b3146101c657806312d43a51146101f657806318160ddd146102145780631bd3967414610232575b600080fd5b610192600480360381019061018d919061220f565b61055c565b60405161019f919061225e565b60405180910390f35b6101b061071c565b6040516101bd9190612312565b60405180910390f35b6101e060048036038101906101db9190612392565b6107b7565b6040516101ed91906123ed565b60405180910390f35b6101fe6107ce565b60405161020b9190612417565b60405180910390f35b61021c6107dd565b604051610229919061225e565b60405180910390f35b61024c60048036038101906102479190612432565b6107ec565b604051610259919061225e565b60405180910390f35b61027c6004803603810190610277919061245f565b610818565b60405161028991906123ed565b60405180910390f35b61029a610a4f565b6040516102a7919061225e565b60405180910390f35b6102b8610a6f565b6040516102c591906124ce565b60405180910390f35b6102e860048036038101906102e39190612392565b610a8f565b6040516102f591906123ed565b60405180910390f35b61031860048036038101906103139190612432565b610ac1565b60405161032591906123ed565b60405180910390f35b610348600480360381019061034391906124e9565b610b30565b005b610364600480360381019061035f9190612432565b610e09565b604051610371919061225e565b60405180910390f35b610394600480360381019061038f9190612432565b610ebc565b6040516103a1919061225e565b60405180910390f35b6103c460048036038101906103bf9190612529565b610f6f565b6040516103d1919061225e565b60405180910390f35b6103f460048036038101906103ef9190612432565b610fdc565b604051610401919061225e565b60405180910390f35b610424600480360381019061041f9190612529565b611008565b604051610431919061225e565b60405180910390f35b61044261105a565b60405161044f919061225e565b60405180910390f35b6104606111fe565b60405161046d9190612312565b60405180910390f35b610490600480360381019061048b9190612392565b611299565b60405161049d91906123ed565b60405180910390f35b6104c060048036038101906104bb9190612392565b6112e9565b6040516104cd91906123ed565b60405180910390f35b6104f060048036038101906104eb9190612529565b6114b4565b005b61050c600480360381019061050791906125b8565b6114c0565b005b610528600480360381019061052391906124e9565b6116e3565b604051610535919061225e565b60405180910390f35b610546611773565b6040516105539190612417565b60405180910390f35b6000806105676117ab565b905060006105736117d8565b905061057e82611805565b60008061058961105a565b9050600087141561062457857f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da44285600201546040516105ca92919061265a565b60405180910390a2857f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006105fe610a4f565b60405161060c9291906126c8565b60405180910390a28260020154945050505050610716565b600081111561065d576106568161064885600201548a61189a90919063ffffffff16565b6118b090919063ffffffff16565b9150610661565b8691505b6106788284600201546118c690919063ffffffff16565b83600201819055506000196fffffffffffffffffffffffffffffffff16836002015411156106be576000196fffffffffffffffffffffffffffffffff1683600201819055505b6106f683600201546611c37937e080006000196106db9190612720565b6000196106e89190612780565b6118b090919063ffffffff16565b84600601819055506107098188886118dc565b5082600201549450505050505b92915050565b6060610726611a69565b6000018054610734906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610760906127e3565b80156107ad5780601f10610782576101008083540402835291602001916107ad565b820191906000526020600020905b81548152906001019060200180831161079057829003601f168201915b5050505050905090565b60006107c4338484611a96565b6001905092915050565b60006107d8611c6a565b905090565b60006107e7611ca2565b905090565b6000806107f76117ab565b905061081081600601548461189a90919063ffffffff16565b915050919050565b6000806108236117ab565b905061082f8484611299565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561088933886116e3565b604051610896919061225e565b60405180910390a360006108a9846107ec565b90506108ff818360070160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b8260070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610998818360070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c690919063ffffffff16565b8260070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610a3a919061225e565b60405180910390a36001925050509392505050565b600080610a5a6117ab565b9050610a698160000154610fdc565b91505090565b6000610a79611a69565b60020160009054906101000a900460ff16905090565b6000610ab73384610ab285610aa433896116e3565b6118c690919063ffffffff16565b611a96565b6001905092915050565b600080610acc6117ab565b90506000816000015414610b15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0c90612861565b60405180910390fd5b610b1e836107ec565b81600001819055506001915050919050565b610b38611ccb565b6000610b426117d8565b90506000610b4e611a69565b90506000610b5a6117ab565b9050610ba46040518060400160405280600b81526020017f5374616b6564204e65636300000000000000000000000000000000000000000081525083611cd590919063ffffffff16565b610bec6040518060400160405280600581526020017f734e45434300000000000000000000000000000000000000000000000000000081525083611cf290919063ffffffff16565b610c00600983611d0f90919063ffffffff16565b6611c37937e080008360020181905550610c4883600201546611c37937e08000600019610c2d9190612720565b600019610c3a9190612780565b6118b090919063ffffffff16565b8160060181905550848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506611c37937e08000600019610ceb9190612720565b600019610cf89190612780565b8160070160008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560020154604051610dc3919061225e565b60405180910390a37f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a185604051610dfa9190612417565b60405180910390a15050505050565b600080610e146117ab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8248768846040518263ffffffff1660e01b8152600401610e73919061225e565b602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612896565b915050919050565b600080610ec76117ab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a5236c846040518263ffffffff1660e01b8152600401610f26919061225e565b602060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612896565b915050919050565b600080610f7a6117ab565b9050610fd481600601548260070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b915050919050565b600080610fe76117ab565b90506110008160060154846118b090919063ffffffff16565b915050919050565b6000611012611d30565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806110656117ab565b905060006110716117d8565b90506111f78260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a82487688460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190612896565b6040518263ffffffff1660e01b8152600401611165919061225e565b602060405180830381865afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190612896565b6111e96111d68560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f6f565b8460020154611cb590919063ffffffff16565b6118c690919063ffffffff16565b9250505090565b6060611208611a69565b6001018054611216906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611242906127e3565b801561128f5780601f106112645761010080835404028352916020019161128f565b820191906000526020600020905b81548152906001019060200180831161127257829003601f168201915b5050505050905090565b6000806112a633856116e3565b90508083106112c0576112bb33856000611a96565b6112de565b6112dd33856112d88685611cb590919063ffffffff16565b611a96565b5b600191505092915050565b6000806112f46117ab565b9050600061130f82600601548561189a90919063ffffffff16565b9050611365818360070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b8260070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113fe818360070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c690919063ffffffff16565b8260070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516114a0919061225e565b60405180910390a360019250505092915050565b6114bd81611d5d565b50565b83421115611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa9061290f565b60405180910390fd5b60008061150e611d30565b60000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528960208201528860408201528760608201528160808201528660a082015260c0812092505060006115a6611db8565b905060006040517f190100000000000000000000000000000000000000000000000000000000000081528260028201528460228201526042812091505060006115fc88888885611e03909392919063ffffffff16565b90508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461166c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116639061297b565b60405180910390fd5b611674611d30565b60000160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906116c59061299b565b91905055506116d58c8c8c611a96565b505050505050505050505050565b60006116ed6117d8565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061177e6117ab565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f85cc79b6be0f7f23d750ce271d29ecc56c7c1a80fc209736f2b226ac13ce4e5a90508091505090565b6000807fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490508091505090565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e90612a30565b60405180910390fd5b50565b600081836118a89190612a50565b905092915050565b600081836118be9190612aaa565b905092915050565b600081836118d49190612adb565b905092915050565b6000806118e76117ab565b905060006118f36117d8565b9050600061192487611916670de0b6b3a76400008961189a90919063ffffffff16565b6118b090919063ffffffff16565b9050826005016040518060e0016040528087815260200183815260200189815260200161194f61105a565b8152602001888152602001611962610a4f565b8152602001438152509080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601555050847f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4428460020154604051611a1292919061265a565b60405180910390a2847f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb282611a45610a4f565b604051611a5392919061265a565b60405180910390a2600193505050509392505050565b6000807f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90612ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6d90612c35565b60405180910390fd5b80611b7f6117d8565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c5d919061225e565b60405180910390a3505050565b600080611c75611f8e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000611cac6117d8565b60020154905090565b60008183611cc39190612780565b905092915050565b611cd3611fbb565b565b80826000019080519060200190611ced929190612131565b505050565b80826001019080519060200190611d0a929190612131565b505050565b808260020160006101000a81548160ff021916908360ff1602179055505050565b6000807fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb990508091505090565b611d65611fbb565b6000611d6f611f8e565b9050818160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080611dc3611d30565b6001016000611dd0612056565b81526020019081526020016000205490506000801b8114611df45780915050611e00565b611dfc61205e565b9150505b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290612cc7565b60405180910390fd5b601b8460ff161480611e805750601c8460ff16145b611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690612d59565b60405180910390fd5b600060018686868660405160008152602001604052604051611ee49493929190612d88565b6020604051602081039080840390855afa158015611f06573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7990612e19565b60405180910390fd5b80915050949350505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b611fc3611f8e565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204b90612eab565b60405180910390fd5b565b600046905090565b600080612069612056565b905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61209661071c565b805190602001206040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508051906020012084306040516020016120f0959493929190612ecb565b60405160208183030381529060405280519060200120905080612111611d30565b600101600084815260200190815260200160002081905550809250505090565b82805461213d906127e3565b90600052602060002090601f01602090048101928261215f57600085556121a6565b82601f1061217857805160ff19168380011785556121a6565b828001600101855582156121a6579182015b828111156121a557825182559160200191906001019061218a565b5b5090506121b391906121b7565b5090565b5b808211156121d05760008160009055506001016121b8565b5090565b600080fd5b6000819050919050565b6121ec816121d9565b81146121f757600080fd5b50565b600081359050612209816121e3565b92915050565b60008060408385031215612226576122256121d4565b5b6000612234858286016121fa565b9250506020612245858286016121fa565b9150509250929050565b612258816121d9565b82525050565b6000602082019050612273600083018461224f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122b3578082015181840152602081019050612298565b838111156122c2576000848401525b50505050565b6000601f19601f8301169050919050565b60006122e482612279565b6122ee8185612284565b93506122fe818560208601612295565b612307816122c8565b840191505092915050565b6000602082019050818103600083015261232c81846122d9565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061235f82612334565b9050919050565b61236f81612354565b811461237a57600080fd5b50565b60008135905061238c81612366565b92915050565b600080604083850312156123a9576123a86121d4565b5b60006123b78582860161237d565b92505060206123c8858286016121fa565b9150509250929050565b60008115159050919050565b6123e7816123d2565b82525050565b600060208201905061240260008301846123de565b92915050565b61241181612354565b82525050565b600060208201905061242c6000830184612408565b92915050565b600060208284031215612448576124476121d4565b5b6000612456848285016121fa565b91505092915050565b600080600060608486031215612478576124776121d4565b5b60006124868682870161237d565b93505060206124978682870161237d565b92505060406124a8868287016121fa565b9150509250925092565b600060ff82169050919050565b6124c8816124b2565b82525050565b60006020820190506124e360008301846124bf565b92915050565b60008060408385031215612500576124ff6121d4565b5b600061250e8582860161237d565b925050602061251f8582860161237d565b9150509250929050565b60006020828403121561253f5761253e6121d4565b5b600061254d8482850161237d565b91505092915050565b61255f816124b2565b811461256a57600080fd5b50565b60008135905061257c81612556565b92915050565b6000819050919050565b61259581612582565b81146125a057600080fd5b50565b6000813590506125b28161258c565b92915050565b600080600080600080600060e0888a0312156125d7576125d66121d4565b5b60006125e58a828b0161237d565b97505060206125f68a828b0161237d565b96505060406126078a828b016121fa565b95505060606126188a828b016121fa565b94505060806126298a828b0161256d565b93505060a061263a8a828b016125a3565b92505060c061264b8a828b016125a3565b91505092959891949750929550565b600060408201905061266f600083018561224f565b61267c602083018461224f565b9392505050565b6000819050919050565b6000819050919050565b60006126b26126ad6126a884612683565b61268d565b6121d9565b9050919050565b6126c281612697565b82525050565b60006040820190506126dd60008301856126b9565b6126ea602083018461224f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061272b826121d9565b9150612736836121d9565b925082612746576127456126f1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278b826121d9565b9150612796836121d9565b9250828210156127a9576127a8612751565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127fb57607f821691505b6020821081141561280f5761280e6127b4565b5b50919050565b7f496e64657820616c726561647920736574000000000000000000000000000000600082015250565b600061284b601183612284565b915061285682612815565b602082019050919050565b6000602082019050818103600083015261287a8161283e565b9050919050565b600081519050612890816121e3565b92915050565b6000602082840312156128ac576128ab6121d4565b5b60006128ba84828501612881565b91505092915050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006128f9601d83612284565b9150612904826128c3565b602082019050919050565b60006020820190508181036000830152612928816128ec565b9050919050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000612965601e83612284565b91506129708261292f565b602082019050919050565b6000602082019050818103600083015261299481612958565b9050919050565b60006129a6826121d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129d9576129d8612751565b5b600182019050919050565b7f4e444f4c3a206f6e6c79207374616b696e67436f6e7472616374000000000000600082015250565b6000612a1a601a83612284565b9150612a25826129e4565b602082019050919050565b60006020820190508181036000830152612a4981612a0d565b9050919050565b6000612a5b826121d9565b9150612a66836121d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a9f57612a9e612751565b5b828202905092915050565b6000612ab5826121d9565b9150612ac0836121d9565b925082612ad057612acf6126f1565b5b828204905092915050565b6000612ae6826121d9565b9150612af1836121d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b2657612b25612751565b5b828201905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b8d602483612284565b9150612b9882612b31565b604082019050919050565b60006020820190508181036000830152612bbc81612b80565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1f602283612284565b9150612c2a82612bc3565b604082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cb1602283612284565b9150612cbc82612c55565b604082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d43602283612284565b9150612d4e82612ce7565b604082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b612d8281612582565b82525050565b6000608082019050612d9d6000830187612d79565b612daa60208301866124bf565b612db76040830185612d79565b612dc46060830184612d79565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612e03601883612284565b9150612e0e82612dcd565b602082019050919050565b60006020820190508181036000830152612e3281612df6565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e95602283612284565b9150612ea082612e39565b604082019050919050565b60006020820190508181036000830152612ec481612e88565b9050919050565b600060a082019050612ee06000830188612d79565b612eed6020830187612d79565b612efa6040830186612d79565b612f07606083018561224f565b612f146080830184612408565b969550505050505056fea26469706673582212206df104cae11c70dbac4c7cdc2fa4c9e680baf489b844111a80c7f66d0c665a6a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80634a6b9245116100de57806395d89b4111610097578063cfad57a211610071578063cfad57a2146104d6578063d505accf146104f2578063dd62ed3e1461050e578063ee99205c1461053e57610173565b806395d89b4114610458578063a457c2d714610476578063a9059cbb146104a657610173565b80634a6b92451461034a5780636525d0651461037a57806370a08231146103aa5780637965d56d146103da5780637ecebe001461040a5780639358928b1461043a57610173565b806323b872dd1161013057806323b872dd146102625780632986c0e514610292578063313ce567146102b057806339509351146102ce57806340a5737f146102fe578063485cc9551461032e57610173565b8063058ecdb41461017857806306fdde03146101a8578063095ea7b3146101c657806312d43a51146101f657806318160ddd146102145780631bd3967414610232575b600080fd5b610192600480360381019061018d919061220f565b61055c565b60405161019f919061225e565b60405180910390f35b6101b061071c565b6040516101bd9190612312565b60405180910390f35b6101e060048036038101906101db9190612392565b6107b7565b6040516101ed91906123ed565b60405180910390f35b6101fe6107ce565b60405161020b9190612417565b60405180910390f35b61021c6107dd565b604051610229919061225e565b60405180910390f35b61024c60048036038101906102479190612432565b6107ec565b604051610259919061225e565b60405180910390f35b61027c6004803603810190610277919061245f565b610818565b60405161028991906123ed565b60405180910390f35b61029a610a4f565b6040516102a7919061225e565b60405180910390f35b6102b8610a6f565b6040516102c591906124ce565b60405180910390f35b6102e860048036038101906102e39190612392565b610a8f565b6040516102f591906123ed565b60405180910390f35b61031860048036038101906103139190612432565b610ac1565b60405161032591906123ed565b60405180910390f35b610348600480360381019061034391906124e9565b610b30565b005b610364600480360381019061035f9190612432565b610e09565b604051610371919061225e565b60405180910390f35b610394600480360381019061038f9190612432565b610ebc565b6040516103a1919061225e565b60405180910390f35b6103c460048036038101906103bf9190612529565b610f6f565b6040516103d1919061225e565b60405180910390f35b6103f460048036038101906103ef9190612432565b610fdc565b604051610401919061225e565b60405180910390f35b610424600480360381019061041f9190612529565b611008565b604051610431919061225e565b60405180910390f35b61044261105a565b60405161044f919061225e565b60405180910390f35b6104606111fe565b60405161046d9190612312565b60405180910390f35b610490600480360381019061048b9190612392565b611299565b60405161049d91906123ed565b60405180910390f35b6104c060048036038101906104bb9190612392565b6112e9565b6040516104cd91906123ed565b60405180910390f35b6104f060048036038101906104eb9190612529565b6114b4565b005b61050c600480360381019061050791906125b8565b6114c0565b005b610528600480360381019061052391906124e9565b6116e3565b604051610535919061225e565b60405180910390f35b610546611773565b6040516105539190612417565b60405180910390f35b6000806105676117ab565b905060006105736117d8565b905061057e82611805565b60008061058961105a565b9050600087141561062457857f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da44285600201546040516105ca92919061265a565b60405180910390a2857f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006105fe610a4f565b60405161060c9291906126c8565b60405180910390a28260020154945050505050610716565b600081111561065d576106568161064885600201548a61189a90919063ffffffff16565b6118b090919063ffffffff16565b9150610661565b8691505b6106788284600201546118c690919063ffffffff16565b83600201819055506000196fffffffffffffffffffffffffffffffff16836002015411156106be576000196fffffffffffffffffffffffffffffffff1683600201819055505b6106f683600201546611c37937e080006000196106db9190612720565b6000196106e89190612780565b6118b090919063ffffffff16565b84600601819055506107098188886118dc565b5082600201549450505050505b92915050565b6060610726611a69565b6000018054610734906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610760906127e3565b80156107ad5780601f10610782576101008083540402835291602001916107ad565b820191906000526020600020905b81548152906001019060200180831161079057829003601f168201915b5050505050905090565b60006107c4338484611a96565b6001905092915050565b60006107d8611c6a565b905090565b60006107e7611ca2565b905090565b6000806107f76117ab565b905061081081600601548461189a90919063ffffffff16565b915050919050565b6000806108236117ab565b905061082f8484611299565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561088933886116e3565b604051610896919061225e565b60405180910390a360006108a9846107ec565b90506108ff818360070160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b8260070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610998818360070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c690919063ffffffff16565b8260070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610a3a919061225e565b60405180910390a36001925050509392505050565b600080610a5a6117ab565b9050610a698160000154610fdc565b91505090565b6000610a79611a69565b60020160009054906101000a900460ff16905090565b6000610ab73384610ab285610aa433896116e3565b6118c690919063ffffffff16565b611a96565b6001905092915050565b600080610acc6117ab565b90506000816000015414610b15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0c90612861565b60405180910390fd5b610b1e836107ec565b81600001819055506001915050919050565b610b38611ccb565b6000610b426117d8565b90506000610b4e611a69565b90506000610b5a6117ab565b9050610ba46040518060400160405280600b81526020017f5374616b6564204e65636300000000000000000000000000000000000000000081525083611cd590919063ffffffff16565b610bec6040518060400160405280600581526020017f734e45434300000000000000000000000000000000000000000000000000000081525083611cf290919063ffffffff16565b610c00600983611d0f90919063ffffffff16565b6611c37937e080008360020181905550610c4883600201546611c37937e08000600019610c2d9190612720565b600019610c3a9190612780565b6118b090919063ffffffff16565b8160060181905550848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506611c37937e08000600019610ceb9190612720565b600019610cf89190612780565b8160070160008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560020154604051610dc3919061225e565b60405180910390a37f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a185604051610dfa9190612417565b60405180910390a15050505050565b600080610e146117ab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8248768846040518263ffffffff1660e01b8152600401610e73919061225e565b602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612896565b915050919050565b600080610ec76117ab565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a5236c846040518263ffffffff1660e01b8152600401610f26919061225e565b602060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612896565b915050919050565b600080610f7a6117ab565b9050610fd481600601548260070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118b090919063ffffffff16565b915050919050565b600080610fe76117ab565b90506110008160060154846118b090919063ffffffff16565b915050919050565b6000611012611d30565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806110656117ab565b905060006110716117d8565b90506111f78260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a82487688460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190612896565b6040518263ffffffff1660e01b8152600401611165919061225e565b602060405180830381865afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190612896565b6111e96111d68560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f6f565b8460020154611cb590919063ffffffff16565b6118c690919063ffffffff16565b9250505090565b6060611208611a69565b6001018054611216906127e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611242906127e3565b801561128f5780601f106112645761010080835404028352916020019161128f565b820191906000526020600020905b81548152906001019060200180831161127257829003601f168201915b5050505050905090565b6000806112a633856116e3565b90508083106112c0576112bb33856000611a96565b6112de565b6112dd33856112d88685611cb590919063ffffffff16565b611a96565b5b600191505092915050565b6000806112f46117ab565b9050600061130f82600601548561189a90919063ffffffff16565b9050611365818360070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b8260070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113fe818360070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c690919063ffffffff16565b8260070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516114a0919061225e565b60405180910390a360019250505092915050565b6114bd81611d5d565b50565b83421115611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa9061290f565b60405180910390fd5b60008061150e611d30565b60000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528960208201528860408201528760608201528160808201528660a082015260c0812092505060006115a6611db8565b905060006040517f190100000000000000000000000000000000000000000000000000000000000081528260028201528460228201526042812091505060006115fc88888885611e03909392919063ffffffff16565b90508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461166c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116639061297b565b60405180910390fd5b611674611d30565b60000160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906116c59061299b565b91905055506116d58c8c8c611a96565b505050505050505050505050565b60006116ed6117d8565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061177e6117ab565b90508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000807f85cc79b6be0f7f23d750ce271d29ecc56c7c1a80fc209736f2b226ac13ce4e5a90508091505090565b6000807fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490508091505090565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e90612a30565b60405180910390fd5b50565b600081836118a89190612a50565b905092915050565b600081836118be9190612aaa565b905092915050565b600081836118d49190612adb565b905092915050565b6000806118e76117ab565b905060006118f36117d8565b9050600061192487611916670de0b6b3a76400008961189a90919063ffffffff16565b6118b090919063ffffffff16565b9050826005016040518060e0016040528087815260200183815260200189815260200161194f61105a565b8152602001888152602001611962610a4f565b8152602001438152509080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601555050847f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4428460020154604051611a1292919061265a565b60405180910390a2847f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb282611a45610a4f565b604051611a5392919061265a565b60405180910390a2600193505050509392505050565b6000807f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90612ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6d90612c35565b60405180910390fd5b80611b7f6117d8565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c5d919061225e565b60405180910390a3505050565b600080611c75611f8e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000611cac6117d8565b60020154905090565b60008183611cc39190612780565b905092915050565b611cd3611fbb565b565b80826000019080519060200190611ced929190612131565b505050565b80826001019080519060200190611d0a929190612131565b505050565b808260020160006101000a81548160ff021916908360ff1602179055505050565b6000807fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb990508091505090565b611d65611fbb565b6000611d6f611f8e565b9050818160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080611dc3611d30565b6001016000611dd0612056565b81526020019081526020016000205490506000801b8114611df45780915050611e00565b611dfc61205e565b9150505b90565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290612cc7565b60405180910390fd5b601b8460ff161480611e805750601c8460ff16145b611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690612d59565b60405180910390fd5b600060018686868660405160008152602001604052604051611ee49493929190612d88565b6020604051602081039080840390855afa158015611f06573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7990612e19565b60405180910390fd5b80915050949350505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b611fc3611f8e565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204b90612eab565b60405180910390fd5b565b600046905090565b600080612069612056565b905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61209661071c565b805190602001206040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508051906020012084306040516020016120f0959493929190612ecb565b60405160208183030381529060405280519060200120905080612111611d30565b600101600084815260200190815260200160002081905550809250505090565b82805461213d906127e3565b90600052602060002090601f01602090048101928261215f57600085556121a6565b82601f1061217857805160ff19168380011785556121a6565b828001600101855582156121a6579182015b828111156121a557825182559160200191906001019061218a565b5b5090506121b391906121b7565b5090565b5b808211156121d05760008160009055506001016121b8565b5090565b600080fd5b6000819050919050565b6121ec816121d9565b81146121f757600080fd5b50565b600081359050612209816121e3565b92915050565b60008060408385031215612226576122256121d4565b5b6000612234858286016121fa565b9250506020612245858286016121fa565b9150509250929050565b612258816121d9565b82525050565b6000602082019050612273600083018461224f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122b3578082015181840152602081019050612298565b838111156122c2576000848401525b50505050565b6000601f19601f8301169050919050565b60006122e482612279565b6122ee8185612284565b93506122fe818560208601612295565b612307816122c8565b840191505092915050565b6000602082019050818103600083015261232c81846122d9565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061235f82612334565b9050919050565b61236f81612354565b811461237a57600080fd5b50565b60008135905061238c81612366565b92915050565b600080604083850312156123a9576123a86121d4565b5b60006123b78582860161237d565b92505060206123c8858286016121fa565b9150509250929050565b60008115159050919050565b6123e7816123d2565b82525050565b600060208201905061240260008301846123de565b92915050565b61241181612354565b82525050565b600060208201905061242c6000830184612408565b92915050565b600060208284031215612448576124476121d4565b5b6000612456848285016121fa565b91505092915050565b600080600060608486031215612478576124776121d4565b5b60006124868682870161237d565b93505060206124978682870161237d565b92505060406124a8868287016121fa565b9150509250925092565b600060ff82169050919050565b6124c8816124b2565b82525050565b60006020820190506124e360008301846124bf565b92915050565b60008060408385031215612500576124ff6121d4565b5b600061250e8582860161237d565b925050602061251f8582860161237d565b9150509250929050565b60006020828403121561253f5761253e6121d4565b5b600061254d8482850161237d565b91505092915050565b61255f816124b2565b811461256a57600080fd5b50565b60008135905061257c81612556565b92915050565b6000819050919050565b61259581612582565b81146125a057600080fd5b50565b6000813590506125b28161258c565b92915050565b600080600080600080600060e0888a0312156125d7576125d66121d4565b5b60006125e58a828b0161237d565b97505060206125f68a828b0161237d565b96505060406126078a828b016121fa565b95505060606126188a828b016121fa565b94505060806126298a828b0161256d565b93505060a061263a8a828b016125a3565b92505060c061264b8a828b016125a3565b91505092959891949750929550565b600060408201905061266f600083018561224f565b61267c602083018461224f565b9392505050565b6000819050919050565b6000819050919050565b60006126b26126ad6126a884612683565b61268d565b6121d9565b9050919050565b6126c281612697565b82525050565b60006040820190506126dd60008301856126b9565b6126ea602083018461224f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061272b826121d9565b9150612736836121d9565b925082612746576127456126f1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278b826121d9565b9150612796836121d9565b9250828210156127a9576127a8612751565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127fb57607f821691505b6020821081141561280f5761280e6127b4565b5b50919050565b7f496e64657820616c726561647920736574000000000000000000000000000000600082015250565b600061284b601183612284565b915061285682612815565b602082019050919050565b6000602082019050818103600083015261287a8161283e565b9050919050565b600081519050612890816121e3565b92915050565b6000602082840312156128ac576128ab6121d4565b5b60006128ba84828501612881565b91505092915050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006128f9601d83612284565b9150612904826128c3565b602082019050919050565b60006020820190508181036000830152612928816128ec565b9050919050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000612965601e83612284565b91506129708261292f565b602082019050919050565b6000602082019050818103600083015261299481612958565b9050919050565b60006129a6826121d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129d9576129d8612751565b5b600182019050919050565b7f4e444f4c3a206f6e6c79207374616b696e67436f6e7472616374000000000000600082015250565b6000612a1a601a83612284565b9150612a25826129e4565b602082019050919050565b60006020820190508181036000830152612a4981612a0d565b9050919050565b6000612a5b826121d9565b9150612a66836121d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a9f57612a9e612751565b5b828202905092915050565b6000612ab5826121d9565b9150612ac0836121d9565b925082612ad057612acf6126f1565b5b828204905092915050565b6000612ae6826121d9565b9150612af1836121d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b2657612b25612751565b5b828201905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b8d602483612284565b9150612b9882612b31565b604082019050919050565b60006020820190508181036000830152612bbc81612b80565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1f602283612284565b9150612c2a82612bc3565b604082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612cb1602283612284565b9150612cbc82612c55565b604082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d43602283612284565b9150612d4e82612ce7565b604082019050919050565b60006020820190508181036000830152612d7281612d36565b9050919050565b612d8281612582565b82525050565b6000608082019050612d9d6000830187612d79565b612daa60208301866124bf565b612db76040830185612d79565b612dc46060830184612d79565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612e03601883612284565b9150612e0e82612dcd565b602082019050919050565b60006020820190508181036000830152612e3281612df6565b9050919050565b7f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e95602283612284565b9150612ea082612e39565b604082019050919050565b60006020820190508181036000830152612ec481612e88565b9050919050565b600060a082019050612ee06000830188612d79565b612eed6020830187612d79565b612efa6040830186612d79565b612f07606083018561224f565b612f146080830184612408565b969550505050505056fea26469706673582212206df104cae11c70dbac4c7cdc2fa4c9e680baf489b844111a80c7f66d0c665a6a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "holder": "approver of allowance",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "token allowance"
        }
      },
      "approve(address,uint256)": {
        "details": "prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)",
        "params": {
          "amount": "quantity of tokens approved for spending",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      },
      "name()": {
        "returns": {
          "_0": "token name"
        }
      },
      "nonces(address)": {
        "details": "inhertidoc IERC2612"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated.",
        "params": {
          "amount": "quantity of tokens to approve",
          "owner": "holder of tokens and signer of permit",
          "r": "secp256k1 'r' value",
          "s": "secp256k1 's' value",
          "spender": "beneficiary of approval",
          "v": "secp256k1 'v' value"
        }
      },
      "rebase(uint256,uint256)": {
        "params": {
          "profit_": "uint256"
        },
        "returns": {
          "_0": "uint256"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "token symbol"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "query the allowance granted from given holder to given spender"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to spender to spend tokens"
      },
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      },
      "name()": {
        "notice": "return token name"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "approve spender to transfer tokens held by owner via signature"
      },
      "rebase(uint256,uint256)": {
        "notice": "increases sNecc supply to increase staking balances relative to profit_"
      },
      "symbol()": {
        "notice": "return token symbol"
      },
      "totalSupply()": {
        "notice": "query the total minted token supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}