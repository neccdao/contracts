{
  "address": "0x73217673Ed0c22D30a0e99dDA6F38f7546ff28E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distribute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "length",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Epoch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "giveLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyInWarmup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sBalance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "warmupInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gons",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "lock",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sBalance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66a1bb040fd233d029ea525b7c7186a6efb4586cdd6d127da37b7b2a19580db1",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x73217673Ed0c22D30a0e99dDA6F38f7546ff28E2",
    "transactionIndex": 0,
    "gasUsed": "1985255",
    "logsBloom": "0x
    "blockHash": "0x8048d6075ac4a9aa2102af85f8a695227f92e06e05d41755b3bfe57447d03106",
    "transactionHash": "0x66a1bb040fd233d029ea525b7c7186a6efb4586cdd6d127da37b7b2a19580db1",
    "logs": [],
    "blockNumber": 9724283,
    "cumulativeGasUsed": "1985255",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "100e0ef6515919c85898ef6103d645a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Epoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInWarmup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"warmupInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"params\":{\"_recipient\":\"address\"}},\"contractBalance()\":{\"returns\":{\"_0\":\"uint\"}},\"giveLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"returnLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"stake(uint256,address)\":{\"params\":{\"_amount\":\"uint\"},\"returns\":{\"_0\":\"bool\"}},\"unstake(uint256,bool)\":{\"params\":{\"_amount\":\"uint\",\"_trigger\":\"bool\"}},\"unwrap(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"},\"returns\":{\"sBalance_\":\"uint\"}},\"wrap(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"},\"returns\":{\"sBalance_\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"retrieve nNecc from warmup\"},\"contractBalance()\":{\"notice\":\"returns contract Necc holdings, including bonuses provided\"},\"forfeit()\":{\"notice\":\"forfeit nNecc in warmup and retrieve Necc\"},\"giveLockBonus(uint256)\":{\"notice\":\"provide bonus to locked staking contract\"},\"index()\":{\"notice\":\"returns the nNecc index, which tracks rebase growth\"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"returnLockBonus(uint256)\":{\"notice\":\"reclaim bonus from locked staking contract\"},\"stake(uint256,address)\":{\"notice\":\"stake Necc to enter warmup\"},\"unstake(uint256,bool)\":{\"notice\":\"redeem nNecc for Necc\"},\"unwrap(address,uint256)\":{\"notice\":\"convert _amount s.sNecc into sBalance_ s.nNecc\"},\"wrap(address,uint256)\":{\"notice\":\"convert _amount nNecc into sBalance_ sNecc\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/facets/Bond/StakingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma abicoder v2;\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface IDistributor {\\n    function distribute() external returns (uint256);\\n}\\n\\ninterface IsNecc is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sOHM) external;\\n}\\n\\ninterface InNecc is IERC20 {\\n    function rebase(uint256 neccProfit_, uint256 epoch_)\\n        external\\n        returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\\ncontract StakingFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for InNecc;\\n\\n    /**\\n        @notice stake Necc to enter warmup\\n        @param _amount uint\\n        @return bool\\n     */\\n    function stake(uint256 _amount, address _recipient)\\n        external\\n        returns (bool)\\n    {\\n        rebase();\\n\\n        IERC20(s.Necc).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (s.warmupPeriod == 0) {\\n            _send(_recipient, _amount);\\n        } else {\\n            LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\\n            require(!info.lock, \\\"Deposits for account are locked\\\");\\n\\n            s.warmupInfo[_recipient] = LibBondStorage.Claim({\\n                deposit: info.deposit.add(_amount),\\n                gons: info.gons.add(InNecc(s.nNecc).gonsForBalance(_amount)),\\n                expiry: s.epoch.number.add(s.warmupPeriod),\\n                lock: false\\n            });\\n\\n            s.gonsInWarmup = s.gonsInWarmup.add(\\n                InNecc(s.nNecc).gonsForBalance(_amount)\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice retrieve nNecc from warmup\\n        @param _recipient address\\n     */\\n    function claim(address _recipient) public {\\n        LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\\n        if (!info.lock) {\\n            require(\\n                _recipient == msg.sender,\\n                \\\"External claims for account are locked\\\"\\n            );\\n        }\\n\\n        if (s.epoch.number >= info.expiry && info.expiry != 0) {\\n            delete s.warmupInfo[_recipient];\\n            s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\\n\\n            _send(_recipient, InNecc(s.nNecc).balanceForGons(info.gons));\\n        }\\n    }\\n\\n    /**\\n        @notice forfeit nNecc in warmup and retrieve Necc\\n     */\\n    function forfeit() external {\\n        LibBondStorage.Claim memory info = s.warmupInfo[msg.sender];\\n        delete s.warmupInfo[msg.sender];\\n        s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\\n\\n        IERC20(s.Necc).safeTransfer(msg.sender, info.deposit);\\n    }\\n\\n    /**\\n        @notice redeem nNecc for Necc\\n        @param _amount uint\\n        @param _trigger bool\\n     */\\n    function unstake(uint256 _amount, bool _trigger) external {\\n        if (_trigger) {\\n            rebase();\\n        }\\n        IERC20(s.nNecc).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(s.Necc).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice send staker their amount as sOHM or gOHM\\n     * @param _recipient address\\n     * @param _amount uint\\n     */\\n    function _send(address _recipient, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        InNecc(s.nNecc).safeTransfer(_recipient, _amount); // send as sOHM (equal unit as OHM)\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice convert _amount nNecc into sBalance_ sNecc\\n     * @param _to address\\n     * @param _amount uint\\n     * @return sBalance_ uint\\n     */\\n    function wrap(address _to, uint256 _amount)\\n        external\\n        returns (uint256 sBalance_)\\n    {\\n        InNecc(s.nNecc).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        sBalance_ = IsNecc(s.sNecc).balanceTo(_amount);\\n        IsNecc(s.sNecc).mint(_to, sBalance_);\\n    }\\n\\n    /**\\n     * @notice convert _amount s.sNecc into sBalance_ s.nNecc\\n     * @param _to address\\n     * @param _amount uint\\n     * @return sBalance_ uint\\n     */\\n    function unwrap(address _to, uint256 _amount)\\n        external\\n        returns (uint256 sBalance_)\\n    {\\n        IsNecc(s.sNecc).burn(msg.sender, _amount);\\n\\n        sBalance_ = IsNecc(s.sNecc).balanceFrom(_amount);\\n        InNecc(s.nNecc).safeTransfer(_to, sBalance_);\\n    }\\n\\n    //\\n\\n    /**\\n        @notice returns the nNecc index, which tracks rebase growth\\n        @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return InNecc(s.nNecc).index();\\n    }\\n\\n    /**\\n        @notice trigger rebase if epoch over\\n     */\\n    function rebase() public {\\n        if (s.epoch.endTime <= uint256(block.timestamp)) {\\n            InNecc(s.nNecc).rebase(s.epoch.distribute, s.epoch.number);\\n\\n            s.epoch.endTime = s.epoch.endTime.add(s.epoch.length);\\n            s.epoch.number++;\\n\\n            IDistributor(address(this)).distribute();\\n\\n            if (contractBalance() <= totalStaked()) {\\n                s.epoch.distribute = 0;\\n            } else {\\n                s.epoch.distribute = contractBalance().sub(totalStaked());\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns contract Necc holdings, including bonuses provided\\n        @return uint\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return IERC20(s.Necc).balanceOf(address(this)).add(s.totalBonus);\\n    }\\n\\n    /**\\n        @notice provide bonus to locked staking contract\\n        @param _amount uint\\n     */\\n    function giveLockBonus(uint256 _amount) external {\\n        require(msg.sender == s.locker);\\n        s.totalBonus = s.totalBonus.add(_amount);\\n        IERC20(s.nNecc).safeTransfer(s.locker, _amount);\\n    }\\n\\n    /**\\n        @notice reclaim bonus from locked staking contract\\n        @param _amount uint\\n     */\\n    function returnLockBonus(uint256 _amount) external {\\n        require(msg.sender == s.locker);\\n        s.totalBonus = s.totalBonus.sub(_amount);\\n        IERC20(s.nNecc).safeTransferFrom(s.locker, address(this), _amount);\\n    }\\n\\n    function epoch() public view returns (LibBondStorage.Epoch memory) {\\n        return s.epoch;\\n    }\\n\\n    function warmupInfo(address _recipient)\\n        public\\n        view\\n        returns (LibBondStorage.Claim memory)\\n    {\\n        return s.warmupInfo[_recipient];\\n    }\\n\\n    function supplyInWarmup() public view returns (uint256) {\\n        return InNecc(s.nNecc).balanceForGons(s.gonsInWarmup);\\n    }\\n\\n    function totalStaked() public view returns (uint256) {\\n        return InNecc(s.nNecc).circulatingSupply();\\n    }\\n}\\n\",\"keccak256\":\"0xbc9a711239b9a8bae72272900af5bfe1bc5bd09d3b64ee6dd4417bb1d5e24868\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address nNecc; // token given for staking\\n        address sNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 totalBonus;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xe23d6fa3a1414d09888a768ed9eb53f3fc1a7d49013bcf1d47a3fb8ea8f0c97b\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612308806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063817b1cd211610097578063af14052c11610066578063af14052c14610274578063bf376c7a1461027e578063f3d86e4a146102ae578063f62ae76a146102b8576100f5565b8063817b1cd2146101fe5780638b7afe2e1461021c578063900cf0cf1461023a5780639ebea88c14610258576100f5565b80632986c0e5116100d35780632986c0e51461015057806339f476931461016e5780636746f4c21461019e5780637acb7757146101ce576100f5565b806303c23670146100fa5780631e83409a146101165780632013864114610132575b600080fd5b610114600480360381019061010f91906119f0565b6102d4565b005b610130600480360381019061012b9190611a7b565b6103ca565b005b61013a610639565b6040516101479190611ab7565b60405180910390f35b6101586106e3565b6040516101659190611ab7565b60405180910390f35b61018860048036038101906101839190611ad2565b61077d565b6040516101959190611ab7565b60405180910390f35b6101b860048036038101906101b39190611a7b565b610907565b6040516101c59190611b91565b60405180910390f35b6101e860048036038101906101e39190611bac565b61099c565b6040516101f59190611bfb565b60405180910390f35b610206610d3d565b6040516102139190611ab7565b60405180910390f35b610224610dd7565b6040516102319190611ab7565b60405180910390f35b610242610e93565b60405161024f9190611c6b565b60405180910390f35b610272600480360381019061026d9190611cb2565b610ed8565b005b61027c610f8c565b005b61029860048036038101906102939190611ad2565b611166565b6040516102a59190611ab7565b60405180910390f35b6102b66112f3565b005b6102d260048036038101906102cd91906119f0565b611468565b005b600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033157600080fd5b610349816000601a015461156090919063ffffffff16565b6000601a01819055506103c7600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b50565b600080601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff161515151581525050905080606001516104cb573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190611d75565b60405180910390fd5b5b8060400151600060130160000154101580156104ec57506000816040015114155b15610635576000601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff0219169055505061057e81602001516000601f01546115fc90919063ffffffff16565b6000601f018190555061063382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d84602001516040518263ffffffff1660e01b81526004016105ed9190611ab7565b602060405180830381865afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190611daa565b611612565b505b5050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d6000601f01546040518263ffffffff1660e01b815260040161069d9190611ab7565b602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611daa565b905090565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190611daa565b905090565b60008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016107de929190611de6565b600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b50505050600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8248768836040518263ffffffff1660e01b815260040161086e9190611ab7565b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611daa565b90506109018382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b92915050565b61090f611963565b6000601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b60006109a6610f8c565b6109f73330856000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b600080601b01541415610a1457610a0e8284611612565b50610d33565b600080601c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015115610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad990611e5b565b60405180910390fd5b6040518060800160405280610b0486846000015161156090919063ffffffff16565b8152602001610bbe600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674886040518263ffffffff1660e01b8152600401610b6a9190611ab7565b602060405180830381865afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611daa565b846020015161156090919063ffffffff16565b8152602001610be36000601b015460006013016000015461156090919063ffffffff16565b8152602001600015158152506000601c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050610d28600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674866040518263ffffffff1660e01b8152600401610cd39190611ab7565b602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190611daa565b6000601f015461156090919063ffffffff16565b6000601f0181905550505b6001905092915050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611daa565b905090565b6000610e8e6000601a01546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e3f9190611e7b565b602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e809190611daa565b61156090919063ffffffff16565b905090565b610e9b61198d565b6000601301604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905090565b8015610ee757610ee6610f8c565b5b610f39333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b610f8833836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b5050565b426000601301600301541161116457600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663058ecdb46000601301600101546000601301600001546040518363ffffffff1660e01b815260040161100b929190611e96565b6020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611daa565b5061107260006013016002015460006013016003015461156090919063ffffffff16565b6000601301600301819055506000601301600001600081548092919061109790611eee565b91905055503073ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190611daa565b50611116610d3d565b61111e610dd7565b116111355760008060130160010181905550611163565b611156611140610d3d565b611148610dd7565b6115fc90919063ffffffff16565b6000601301600101819055505b5b565b60006111ba333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a5236c836040518263ffffffff1660e01b81526004016112189190611ab7565b602060405180830381865afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190611daa565b9050600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b81526004016112bb929190611de6565b600060405180830381600087803b1580156112d557600080fd5b505af11580156112e9573d6000803e3d6000fd5b5050505092915050565b600080601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff0219169055505061140981602001516000601f01546115fc90919063ffffffff16565b6000601f01819055506114653382600001516000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b50565b600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c557600080fd5b6114dd816000601a01546115fc90919063ffffffff16565b6000601a018190555061155d600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b50565b6000818361156e9190611f37565b905092915050565b6115f78363a9059cbb60e01b8484604051602401611595929190611de6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f6565b505050565b6000818361160a9190611f8d565b905092915050565b60006116648383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b81905092915050565b6116f0846323b872dd60e01b85858560405160240161168e93929190611fc1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f6565b50505050565b6000611758826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117bd9092919063ffffffff16565b90506000815111156117b85780806020019051810190611778919061200d565b6117b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ae906120ac565b60405180910390fd5b5b505050565b60606117cc84846000856117d5565b90509392505050565b60608247101561181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118119061213e565b60405180910390fd5b611823856118e9565b611862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611859906121aa565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161188b9190612244565b60006040518083038185875af1925050503d80600081146118c8576040519150601f19603f3d011682016040523d82523d6000602084013e6118cd565b606091505b50915091506118dd8282866118fc565b92505050949350505050565b600080823b905060008111915050919050565b6060831561190c5782905061195c565b60008351111561191f5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195391906122b0565b60405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6119cd816119ba565b81146119d857600080fd5b50565b6000813590506119ea816119c4565b92915050565b600060208284031215611a0657611a056119b5565b5b6000611a14848285016119db565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4882611a1d565b9050919050565b611a5881611a3d565b8114611a6357600080fd5b50565b600081359050611a7581611a4f565b92915050565b600060208284031215611a9157611a906119b5565b5b6000611a9f84828501611a66565b91505092915050565b611ab1816119ba565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b60008060408385031215611ae957611ae86119b5565b5b6000611af785828601611a66565b9250506020611b08858286016119db565b9150509250929050565b611b1b816119ba565b82525050565b60008115159050919050565b611b3681611b21565b82525050565b608082016000820151611b526000850182611b12565b506020820151611b656020850182611b12565b506040820151611b786040850182611b12565b506060820151611b8b6060850182611b2d565b50505050565b6000608082019050611ba66000830184611b3c565b92915050565b60008060408385031215611bc357611bc26119b5565b5b6000611bd1858286016119db565b9250506020611be285828601611a66565b9150509250929050565b611bf581611b21565b82525050565b6000602082019050611c106000830184611bec565b92915050565b608082016000820151611c2c6000850182611b12565b506020820151611c3f6020850182611b12565b506040820151611c526040850182611b12565b506060820151611c656060850182611b12565b50505050565b6000608082019050611c806000830184611c16565b92915050565b611c8f81611b21565b8114611c9a57600080fd5b50565b600081359050611cac81611c86565b92915050565b60008060408385031215611cc957611cc86119b5565b5b6000611cd7858286016119db565b9250506020611ce885828601611c9d565b9150509250929050565b600082825260208201905092915050565b7f45787465726e616c20636c61696d7320666f72206163636f756e74206172652060008201527f6c6f636b65640000000000000000000000000000000000000000000000000000602082015250565b6000611d5f602683611cf2565b9150611d6a82611d03565b604082019050919050565b60006020820190508181036000830152611d8e81611d52565b9050919050565b600081519050611da4816119c4565b92915050565b600060208284031215611dc057611dbf6119b5565b5b6000611dce84828501611d95565b91505092915050565b611de081611a3d565b82525050565b6000604082019050611dfb6000830185611dd7565b611e086020830184611aa8565b9392505050565b7f4465706f7369747320666f72206163636f756e7420617265206c6f636b656400600082015250565b6000611e45601f83611cf2565b9150611e5082611e0f565b602082019050919050565b60006020820190508181036000830152611e7481611e38565b9050919050565b6000602082019050611e906000830184611dd7565b92915050565b6000604082019050611eab6000830185611aa8565b611eb86020830184611aa8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef9826119ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f2c57611f2b611ebf565b5b600182019050919050565b6000611f42826119ba565b9150611f4d836119ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f8257611f81611ebf565b5b828201905092915050565b6000611f98826119ba565b9150611fa3836119ba565b925082821015611fb657611fb5611ebf565b5b828203905092915050565b6000606082019050611fd66000830186611dd7565b611fe36020830185611dd7565b611ff06040830184611aa8565b949350505050565b60008151905061200781611c86565b92915050565b600060208284031215612023576120226119b5565b5b600061203184828501611ff8565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612096602a83611cf2565b91506120a18261203a565b604082019050919050565b600060208201905081810360008301526120c581612089565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612128602683611cf2565b9150612133826120cc565b604082019050919050565b600060208201905081810360008301526121578161211b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612194601d83611cf2565b915061219f8261215e565b602082019050919050565b600060208201905081810360008301526121c381612187565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156121fe5780820151818401526020810190506121e3565b8381111561220d576000848401525b50505050565b600061221e826121ca565b61222881856121d5565b93506122388185602086016121e0565b80840191505092915050565b60006122508284612213565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006122828261225b565b61228c8185611cf2565b935061229c8185602086016121e0565b6122a581612266565b840191505092915050565b600060208201905081810360008301526122ca8184612277565b90509291505056fea2646970667358221220640f85394eae69698f42e29b9d28f36a59057ae657bc4860bde7b108295c715564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063817b1cd211610097578063af14052c11610066578063af14052c14610274578063bf376c7a1461027e578063f3d86e4a146102ae578063f62ae76a146102b8576100f5565b8063817b1cd2146101fe5780638b7afe2e1461021c578063900cf0cf1461023a5780639ebea88c14610258576100f5565b80632986c0e5116100d35780632986c0e51461015057806339f476931461016e5780636746f4c21461019e5780637acb7757146101ce576100f5565b806303c23670146100fa5780631e83409a146101165780632013864114610132575b600080fd5b610114600480360381019061010f91906119f0565b6102d4565b005b610130600480360381019061012b9190611a7b565b6103ca565b005b61013a610639565b6040516101479190611ab7565b60405180910390f35b6101586106e3565b6040516101659190611ab7565b60405180910390f35b61018860048036038101906101839190611ad2565b61077d565b6040516101959190611ab7565b60405180910390f35b6101b860048036038101906101b39190611a7b565b610907565b6040516101c59190611b91565b60405180910390f35b6101e860048036038101906101e39190611bac565b61099c565b6040516101f59190611bfb565b60405180910390f35b610206610d3d565b6040516102139190611ab7565b60405180910390f35b610224610dd7565b6040516102319190611ab7565b60405180910390f35b610242610e93565b60405161024f9190611c6b565b60405180910390f35b610272600480360381019061026d9190611cb2565b610ed8565b005b61027c610f8c565b005b61029860048036038101906102939190611ad2565b611166565b6040516102a59190611ab7565b60405180910390f35b6102b66112f3565b005b6102d260048036038101906102cd91906119f0565b611468565b005b600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033157600080fd5b610349816000601a015461156090919063ffffffff16565b6000601a01819055506103c7600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b50565b600080601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff161515151581525050905080606001516104cb573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190611d75565b60405180910390fd5b5b8060400151600060130160000154101580156104ec57506000816040015114155b15610635576000601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff0219169055505061057e81602001516000601f01546115fc90919063ffffffff16565b6000601f018190555061063382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d84602001516040518263ffffffff1660e01b81526004016105ed9190611ab7565b602060405180830381865afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190611daa565b611612565b505b5050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d6000601f01546040518263ffffffff1660e01b815260040161069d9190611ab7565b602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611daa565b905090565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190611daa565b905090565b60008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016107de929190611de6565b600060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b50505050600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8248768836040518263ffffffff1660e01b815260040161086e9190611ab7565b602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611daa565b90506109018382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b92915050565b61090f611963565b6000601c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b60006109a6610f8c565b6109f73330856000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b600080601b01541415610a1457610a0e8284611612565b50610d33565b600080601c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015115610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad990611e5b565b60405180910390fd5b6040518060800160405280610b0486846000015161156090919063ffffffff16565b8152602001610bbe600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674886040518263ffffffff1660e01b8152600401610b6a9190611ab7565b602060405180830381865afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611daa565b846020015161156090919063ffffffff16565b8152602001610be36000601b015460006013016000015461156090919063ffffffff16565b8152602001600015158152506000601c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050610d28600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674866040518263ffffffff1660e01b8152600401610cd39190611ab7565b602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190611daa565b6000601f015461156090919063ffffffff16565b6000601f0181905550505b6001905092915050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190611daa565b905090565b6000610e8e6000601a01546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e3f9190611e7b565b602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e809190611daa565b61156090919063ffffffff16565b905090565b610e9b61198d565b6000601301604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905090565b8015610ee757610ee6610f8c565b5b610f39333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b610f8833836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b5050565b426000601301600301541161116457600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663058ecdb46000601301600101546000601301600001546040518363ffffffff1660e01b815260040161100b929190611e96565b6020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611daa565b5061107260006013016002015460006013016003015461156090919063ffffffff16565b6000601301600301819055506000601301600001600081548092919061109790611eee565b91905055503073ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190611daa565b50611116610d3d565b61111e610dd7565b116111355760008060130160010181905550611163565b611156611140610d3d565b611148610dd7565b6115fc90919063ffffffff16565b6000601301600101819055505b5b565b60006111ba333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366a5236c836040518263ffffffff1660e01b81526004016112189190611ab7565b602060405180830381865afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190611daa565b9050600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b81526004016112bb929190611de6565b600060405180830381600087803b1580156112d557600080fd5b505af11580156112e9573d6000803e3d6000fd5b5050505092915050565b600080601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff0219169055505061140981602001516000601f01546115fc90919063ffffffff16565b6000601f01819055506114653382600001516000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b50565b600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c557600080fd5b6114dd816000601a01546115fc90919063ffffffff16565b6000601a018190555061155d600060190160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661166d909392919063ffffffff16565b50565b6000818361156e9190611f37565b905092915050565b6115f78363a9059cbb60e01b8484604051602401611595929190611de6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f6565b505050565b6000818361160a9190611f8d565b905092915050565b60006116648383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115769092919063ffffffff16565b81905092915050565b6116f0846323b872dd60e01b85858560405160240161168e93929190611fc1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f6565b50505050565b6000611758826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117bd9092919063ffffffff16565b90506000815111156117b85780806020019051810190611778919061200d565b6117b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ae906120ac565b60405180910390fd5b5b505050565b60606117cc84846000856117d5565b90509392505050565b60608247101561181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118119061213e565b60405180910390fd5b611823856118e9565b611862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611859906121aa565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161188b9190612244565b60006040518083038185875af1925050503d80600081146118c8576040519150601f19603f3d011682016040523d82523d6000602084013e6118cd565b606091505b50915091506118dd8282866118fc565b92505050949350505050565b600080823b905060008111915050919050565b6060831561190c5782905061195c565b60008351111561191f5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195391906122b0565b60405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6119cd816119ba565b81146119d857600080fd5b50565b6000813590506119ea816119c4565b92915050565b600060208284031215611a0657611a056119b5565b5b6000611a14848285016119db565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4882611a1d565b9050919050565b611a5881611a3d565b8114611a6357600080fd5b50565b600081359050611a7581611a4f565b92915050565b600060208284031215611a9157611a906119b5565b5b6000611a9f84828501611a66565b91505092915050565b611ab1816119ba565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b60008060408385031215611ae957611ae86119b5565b5b6000611af785828601611a66565b9250506020611b08858286016119db565b9150509250929050565b611b1b816119ba565b82525050565b60008115159050919050565b611b3681611b21565b82525050565b608082016000820151611b526000850182611b12565b506020820151611b656020850182611b12565b506040820151611b786040850182611b12565b506060820151611b8b6060850182611b2d565b50505050565b6000608082019050611ba66000830184611b3c565b92915050565b60008060408385031215611bc357611bc26119b5565b5b6000611bd1858286016119db565b9250506020611be285828601611a66565b9150509250929050565b611bf581611b21565b82525050565b6000602082019050611c106000830184611bec565b92915050565b608082016000820151611c2c6000850182611b12565b506020820151611c3f6020850182611b12565b506040820151611c526040850182611b12565b506060820151611c656060850182611b12565b50505050565b6000608082019050611c806000830184611c16565b92915050565b611c8f81611b21565b8114611c9a57600080fd5b50565b600081359050611cac81611c86565b92915050565b60008060408385031215611cc957611cc86119b5565b5b6000611cd7858286016119db565b9250506020611ce885828601611c9d565b9150509250929050565b600082825260208201905092915050565b7f45787465726e616c20636c61696d7320666f72206163636f756e74206172652060008201527f6c6f636b65640000000000000000000000000000000000000000000000000000602082015250565b6000611d5f602683611cf2565b9150611d6a82611d03565b604082019050919050565b60006020820190508181036000830152611d8e81611d52565b9050919050565b600081519050611da4816119c4565b92915050565b600060208284031215611dc057611dbf6119b5565b5b6000611dce84828501611d95565b91505092915050565b611de081611a3d565b82525050565b6000604082019050611dfb6000830185611dd7565b611e086020830184611aa8565b9392505050565b7f4465706f7369747320666f72206163636f756e7420617265206c6f636b656400600082015250565b6000611e45601f83611cf2565b9150611e5082611e0f565b602082019050919050565b60006020820190508181036000830152611e7481611e38565b9050919050565b6000602082019050611e906000830184611dd7565b92915050565b6000604082019050611eab6000830185611aa8565b611eb86020830184611aa8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef9826119ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f2c57611f2b611ebf565b5b600182019050919050565b6000611f42826119ba565b9150611f4d836119ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f8257611f81611ebf565b5b828201905092915050565b6000611f98826119ba565b9150611fa3836119ba565b925082821015611fb657611fb5611ebf565b5b828203905092915050565b6000606082019050611fd66000830186611dd7565b611fe36020830185611dd7565b611ff06040830184611aa8565b949350505050565b60008151905061200781611c86565b92915050565b600060208284031215612023576120226119b5565b5b600061203184828501611ff8565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612096602a83611cf2565b91506120a18261203a565b604082019050919050565b600060208201905081810360008301526120c581612089565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612128602683611cf2565b9150612133826120cc565b604082019050919050565b600060208201905081810360008301526121578161211b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612194601d83611cf2565b915061219f8261215e565b602082019050919050565b600060208201905081810360008301526121c381612187565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156121fe5780820151818401526020810190506121e3565b8381111561220d576000848401525b50505050565b600061221e826121ca565b61222881856121d5565b93506122388185602086016121e0565b80840191505092915050565b60006122508284612213565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006122828261225b565b61228c8185611cf2565b935061229c8185602086016121e0565b6122a581612266565b840191505092915050565b600060208201905081810360008301526122ca8184612277565b90509291505056fea2646970667358221220640f85394eae69698f42e29b9d28f36a59057ae657bc4860bde7b108295c715564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "params": {
          "_recipient": "address"
        }
      },
      "contractBalance()": {
        "returns": {
          "_0": "uint"
        }
      },
      "giveLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "returnLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "stake(uint256,address)": {
        "params": {
          "_amount": "uint"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "unstake(uint256,bool)": {
        "params": {
          "_amount": "uint",
          "_trigger": "bool"
        }
      },
      "unwrap(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        },
        "returns": {
          "sBalance_": "uint"
        }
      },
      "wrap(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        },
        "returns": {
          "sBalance_": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "retrieve nNecc from warmup"
      },
      "contractBalance()": {
        "notice": "returns contract Necc holdings, including bonuses provided"
      },
      "forfeit()": {
        "notice": "forfeit nNecc in warmup and retrieve Necc"
      },
      "giveLockBonus(uint256)": {
        "notice": "provide bonus to locked staking contract"
      },
      "index()": {
        "notice": "returns the nNecc index, which tracks rebase growth"
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "returnLockBonus(uint256)": {
        "notice": "reclaim bonus from locked staking contract"
      },
      "stake(uint256,address)": {
        "notice": "stake Necc to enter warmup"
      },
      "unstake(uint256,bool)": {
        "notice": "redeem nNecc for Necc"
      },
      "unwrap(address,uint256)": {
        "notice": "convert _amount s.sNecc into sBalance_ s.nNecc"
      },
      "wrap(address,uint256)": {
        "notice": "convert _amount nNecc into sBalance_ sNecc"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5702,
        "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)8455_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)8307_storage)dyn_storage": {
        "base": "t_struct(Info)8307_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)8302_storage)dyn_storage": {
        "base": "t_struct(Payout)8302_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)8338_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)8338_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)8365_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)8365_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)8302_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)8302_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)8338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)8338_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)8347_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)8347_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)8314_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)8314_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)8329_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)8329_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1222_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1221,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)921_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)8338_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 8331,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8333,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8335,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8337,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)8347_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 8340,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8342,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8344,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8346,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)8365_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 8358,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8360,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8362,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8364,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)8314_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 8309,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8311,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8313,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)8356_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 8349,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8351,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8353,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8355,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)8307_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 8304,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8306,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)8302_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 8299,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8301,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)921_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 916,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 920,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)8455_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 8367,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8369,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8371,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8373,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8375,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8377,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 8379,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 8381,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 8384,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1222_storage"
          },
          {
            "astId": 8389,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)8329_storage)"
          },
          {
            "astId": 8394,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)8347_storage)"
          },
          {
            "astId": 8401,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)8338_storage))"
          },
          {
            "astId": 8405,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 8409,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 8413,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 8417,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 8421,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)8307_storage)dyn_storage"
          },
          {
            "astId": 8426,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)8314_storage)"
          },
          {
            "astId": 8429,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)8356_storage"
          },
          {
            "astId": 8431,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 8433,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 8435,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 8437,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "totalBonus",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 8439,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          },
          {
            "astId": 8444,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_struct(Claim)8365_storage)"
          },
          {
            "astId": 8446,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 8452,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)8302_storage)dyn_storage)"
          },
          {
            "astId": 8454,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(Terms)8329_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 8316,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8318,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8320,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8322,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8324,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8326,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8328,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}