{
  "address": "0x0440E856119f9e48bcd073B1cef2bB5d2Fd92506",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ndol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Necc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        }
      ],
      "name": "initializeBondDepository",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLiquidityBond",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "initializeBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextEpochTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "initializeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_firstEpochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_firstEpochTime",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_sNecc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nNecc",
          "type": "address"
        }
      ],
      "name": "initializeStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverLostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_addition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeToTargetInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PARAMETER",
          "name": "_parameter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_input",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "setBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CONTRACTS",
          "name": "_contract",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmDistributor",
          "type": "address"
        }
      ],
      "name": "setFarmDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_warmupPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWarmup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maliciousDepositor",
          "type": "address"
        }
      ],
      "name": "toggleDepositLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a1a9bf119db4faa60c1ce9e695eaa64d70f1a505eb6a5ec9ad33accdff09e16",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x0440E856119f9e48bcd073B1cef2bB5d2Fd92506",
    "transactionIndex": 0,
    "gasUsed": "2171652",
    "logsBloom": "0x
    "blockHash": "0x7e7042f08babf5e20e794dc14556358d588db036fee1b1664c19cf630ce30c11",
    "transactionHash": "0x5a1a9bf119db4faa60c1ce9e695eaa64d70f1a505eb6a5ec9ad33accdff09e16",
    "logs": [],
    "blockNumber": 54316658,
    "cumulativeGasUsed": "2171652",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b0a15566ba2035749abbb19b40cb5d2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ndol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Necc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"}],\"name\":\"initializeBondDepository\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLiquidityBond\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextEpochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"initializeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_firstEpochTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_sNecc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nNecc\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToTargetInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CONTRACTS\",\"name\":\"_contract\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmDistributor\",\"type\":\"address\"}],\"name\":\"setFarmDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maliciousDepositor\",\"type\":\"address\"}],\"name\":\"toggleDepositLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"_recipient\":\"address\",\"_rewardRate\":\"uint\"}},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address,address)\":{\"params\":{\"_controlVariable\":\"uint\",\"_fee\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint256\"}},\"recoverLostToken(address)\":{\"returns\":{\"_0\":\"bool\"}},\"removeRecipient(uint256,address)\":{\"params\":{\"_index\":\"uint\",\"_recipient\":\"address\"}},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"params\":{\"_add\":\"bool\",\"_index\":\"uint\",\"_rate\":\"uint\",\"_target\":\"uint\"}},\"setBondTerms(uint8,uint256,address)\":{\"params\":{\"_input\":\"uint\",\"_parameter\":\"PARAMETER\"}},\"setContract(uint8,address)\":{\"params\":{\"_contract\":\"address\"}},\"setWarmup(uint256)\":{\"params\":{\"_warmupPeriod\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"adds recipient for distributions\"},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address,address)\":{\"notice\":\"initializes bond parameters\"},\"recoverLostToken(address)\":{\"notice\":\"allow anyone to send lost tokens (excluding principle or Necc) to the DAO\"},\"removeRecipient(uint256,address)\":{\"notice\":\"removes recipient for distributions\"},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"notice\":\"set adjustment info for a collector's reward rate\"},\"setBondTerms(uint8,uint256,address)\":{\"notice\":\"set parameters for new bonds\"},\"setContract(uint8,address)\":{\"notice\":\"sets the contract address for LP staking\"},\"setWarmup(uint256)\":{\"notice\":\"set warmup period in epoch's numbers for new stakers\"},\"toggleDepositLock(address)\":{\"notice\":\"prevent new deposits to address (protection from malicious activity)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BondConfigFacet.sol\":\"BondConfigFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondConfigFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract BondConfigFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /**\\n     *  @notice allow anyone to send lost tokens (excluding principle or Necc) to the DAO\\n     *  @return bool\\n     */\\n    function recoverLostToken(address _token) external returns (bool) {\\n        require(_token != s.Necc);\\n        require(!EnumerableSet.contains(s.principles, _token));\\n        IERC20(_token).safeTransfer(\\n            s.DAO,\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n\\n        return true;\\n    }\\n\\n    /* ======== BondDepository ======== */\\n    function initializeBondDepository(\\n        address _ndol,\\n        address _Necc,\\n        address _treasury,\\n        address _DAO\\n    ) external {\\n        onlyGov();\\n        require(_Necc != address(0));\\n        s.Necc = _Necc;\\n        require(_treasury != address(0));\\n        s.treasury = _treasury;\\n        require(_DAO != address(0));\\n        s.DAO = _DAO;\\n        require(_ndol != address(0));\\n        s.ndol = _ndol;\\n    }\\n\\n    /**\\n     *  @notice initializes bond parameters\\n     *  @param _controlVariable uint\\n     *  @param _vestingTerm uint256\\n     *  @param _minimumPrice uint\\n     *  @param _maxPayout uint\\n     *  @param _fee uint\\n     *  @param _maxDebt uint\\n     *  @param _initialDebt uint\\n     */\\n    function initializeBondTerms(\\n        uint256 _controlVariable,\\n        uint256 _minimumPrice,\\n        uint256 _maxPayout,\\n        uint256 _fee,\\n        uint256 _maxDebt,\\n        uint256 _initialDebt,\\n        uint256 _vestingTerm,\\n        bool _isLiquidityBond,\\n        address _priceFeed,\\n        address _principle\\n    ) external {\\n        onlyGov();\\n        EnumerableSet.add(s.principles, _principle);\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        require(\\n            // TODO: Remove >= into ==\\n            s.terms[_principleIndex].controlVariable >= 0,\\n            \\\"Bonds must be initialized from 0\\\"\\n        );\\n        s.terms[_principleIndex] = LibBondStorage.Terms({\\n            controlVariable: _controlVariable,\\n            minimumPrice: _minimumPrice,\\n            maxPayout: _maxPayout,\\n            fee: _fee,\\n            maxDebt: _maxDebt,\\n            vestingTerm: _vestingTerm,\\n            isLiquidityBond: _isLiquidityBond\\n        });\\n        s.totalDebt[_principleIndex] = _initialDebt;\\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\\n        if (_priceFeed != address(0)) {\\n            s.priceFeeds[_principleIndex] = _priceFeed;\\n        }\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice set parameters for new bonds\\n     *  @param _parameter PARAMETER\\n     *  @param _input uint\\n     */\\n    function setBondTerms(\\n        PARAMETER _parameter,\\n        uint256 _input,\\n        address _principle\\n    ) external {\\n        onlyGov();\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (_parameter == PARAMETER.VESTING) {\\n            // 0\\n            require(_input >= 129600, \\\"Vesting must be longer than 36 hours\\\");\\n            s.terms[_principleIndex].vestingTerm = uint256(_input);\\n        } else if (_parameter == PARAMETER.PAYOUT) {\\n            // 1\\n            require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n            s.terms[_principleIndex].maxPayout = _input;\\n        } else if (_parameter == PARAMETER.FEE) {\\n            // 2\\n            require(_input <= 10000, \\\"DAO fee cannot exceed payout\\\");\\n            s.terms[_principleIndex].fee = _input;\\n        } else if (_parameter == PARAMETER.DEBT) {\\n            // 3\\n            s.terms[_principleIndex].maxDebt = _input;\\n        } else if (_parameter == PARAMETER.MINPRICE) {\\n            // 4\\n            s.terms[_principleIndex].minimumPrice = _input;\\n        }\\n    }\\n\\n    function setAdjustment(\\n        bool _addition,\\n        uint256 _delta,\\n        uint256 _timeToTargetInSeconds,\\n        address _principle\\n    ) public {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(\\n            (msg.sender == address(this)) || (msg.sender == ds.contractOwner),\\n            \\\"BondDepository: Invalid contract owner\\\"\\n        );\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        require(\\n            _timeToTargetInSeconds >= s.terms[0].vestingTerm,\\n            \\\"Adjustment: Change too fast\\\"\\n        );\\n\\n        s.bondDepositoryAdjustment[_principleIndex] = LibBondStorage\\n            .BondDepositoryAdjustment({\\n                add: _addition,\\n                delta: _delta,\\n                timeToTarget: _timeToTargetInSeconds,\\n                lastTime: uint256(block.timestamp)\\n            });\\n    }\\n\\n    /* ======== Distributor ======== */\\n    function initializeDistributor(\\n        uint256 _epochLength,\\n        uint256 _nextEpochTimestamp,\\n        address _principle\\n    ) public {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        s.epochLength = _epochLength;\\n        s.nextEpochTimestamp[_principleIndex] = _nextEpochTimestamp;\\n    }\\n\\n    /* ====== POLICY FUNCTIONS ====== */\\n\\n    /**\\n        @notice adds recipient for distributions\\n        @param _recipient address\\n        @param _rewardRate uint\\n     */\\n    function addRecipient(address _recipient, uint256 _rewardRate) external {\\n        onlyGov();\\n        require(_recipient != address(0));\\n        s.info.push(\\n            LibBondStorage.Info({recipient: _recipient, rate: _rewardRate})\\n        );\\n    }\\n\\n    /**\\n        @notice removes recipient for distributions\\n        @param _index uint\\n        @param _recipient address\\n     */\\n    function removeRecipient(uint256 _index, address _recipient) external {\\n        onlyGov();\\n        require(_recipient == s.info[_index].recipient);\\n        s.info[_index].recipient = address(0);\\n        s.info[_index].rate = 0;\\n    }\\n\\n    /**\\n        @notice set adjustment info for a collector's reward rate\\n        @param _index uint\\n        @param _add bool\\n        @param _rate uint\\n        @param _target uint\\n     */\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external {\\n        onlyGov();\\n        s.distributorAdjustments[_index] = LibBondStorage\\n            .DistributorAdjustment({add: _add, rate: _rate, target: _target});\\n    }\\n\\n    /* ======== Staking ======== */\\n\\n    function initializeStaking(\\n        uint256 _firstEpochNumber,\\n        uint32 _firstEpochTime,\\n        address _sNecc,\\n        address _nNecc\\n    ) public {\\n        require(_sNecc != address(0));\\n        require(_nNecc != address(0));\\n        s.sNecc = _sNecc;\\n        s.nNecc = _nNecc;\\n        s.epoch = LibBondStorage.Epoch({\\n            length: s.epochLength,\\n            number: _firstEpochNumber,\\n            endTime: _firstEpochTime,\\n            distribute: 0\\n        });\\n    }\\n\\n    /**\\n        @notice prevent new deposits to address (protection from malicious activity)\\n     */\\n    function toggleDepositLock(address _maliciousDepositor) external {\\n        onlyGov();\\n        s.warmupInfo[_maliciousDepositor].lock = !s\\n            .warmupInfo[_maliciousDepositor]\\n            .lock;\\n    }\\n\\n    /**\\n        @notice sets the contract address for LP staking\\n        @param _contract address\\n     */\\n    function setContract(CONTRACTS _contract, address _address) external {\\n        onlyGov();\\n        if (_contract == CONTRACTS.LOCKER) {\\n            // 2\\n            require(\\n                s.locker == address(0),\\n                \\\"Locker cannot be set more than once\\\"\\n            );\\n            s.locker = _address;\\n        }\\n    }\\n\\n    /**\\n     * @notice set warmup period in epoch's numbers for new stakers\\n     * @param _warmupPeriod uint\\n     */\\n    function setWarmup(uint256 _warmupPeriod) external {\\n        onlyGov();\\n        s.warmupPeriod = _warmupPeriod;\\n    }\\n\\n    function setFarmDistributor(address _farmDistributor) external {\\n        onlyGov();\\n        s.farmDistributor = _farmDistributor;\\n    }\\n}\\n\",\"keccak256\":\"0x8a0a9d7b217c8eb7150936c241ffbf75ece70a4724fe8c446726029e7663a6d0\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a4171a71240b68dc37f64342ab46f8f395e8a4f45b41398121003056549690f\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address sNecc; // token given for staking\\n        address nNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0x99f3f5202ed90e964deaeff2198b2bb9638b6a13c12c792712b299c18180283b\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "_recipient": "address",
          "_rewardRate": "uint"
        }
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address,address)": {
        "params": {
          "_controlVariable": "uint",
          "_fee": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint256"
        }
      },
      "recoverLostToken(address)": {
        "returns": {
          "_0": "bool"
        }
      },
      "removeRecipient(uint256,address)": {
        "params": {
          "_index": "uint",
          "_recipient": "address"
        }
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "params": {
          "_add": "bool",
          "_index": "uint",
          "_rate": "uint",
          "_target": "uint"
        }
      },
      "setBondTerms(uint8,uint256,address)": {
        "params": {
          "_input": "uint",
          "_parameter": "PARAMETER"
        }
      },
      "setContract(uint8,address)": {
        "params": {
          "_contract": "address"
        }
      },
      "setWarmup(uint256)": {
        "params": {
          "_warmupPeriod": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "adds recipient for distributions"
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,address,address)": {
        "notice": "initializes bond parameters"
      },
      "recoverLostToken(address)": {
        "notice": "allow anyone to send lost tokens (excluding principle or Necc) to the DAO"
      },
      "removeRecipient(uint256,address)": {
        "notice": "removes recipient for distributions"
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "notice": "set adjustment info for a collector's reward rate"
      },
      "setBondTerms(uint8,uint256,address)": {
        "notice": "set parameters for new bonds"
      },
      "setContract(uint8,address)": {
        "notice": "sets the contract address for LP staking"
      },
      "setWarmup(uint256)": {
        "notice": "set warmup period in epoch's numbers for new stakers"
      },
      "toggleDepositLock(address)": {
        "notice": "prevent new deposits to address (protection from malicious activity)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7228,
        "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)20942_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)20796_storage)dyn_storage": {
        "base": "t_struct(Info)20796_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)20791_storage)dyn_storage": {
        "base": "t_struct(Payout)20791_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20827_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)20827_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)20854_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)20854_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)20791_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)20791_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)20827_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)20827_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20836_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)20836_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)20803_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)20803_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)20818_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)20818_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)20827_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 20820,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20822,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20824,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20826,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)20836_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 20829,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20831,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20833,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20835,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)20854_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 20847,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20849,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20851,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20853,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)20803_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 20798,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20800,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20802,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)20845_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 20838,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20840,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20842,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20844,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)20796_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 20793,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20795,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)20791_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 20788,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20790,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)20942_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 20856,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20858,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20860,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20862,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 20864,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20866,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 20868,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 20870,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 20873,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 20878,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)20818_storage)"
          },
          {
            "astId": 20883,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20836_storage)"
          },
          {
            "astId": 20890,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20827_storage))"
          },
          {
            "astId": 20894,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20898,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20902,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20906,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20910,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)20796_storage)dyn_storage"
          },
          {
            "astId": 20915,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)20803_storage)"
          },
          {
            "astId": 20918,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)20845_storage"
          },
          {
            "astId": 20920,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 20922,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 20924,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 20926,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 20931,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)20854_storage)"
          },
          {
            "astId": 20933,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 20939,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)20791_storage)dyn_storage)"
          },
          {
            "astId": 20941,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)20818_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 20805,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20807,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20809,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20811,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20813,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20815,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20817,
            "contract": "contracts/facets/Bond/BondConfigFacet.sol:BondConfigFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}