{
  "address": "0xB870f28265b67d9E10B3B7A6d8301b5083dE02B3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ndolAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyNDOL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ndolAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "SellNDOL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "availableReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "buyNDOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ndolAmount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getRedemptionBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getRedemptionCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getRedemptionCollateralUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "getTargetAdjustedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "guaranteedUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ndol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "ndolAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "poolAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "reservedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "sellNDOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xef7f5405987294f2c29b6a1575c43f2818b947862259c4a36ee8036e48162c8d",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xB870f28265b67d9E10B3B7A6d8301b5083dE02B3",
    "transactionIndex": 0,
    "gasUsed": "3185050",
    "logsBloom": "0x
    "blockHash": "0x9dc611dcfff3d390300da75c4b17502df8eb977aa325864ffb17bd16e1d837ca",
    "transactionHash": "0xef7f5405987294f2c29b6a1575c43f2818b947862259c4a36ee8036e48162c8d",
    "logs": [],
    "blockNumber": 9724346,
    "cumulativeGasUsed": "3185050",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b437087eed193de6e0d6e1605137156c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndolAmount\",\"type\":\"uint256\"}],\"name\":\"BuyNDOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SellNDOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"availableReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyNDOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ndolAmount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRedemptionBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRedemptionCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRedemptionCollateralUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"getTargetAdjustedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"guaranteedUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ndol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ndolAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"poolAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reservedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"sellNDOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Vault/VaultNdolFacet.sol\":\"VaultNdolFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        onlyGov();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xc2f5c3feb5ea52eaeca64a71d95026a29e13245cc77dd5f93c384fce6ff8e4d6\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreaseNDOLAmount(address token, uint256 amount);\\n    event DecreaseNDOLAmount(address token, uint256 amount);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    function _getNextFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _intervals = block\\n            .timestamp\\n            .sub(s.lastFundingTimes[_token])\\n            .div(FUNDING_INTERVAL);\\n        uint256 _poolAmount = s.poolAmounts[_token];\\n        if (_poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            FUNDING_RATE_FACTOR\\n                .mul(s.reservedAmounts[_token])\\n                .mul(_intervals)\\n                .div(_poolAmount);\\n    }\\n\\n    function updateCumulativeFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        if (s.lastFundingTimes[_token] == 0) {\\n            s.lastFundingTimes[_token] = block\\n                .timestamp\\n                .div(FUNDING_INTERVAL)\\n                .mul(FUNDING_INTERVAL);\\n            return;\\n        }\\n\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = _getNextFundingRate(s, _token);\\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\\n            fundingRate\\n        );\\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\\n            FUNDING_INTERVAL\\n        );\\n\\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\\n    }\\n\\n    function adjustForDecimals(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 _decimalsDiv = _tokenDiv == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenDiv];\\n        uint256 _decimalsMul = _tokenMul == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenMul];\\n\\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\\n    }\\n\\n    function getMinPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                false,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function getMaxPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                true,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function isTokenWhitelisted(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(s.whitelistedTokens[_token], \\\"Vault: token not whitelisted\\\");\\n    }\\n\\n    function isPoolAmountBelowBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(s.poolAmounts[_token] <= balance, \\\"Vault: invalid increase\\\");\\n    }\\n\\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 prevBalance = s.tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        s.tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function transferOut(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\\n            _amount\\n        );\\n\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function tokenToUsdMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMaxPrice(_token, s.includeAmmPrice)\\n            );\\n    }\\n\\n    function usdToToken(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _usdAmount.mul(10**_decimals).div(_price);\\n    }\\n\\n    function tokenToUsdMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMinPrice(_token, includeAmmPrice)\\n            );\\n    }\\n\\n    function updateTokenBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\\n\\n        s.tokenBalances[_token] = _nextBalance;\\n    }\\n\\n    function validatePosition(uint256 _size, uint256 _collateral)\\n        internal\\n        pure\\n    {\\n        if (_size == 0) {\\n            require(_collateral == 0, \\\"Vault: collateral should be withdrawn\\\");\\n            return;\\n        }\\n        require(\\n            _size >= _collateral,\\n            \\\"Vault: _size must be more than _collateral\\\"\\n        );\\n    }\\n\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {\\n            return;\\n        }\\n        if (msg.sender == address(this)) {\\n            return;\\n        }\\n        revert(\\\"Vault: invalid msg.sender\\\");\\n    }\\n\\n    function validateTokens(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken\\n    ) internal view {\\n        require(_collateralToken == _indexToken, \\\"Vault: mismatched tokens\\\");\\n        isTokenWhitelisted(s, _collateralToken);\\n        isTokenWhitelisted(s, _indexToken);\\n    }\\n\\n    function getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _account,\\n                    _collateralToken,\\n                    _indexToken,\\n                    _isLong\\n                )\\n            );\\n    }\\n\\n    function _collectSwapFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        bool _isBuyingNDOL\\n    ) internal returns (uint256, uint256) {\\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\\n            s,\\n            _token,\\n            SWAP_FEE_BASIS_POINTS\\n        );\\n        uint256 _afterFeeAmount = _amount\\n            .mul(\\n                BASIS_POINTS_DIVISOR.sub(\\n                    _isBuyingNDOL ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\\n                )\\n            )\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\\n\\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\\n\\n        emit CollectSwapFees(\\n            _token,\\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\\n            _feeAmount\\n        );\\n        return (_feeAmount, _afterFeeAmount);\\n    }\\n\\n    function _increasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit IncreasePoolAmount(_token, _amount);\\n\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function _decreasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: poolAmount exceeded\\\"\\n        );\\n        isReservedAmountBelowPoolAmount(s, _token);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function isReservedAmountBelowPoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n    }\\n\\n    function _transferRemainingCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _receiver,\\n        uint256 _usdOut,\\n        uint256 _usdOutAfterFee\\n    ) internal returns (uint256) {\\n        if (_usdOut > 0) {\\n            VaultLib._decreasePoolAmount(\\n                s,\\n                _collateralToken,\\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\\n            );\\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                _usdOutAfterFee\\n            );\\n            VaultLib.transferOut(\\n                s,\\n                _collateralToken,\\n                _amountOutAfterFees,\\n                _receiver\\n            );\\n\\n            return _amountOutAfterFees;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _increaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.ndolAmounts[_token] = s.ndolAmounts[_token].add(_amount);\\n\\n        emit IncreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _decreaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _value = s.ndolAmounts[_token];\\n        // since NDOL can be minted using multiple assets\\n        // it is possible for the NDOL debt for a single asset to be less than zero\\n        // the NDOL debt is capped to zero for this case\\n        if (_value <= _amount) {\\n            s.ndolAmounts[_token] = 0;\\n            emit DecreaseNDOLAmount(_token, _value);\\n            return;\\n        }\\n        s.ndolAmounts[_token] = _value.sub(_amount);\\n\\n        emit DecreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _reduceCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256, uint256) {\\n        LibExchangeStorage.Position storage position = s.positions[\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\\n        ];\\n\\n        uint256 fee = _collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n            (bool _hasProfit, uint256 delta) = _getDelta(\\n                s,\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n            hasProfit = _hasProfit;\\n            // get the proportional change in pnl\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        if (usdOut < fee) {\\n            position.collateral = position.collateral.sub(fee);\\n            uint256 feeTokens = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                fee\\n            );\\n            VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\\n        }\\n\\n        emit UpdatePnl(\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\\n            hasProfit,\\n            adjustedDelta\\n        );\\n\\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\\n    }\\n\\n    function _collectMarginFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n\\n        uint256 fundingFee = _getFundingFee(\\n            s,\\n            _token,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\\n\\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _increaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: insufficient reserve\\\"\\n        );\\n\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\\n\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\\n\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _getDelta(\\n        LibExchangeStorage.Storage storage s,\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) internal view returns (bool, uint256) {\\n        require(_averagePrice > 0, \\\"Vault: invalid _averagePrice\\\");\\n        uint256 price = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n        uint256 priceDelta = _averagePrice > price\\n            ? _averagePrice.sub(price)\\n            : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp >\\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\\n            ? 0\\n            : s.minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function _getFundingFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal view returns (uint256) {\\n        if (_size == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\\n            _entryFundingRate\\n        );\\n        if (fundingRate == 0) {\\n            return 0;\\n        }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = _sizeDelta\\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function _getTargetAdjustedFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _fee\\n    ) internal view returns (uint256) {\\n        uint256 _initialAmount = s.ndolAmounts[_token];\\n        uint256 _targetAmount = _getTargetNDOLAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function _getTargetNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        uint256 _ndolSupply = IERC20(s.ndol).totalSupply();\\n        if (_ndolSupply == 0) {\\n            return 0;\\n        }\\n        uint256 _tokenWeight = s.tokenWeights[_token];\\n\\n        return _ndolSupply.mul(_tokenWeight).div(s.totalTokenWeight);\\n    }\\n}\\n\",\"keccak256\":\"0xd5876017bfebabcbb9fdc25b60cf2a089eaabecdd731ac352bfe763d76423932\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultNdolFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Facet.sol\\\";\\nimport \\\"./VaultLib.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface INDOL {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\\ncontract VaultNdolFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event BuyNDOL(\\n        address account,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 ndolAmount\\n    );\\n    event SellNDOL(\\n        address account,\\n        address token,\\n        uint256 ndolAmount,\\n        uint256 tokenAmount\\n    );\\n    event Swap(\\n        address account,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    function buyNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256)\\n    {\\n        contractEntered();\\n        require(s.isInitialized, \\\"Vault: not initialized\\\");\\n        VaultLib.isTokenWhitelisted(s, _token);\\n        uint256 _price = VaultLib.getMinPrice(_token, s.includeAmmPrice);\\n\\n        uint256 _tokenAmount = VaultLib.transferIn(s, _token);\\n        require(_tokenAmount > 0, \\\"Vault: invalid tokenAmount\\\");\\n\\n        VaultLib.updateCumulativeFundingRate(s, _token);\\n\\n        (, uint256 _amountAfterFees) = VaultLib._collectSwapFees(\\n            s,\\n            _token,\\n            _tokenAmount,\\n            true\\n        );\\n\\n        uint256 _ndolAmount = VaultLib.adjustForDecimals(\\n            s,\\n            _amountAfterFees.mul(_price).div(PRICE_PRECISION),\\n            _token,\\n            s.ndol\\n        );\\n\\n        require(_ndolAmount > 0, \\\"Vault: invalid ndolAmount\\\");\\n\\n        VaultLib._increasePoolAmount(s, _token, _amountAfterFees);\\n        VaultLib._increaseNDOLAmount(s, _token, _ndolAmount);\\n\\n        emit BuyNDOL(_receiver, _token, _tokenAmount, _ndolAmount);\\n\\n        INDOL(s.ndol).mint(_receiver, _ndolAmount);\\n\\n        contractExited();\\n\\n        return _ndolAmount;\\n    }\\n\\n    function sellNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256)\\n    {\\n        contractEntered();\\n        VaultLib.isTokenWhitelisted(s, _token);\\n\\n        uint256 _ndolAmount = VaultLib.transferIn(s, s.ndol);\\n        require(_ndolAmount > 0, \\\"Vault: invalid ndolAmount\\\");\\n\\n        VaultLib.updateCumulativeFundingRate(s, _token);\\n\\n        uint256 _redemptionAmount = getRedemptionAmount(_token, _ndolAmount);\\n        require(_redemptionAmount > 0, \\\"Vault: invalid redemptionAmount\\\");\\n\\n        VaultLib._decreasePoolAmount(s, _token, _redemptionAmount);\\n        VaultLib._decreaseNDOLAmount(s, _token, _ndolAmount);\\n\\n        INDOL(s.ndol).burn(address(this), _ndolAmount);\\n\\n        // the _transferIn call increased the value of tokenBalances[ndol]\\n        // usually decreases in token balances are synced by calling _transferOut\\n        // however, for ndol, the tokens are burnt, so updateTokenBalance should\\n        // be manually called to record the decrease in tokens\\n        VaultLib.updateTokenBalance(s, s.ndol);\\n\\n        (, uint256 _tokenAmount) = VaultLib._collectSwapFees(\\n            s,\\n            _token,\\n            _redemptionAmount,\\n            false\\n        );\\n        require(_tokenAmount > 0, \\\"Vault: invalid tokenAmount\\\");\\n\\n        emit SellNDOL(_receiver, _token, _ndolAmount, _tokenAmount);\\n\\n        VaultLib.transferOut(s, _token, _tokenAmount, _receiver);\\n\\n        contractExited();\\n\\n        return _tokenAmount;\\n    }\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256) {\\n        contractEntered();\\n        require(s.isInitialized, \\\"Vault: not initialized\\\");\\n        require(_tokenIn != _tokenOut, \\\"Vault: invalid tokens\\\");\\n        VaultLib.isTokenWhitelisted(s, _tokenIn);\\n        VaultLib.isTokenWhitelisted(s, _tokenOut);\\n\\n        VaultLib.updateCumulativeFundingRate(s, _tokenIn);\\n        VaultLib.updateCumulativeFundingRate(s, _tokenOut);\\n\\n        uint256 amountIn = VaultLib.transferIn(s, _tokenIn);\\n        require(amountIn > 0, \\\"Vault: invalid amountIn\\\");\\n\\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\\n\\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\\n        amountOut = VaultLib.adjustForDecimals(\\n            s,\\n            amountOut,\\n            _tokenIn,\\n            _tokenOut\\n        );\\n        (, uint256 amountOutAfterFees) = VaultLib._collectSwapFees(\\n            s,\\n            _tokenOut,\\n            amountOut,\\n            false\\n        );\\n\\n        // adjust ndolAmounts by the same ndolAmount as debt is shifted between the assets\\n        uint256 ndolAmount = amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        ndolAmount = VaultLib.adjustForDecimals(\\n            s,\\n            ndolAmount,\\n            _tokenIn,\\n            s.ndol\\n        );\\n\\n        VaultLib._increaseNDOLAmount(s, _tokenIn, ndolAmount);\\n        VaultLib._decreaseNDOLAmount(s, _tokenOut, ndolAmount);\\n\\n        VaultLib._increasePoolAmount(s, _tokenIn, amountIn);\\n        VaultLib._decreasePoolAmount(s, _tokenOut, amountOut);\\n\\n        emit Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOutAfterFees);\\n\\n        VaultLib.transferOut(s, _tokenOut, amountOutAfterFees, _receiver);\\n\\n        contractExited();\\n\\n        return amountOutAfterFees;\\n    }\\n\\n    function getRedemptionBasisPoints(address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s.redemptionBasisPoints[_token];\\n    }\\n\\n    function poolAmounts(address _token) public view returns (uint256) {\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function reservedAmounts(address _token) public view returns (uint256) {\\n        return s.reservedAmounts[_token];\\n    }\\n\\n    function ndolAmounts(address _token) public view returns (uint256) {\\n        return s.ndolAmounts[_token];\\n    }\\n\\n    function feeReserves(address _token) public view returns (uint256) {\\n        return s.feeReserves[_token];\\n    }\\n\\n    function guaranteedUsd(address _token) public view returns (uint256) {\\n        return s.guaranteedUsd[_token];\\n    }\\n\\n    function getRedemptionCollateral(address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _collateral = VaultLib.usdToTokenMin(\\n            s,\\n            _token,\\n            s.guaranteedUsd[_token]\\n        );\\n        return\\n            _collateral.add(s.poolAmounts[_token]).sub(\\n                s.reservedAmounts[_token]\\n            );\\n    }\\n\\n    function getRedemptionCollateralUsd(address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultLib.tokenToUsdMin(s, _token, getRedemptionCollateral(_token));\\n    }\\n\\n    function availableReserve(address _token) public view returns (uint256) {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        return _balance.sub(s.reservedAmounts[_token]);\\n    }\\n\\n    function getRedemptionAmount(address _token, uint256 _ndolAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _price = VaultLib.getMaxPrice(_token, s.includeAmmPrice);\\n        return\\n            VaultLib.adjustForDecimals(\\n                s,\\n                _ndolAmount.mul(PRICE_PRECISION).div(_price),\\n                s.ndol,\\n                _token\\n            );\\n    }\\n\\n    function getTargetAdjustedFee(address _token, uint256 _fee)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _initialAmount = s.ndolAmounts[_token];\\n        uint256 _targetAmount = VaultLib._getTargetNDOLAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function ndol() public view returns (address) {\\n        return s.ndol;\\n    }\\n\\n    function swapFeeBasisPoints() public pure returns (uint256) {\\n        return SWAP_FEE_BASIS_POINTS;\\n    }\\n}\\n\",\"keccak256\":\"0x2db420a508cfc567d6020dd195fb362865a95699a3c6d6a5a5cf355bb8939d5e\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVaultPriceFeed {\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf24961f2f3cdb035b8b7a14596d22443f44bd141f4bd9725097d54dbdb22e5fa\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NDOL_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.exchange.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address ndol;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) ndolAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNDOLMinted;\\n        mapping(address => mapping(address => int256)) ndolMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xb93d4fae1622e4ef47346ad61e3c329fceaa52fa2f57f4dfb29fdc22fce1ab33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060000160006101000a81548160ff0219169083151502179055506138c68061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a22f239211610097578063b319ce0f11610066578063b319ce0f14610321578063c3c7b9e914610351578063e62b398014610381578063f07456ce146103b157610100565b8063a22f239214610285578063aa406656146102a3578063ac1a91e4146102c1578063b136ca49146102f157610100565b80637c1fb317116100d35780637c1fb317146101c5578063815b3c74146101f55780639331621214610225578063960e9ec71461025557610100565b80631ce9cb8f1461010557806329ff9615146101355780632c668ec11461016557806352f55eed14610195575b600080fd5b61011f600480360381019061011a9190612b4f565b6103e1565b60405161012c9190612b95565b60405180910390f35b61014f600480360381019061014a9190612b4f565b61042c565b60405161015c9190612b95565b60405180910390f35b61017f600480360381019061017a9190612bdc565b610449565b60405161018c9190612b95565b60405180910390f35b6101af60048036038101906101aa9190612b4f565b6104d6565b6040516101bc9190612b95565b60405180910390f35b6101df60048036038101906101da9190612c1c565b610521565b6040516101ec9190612b95565b60405180910390f35b61020f600480360381019061020a9190612b4f565b610795565b60405161021c9190612b95565b60405180910390f35b61023f600480360381019061023a9190612c5c565b610871565b60405161024c9190612b95565b60405180910390f35b61026f600480360381019061026a9190612b4f565b610b44565b60405161027c9190612b95565b60405180910390f35b61028d610b8f565b60405161029a9190612b95565b60405180910390f35b6102ab610b98565b6040516102b89190612cbe565b60405180910390f35b6102db60048036038101906102d69190612c1c565b610bc4565b6040516102e89190612b95565b60405180910390f35b61030b60048036038101906103069190612b4f565b610e62565b6040516103189190612b95565b60405180910390f35b61033b60048036038101906103369190612bdc565b610f66565b6040516103489190612b95565b60405180910390f35b61036b60048036038101906103669190612b4f565b61101d565b6040516103789190612b95565b60405180910390f35b61039b60048036038101906103969190612b4f565b611068565b6040516103a89190612b95565b60405180910390f35b6103cb60048036038101906103c69190612b4f565b6110b3565b6040516103d89190612b95565b60405180910390f35b60008060110160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061044260008361043d85610e62565b6110fe565b9050919050565b60008061046884600060020160149054906101000a900460ff166111b3565b90506104cd60006104a1836104936c0c9f2c9cd04674edea400000008861123c90919063ffffffff16565b61125290919063ffffffff16565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611268565b91505092915050565b600080600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061052b6113fc565b61053660008461146d565b600061056760008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114ff565b9050600081116105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390612d36565b60405180910390fd5b6105b7600085611627565b60006105c38583610449565b905060008111610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612da2565b60405180910390fd5b610614600086836118db565b610620600086846119fd565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30846040518363ffffffff1660e01b8152600401610680929190612dc2565b600060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050506106e160008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b68565b60006106f1600087846000611c31565b91505060008111610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90612e37565b60405180910390fd5b7f6594c085ce57a04be39674da8f13d46fc935b31a90473a5e89173d32e8f3c5258587858460405161076c9493929190612e57565b60405180910390a16107816000878388611d97565b610789611e99565b80935050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d19190612cbe565b602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190612eb1565b90506108696000600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611eb890919063ffffffff16565b915050919050565b600061087b6113fc565b600060020160159054906101000a900460ff166108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c490612f2a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612f96565b60405180910390fd5b61094760008561146d565b61095260008461146d565b61095d600085611627565b610968600084611627565b60006109756000866114ff565b9050600081116109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190613002565b60405180910390fd5b60006109d886600060020160149054906101000a900460ff16611ece565b905060006109f886600060020160149054906101000a900460ff166111b3565b90506000610a2182610a13858761123c90919063ffffffff16565b61125290919063ffffffff16565b9050610a306000828a8a611268565b90506000610a42600089846000611c31565b9150506000610a796c0c9f2c9cd04674edea40000000610a6b878961123c90919063ffffffff16565b61125290919063ffffffff16565b9050610aad6000828c600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611268565b9050610abb60008b83611f57565b610ac760008a836119fd565b610ad360008b8861202e565b50610ae060008a856118db565b7fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062888b8b8986604051610b17959493929190613022565b60405180910390a1610b2c60008a848b611d97565b610b34611e99565b8196505050505050509392505050565b600080600b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601e905090565b60008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610bce6113fc565b600060020160159054906101000a900460ff16610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1790612f2a565b60405180910390fd5b610c2b60008461146d565b6000610c4984600060020160149054906101000a900460ff16611ece565b90506000610c586000866114ff565b905060008111610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9490612e37565b60405180910390fd5b610ca8600086611627565b6000610cb8600087846001611c31565b9150506000610d206000610cf46c0c9f2c9cd04674edea40000000610ce6888761123c90919063ffffffff16565b61125290919063ffffffff16565b89600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611268565b905060008111610d65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5c90612d36565b60405180910390fd5b610d716000888461202e565b50610d7e60008883611f57565b7f6dfa09b69ab61b0cb6354b7d2934207d73ea106cba99e489a1a2728862009d9186888584604051610db39493929190612e57565b60405180910390a1600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1987836040518363ffffffff1660e01b8152600401610e1b929190612dc2565b600060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b50505050610e55611e99565b8094505050505092915050565b600080610eb36000846000600e0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612157565b9050610f5e6000600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f506000600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461219a90919063ffffffff16565b611eb890919063ffffffff16565b915050919050565b6000806000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610fbb6000866121b0565b90506000811480610fcc5750600082145b15610fdb578392505050611017565b80821115610fed578392505050611017565b61101281611004848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b600080600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600e0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082141561111157600090506111ac565b600061112e848660020160149054906101000a900460ff16611ece565b905060008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506111a781600a61118691906131d7565b611199848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b9392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b81526004016111f39392919061323d565b602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612eb1565b905092915050565b6000818361124a9190613274565b905092915050565b6000818361126091906132fd565b905092915050565b6000808560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611309578560070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461130c565b60125b905060008660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146113ae578660070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113b1565b60125b90506113f082600a6113c391906131d7565b6113e283600a6113d391906131d7565b8961123c90919063ffffffff16565b61125290919063ffffffff16565b92505050949350505050565b6000800160009054906101000a900460ff161561144e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114459061337a565b60405180910390fd5b60016000800160006101000a81548160ff021916908315150217905550565b8160050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f2906133e6565b60405180910390fd5b5050565b60008083600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115819190612cbe565b602060405180830381865afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c29190612eb1565b90508085600a0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161d8282611eb890919063ffffffff16565b9250505092915050565b60008260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156116e45761169a61708061168c6170804261125290919063ffffffff16565b61123c90919063ffffffff16565b8260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118d7565b4261173b6170808460100160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b1115611746576118d7565b600061175283836122d5565b90506117a88184600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b83600f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118166170806118086170804261125290919063ffffffff16565b61123c90919063ffffffff16565b8360100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab8284600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516118cd929190612dc2565b60405180910390a1505b5050565b611966816040518060400160405280601a81526020017f5661756c743a20706f6f6c416d6f756e7420657863656564656400000000000081525085600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124889092919063ffffffff16565b83600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119b583836124dd565b6119bf83836125a6565b7f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb082826040516119f0929190612dc2565b60405180910390a1505050565b600083600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818111611ad057600084600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f448c2068e908f5ee25d962e13bc05be4d5d07b1a3845458d3b927d843df4b2ff8382604051611ac2929190612dc2565b60405180910390a150611b63565b611ae38282611eb890919063ffffffff16565b84600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f448c2068e908f5ee25d962e13bc05be4d5d07b1a3845458d3b927d843df4b2ff8383604051611b59929190612dc2565b60405180910390a1505b505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ba39190612cbe565b602060405180830381865afa158015611bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be49190612eb1565b90508083600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000806000611c428787601e6126ad565b90506000611c8e612710611c80611c7188611c5e57601e611c60565b855b612710611eb890919063ffffffff16565b8961123c90919063ffffffff16565b61125290919063ffffffff16565b90506000611ca58288611eb890919063ffffffff16565b9050611cfb818a60110160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b8960110160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b88611d6d8b8b856110fe565b83604051611d7d93929190613406565b60405180910390a180829450945050505094509492505050565b611e23828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dd49190612cbe565b602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e159190612eb1565b611eb890919063ffffffff16565b84600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e9381838573ffffffffffffffffffffffffffffffffffffffff166127639092919063ffffffff16565b50505050565b60008060000160006101000a81548160ff021916908315150217905550565b60008183611ec6919061343d565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401611f0e9392919061323d565b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612eb1565b905092915050565b611fab8184600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b83600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f71258b0cda4926ee0d520b5f10d744d448b8a0fca6c03a7aab232331fc65ad5b8282604051612021929190612dc2565b60405180910390a1505050565b60006120848285600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b84600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120d384846125a6565b7f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f47378383604051612104929190612dc2565b60405180910390a183600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b60008082141561216a5760009050612193565b61219084848461218b878960020160149054906101000a900460ff166111b3565b6127e9565b90505b9392505050565b600081836121a89190613471565b905092915050565b6000808360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122469190612eb1565b9050600081141561225b5760009150506122cf565b60008460120160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506122ca85601301546122bc838561123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b60004261232e6170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b111561233d5760009050612482565b60006123a76170806123998660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611eb890919063ffffffff16565b61125290919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561240357600092505050612482565b61247d8161246f8461246189600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461025861123c90919063ffffffff16565b61123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b60008383111582906124d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c7919061354f565b60405180910390fd5b5082840390509392505050565b81600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156125a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612599906135bd565b60405180910390fd5b5050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125e19190612cbe565b602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126229190612eb1565b90508083600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90613629565b60405180910390fd5b505050565b60008084600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061270086866121b0565b905060008114806127115750600082145b1561272057839250505061275c565b8082111561273257839250505061275c565b61275781612749848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b9392505050565b6127e48363a9059cbb60e01b8484604051602401612782929190612dc2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061287f565b505050565b6000808314156127fc5760009050612877565b60008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506128738361286583600a61285691906131d7565b8761123c90919063ffffffff16565b61125290919063ffffffff16565b9150505b949350505050565b60006128e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129469092919063ffffffff16565b905060008151111561294157808060200190518101906129019190613675565b612940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293790613714565b60405180910390fd5b5b505050565b6060612955848460008561295e565b90509392505050565b6060824710156129a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299a906137a6565b60405180910390fd5b6129ac85612a72565b6129eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e290613812565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a149190613879565b60006040518083038185875af1925050503d8060008114612a51576040519150601f19603f3d011682016040523d82523d6000602084013e612a56565b606091505b5091509150612a66828286612a85565b92505050949350505050565b600080823b905060008111915050919050565b60608315612a9557829050612ae5565b600083511115612aa85782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adc919061354f565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b1c82612af1565b9050919050565b612b2c81612b11565b8114612b3757600080fd5b50565b600081359050612b4981612b23565b92915050565b600060208284031215612b6557612b64612aec565b5b6000612b7384828501612b3a565b91505092915050565b6000819050919050565b612b8f81612b7c565b82525050565b6000602082019050612baa6000830184612b86565b92915050565b612bb981612b7c565b8114612bc457600080fd5b50565b600081359050612bd681612bb0565b92915050565b60008060408385031215612bf357612bf2612aec565b5b6000612c0185828601612b3a565b9250506020612c1285828601612bc7565b9150509250929050565b60008060408385031215612c3357612c32612aec565b5b6000612c4185828601612b3a565b9250506020612c5285828601612b3a565b9150509250929050565b600080600060608486031215612c7557612c74612aec565b5b6000612c8386828701612b3a565b9350506020612c9486828701612b3a565b9250506040612ca586828701612b3a565b9150509250925092565b612cb881612b11565b82525050565b6000602082019050612cd36000830184612caf565b92915050565b600082825260208201905092915050565b7f5661756c743a20696e76616c6964206e646f6c416d6f756e7400000000000000600082015250565b6000612d20601983612cd9565b9150612d2b82612cea565b602082019050919050565b60006020820190508181036000830152612d4f81612d13565b9050919050565b7f5661756c743a20696e76616c696420726564656d7074696f6e416d6f756e7400600082015250565b6000612d8c601f83612cd9565b9150612d9782612d56565b602082019050919050565b60006020820190508181036000830152612dbb81612d7f565b9050919050565b6000604082019050612dd76000830185612caf565b612de46020830184612b86565b9392505050565b7f5661756c743a20696e76616c696420746f6b656e416d6f756e74000000000000600082015250565b6000612e21601a83612cd9565b9150612e2c82612deb565b602082019050919050565b60006020820190508181036000830152612e5081612e14565b9050919050565b6000608082019050612e6c6000830187612caf565b612e796020830186612caf565b612e866040830185612b86565b612e936060830184612b86565b95945050505050565b600081519050612eab81612bb0565b92915050565b600060208284031215612ec757612ec6612aec565b5b6000612ed584828501612e9c565b91505092915050565b7f5661756c743a206e6f7420696e697469616c697a656400000000000000000000600082015250565b6000612f14601683612cd9565b9150612f1f82612ede565b602082019050919050565b60006020820190508181036000830152612f4381612f07565b9050919050565b7f5661756c743a20696e76616c696420746f6b656e730000000000000000000000600082015250565b6000612f80601583612cd9565b9150612f8b82612f4a565b602082019050919050565b60006020820190508181036000830152612faf81612f73565b9050919050565b7f5661756c743a20696e76616c696420616d6f756e74496e000000000000000000600082015250565b6000612fec601783612cd9565b9150612ff782612fb6565b602082019050919050565b6000602082019050818103600083015261301b81612fdf565b9050919050565b600060a0820190506130376000830188612caf565b6130446020830187612caf565b6130516040830186612caf565b61305e6060830185612b86565b61306b6080830184612b86565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156130fb578086048111156130d7576130d6613075565b5b60018516156130e65780820291505b80810290506130f4856130a4565b94506130bb565b94509492505050565b60008261311457600190506131d0565b8161312257600090506131d0565b8160018114613138576002811461314257613171565b60019150506131d0565b60ff84111561315457613153613075565b5b8360020a91508482111561316b5761316a613075565b5b506131d0565b5060208310610133831016604e8410600b84101617156131a65782820a9050838111156131a1576131a0613075565b5b6131d0565b6131b384848460016130b1565b925090508184048111156131ca576131c9613075565b5b81810290505b9392505050565b60006131e282612b7c565b91506131ed83612b7c565b925061321a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613104565b905092915050565b60008115159050919050565b61323781613222565b82525050565b60006060820190506132526000830186612caf565b61325f602083018561322e565b61326c604083018461322e565b949350505050565b600061327f82612b7c565b915061328a83612b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132c3576132c2613075565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061330882612b7c565b915061331383612b7c565b925082613323576133226132ce565b5b828204905092915050565b7f436f6e747261637420616c726561647920656e74657265640000000000000000600082015250565b6000613364601883612cd9565b915061336f8261332e565b602082019050919050565b6000602082019050818103600083015261339381613357565b9050919050565b7f5661756c743a20746f6b656e206e6f742077686974656c697374656400000000600082015250565b60006133d0601c83612cd9565b91506133db8261339a565b602082019050919050565b600060208201905081810360008301526133ff816133c3565b9050919050565b600060608201905061341b6000830186612caf565b6134286020830185612b86565b6134356040830184612b86565b949350505050565b600061344882612b7c565b915061345383612b7c565b92508282101561346657613465613075565b5b828203905092915050565b600061347c82612b7c565b915061348783612b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134bc576134bb613075565b5b828201905092915050565b600081519050919050565b60005b838110156134f05780820151818401526020810190506134d5565b838111156134ff576000848401525b50505050565b6000601f19601f8301169050919050565b6000613521826134c7565b61352b8185612cd9565b935061353b8185602086016134d2565b61354481613505565b840191505092915050565b600060208201905081810360008301526135698184613516565b905092915050565b7f5661756c743a2072657365727665206578636565647320706f6f6c0000000000600082015250565b60006135a7601b83612cd9565b91506135b282613571565b602082019050919050565b600060208201905081810360008301526135d68161359a565b9050919050565b7f5661756c743a20696e76616c696420696e637265617365000000000000000000600082015250565b6000613613601783612cd9565b915061361e826135dd565b602082019050919050565b6000602082019050818103600083015261364281613606565b9050919050565b61365281613222565b811461365d57600080fd5b50565b60008151905061366f81613649565b92915050565b60006020828403121561368b5761368a612aec565b5b600061369984828501613660565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006136fe602a83612cd9565b9150613709826136a2565b604082019050919050565b6000602082019050818103600083015261372d816136f1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613790602683612cd9565b915061379b82613734565b604082019050919050565b600060208201905081810360008301526137bf81613783565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006137fc601d83612cd9565b9150613807826137c6565b602082019050919050565b6000602082019050818103600083015261382b816137ef565b9050919050565b600081519050919050565b600081905092915050565b600061385382613832565b61385d818561383d565b935061386d8185602086016134d2565b80840191505092915050565b60006138858284613848565b91508190509291505056fea2646970667358221220a7d76f2c33b057630b53f056f2fba1e6a90b399a8f87ca81284b60710908898564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063a22f239211610097578063b319ce0f11610066578063b319ce0f14610321578063c3c7b9e914610351578063e62b398014610381578063f07456ce146103b157610100565b8063a22f239214610285578063aa406656146102a3578063ac1a91e4146102c1578063b136ca49146102f157610100565b80637c1fb317116100d35780637c1fb317146101c5578063815b3c74146101f55780639331621214610225578063960e9ec71461025557610100565b80631ce9cb8f1461010557806329ff9615146101355780632c668ec11461016557806352f55eed14610195575b600080fd5b61011f600480360381019061011a9190612b4f565b6103e1565b60405161012c9190612b95565b60405180910390f35b61014f600480360381019061014a9190612b4f565b61042c565b60405161015c9190612b95565b60405180910390f35b61017f600480360381019061017a9190612bdc565b610449565b60405161018c9190612b95565b60405180910390f35b6101af60048036038101906101aa9190612b4f565b6104d6565b6040516101bc9190612b95565b60405180910390f35b6101df60048036038101906101da9190612c1c565b610521565b6040516101ec9190612b95565b60405180910390f35b61020f600480360381019061020a9190612b4f565b610795565b60405161021c9190612b95565b60405180910390f35b61023f600480360381019061023a9190612c5c565b610871565b60405161024c9190612b95565b60405180910390f35b61026f600480360381019061026a9190612b4f565b610b44565b60405161027c9190612b95565b60405180910390f35b61028d610b8f565b60405161029a9190612b95565b60405180910390f35b6102ab610b98565b6040516102b89190612cbe565b60405180910390f35b6102db60048036038101906102d69190612c1c565b610bc4565b6040516102e89190612b95565b60405180910390f35b61030b60048036038101906103069190612b4f565b610e62565b6040516103189190612b95565b60405180910390f35b61033b60048036038101906103369190612bdc565b610f66565b6040516103489190612b95565b60405180910390f35b61036b60048036038101906103669190612b4f565b61101d565b6040516103789190612b95565b60405180910390f35b61039b60048036038101906103969190612b4f565b611068565b6040516103a89190612b95565b60405180910390f35b6103cb60048036038101906103c69190612b4f565b6110b3565b6040516103d89190612b95565b60405180910390f35b60008060110160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061044260008361043d85610e62565b6110fe565b9050919050565b60008061046884600060020160149054906101000a900460ff166111b3565b90506104cd60006104a1836104936c0c9f2c9cd04674edea400000008861123c90919063ffffffff16565b61125290919063ffffffff16565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611268565b91505092915050565b600080600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061052b6113fc565b61053660008461146d565b600061056760008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114ff565b9050600081116105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390612d36565b60405180910390fd5b6105b7600085611627565b60006105c38583610449565b905060008111610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90612da2565b60405180910390fd5b610614600086836118db565b610620600086846119fd565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30846040518363ffffffff1660e01b8152600401610680929190612dc2565b600060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050506106e160008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b68565b60006106f1600087846000611c31565b91505060008111610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90612e37565b60405180910390fd5b7f6594c085ce57a04be39674da8f13d46fc935b31a90473a5e89173d32e8f3c5258587858460405161076c9493929190612e57565b60405180910390a16107816000878388611d97565b610789611e99565b80935050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d19190612cbe565b602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190612eb1565b90506108696000600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611eb890919063ffffffff16565b915050919050565b600061087b6113fc565b600060020160159054906101000a900460ff166108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c490612f2a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612f96565b60405180910390fd5b61094760008561146d565b61095260008461146d565b61095d600085611627565b610968600084611627565b60006109756000866114ff565b9050600081116109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190613002565b60405180910390fd5b60006109d886600060020160149054906101000a900460ff16611ece565b905060006109f886600060020160149054906101000a900460ff166111b3565b90506000610a2182610a13858761123c90919063ffffffff16565b61125290919063ffffffff16565b9050610a306000828a8a611268565b90506000610a42600089846000611c31565b9150506000610a796c0c9f2c9cd04674edea40000000610a6b878961123c90919063ffffffff16565b61125290919063ffffffff16565b9050610aad6000828c600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611268565b9050610abb60008b83611f57565b610ac760008a836119fd565b610ad360008b8861202e565b50610ae060008a856118db565b7fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062888b8b8986604051610b17959493929190613022565b60405180910390a1610b2c60008a848b611d97565b610b34611e99565b8196505050505050509392505050565b600080600b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000601e905090565b60008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610bce6113fc565b600060020160159054906101000a900460ff16610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1790612f2a565b60405180910390fd5b610c2b60008461146d565b6000610c4984600060020160149054906101000a900460ff16611ece565b90506000610c586000866114ff565b905060008111610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9490612e37565b60405180910390fd5b610ca8600086611627565b6000610cb8600087846001611c31565b9150506000610d206000610cf46c0c9f2c9cd04674edea40000000610ce6888761123c90919063ffffffff16565b61125290919063ffffffff16565b89600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611268565b905060008111610d65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5c90612d36565b60405180910390fd5b610d716000888461202e565b50610d7e60008883611f57565b7f6dfa09b69ab61b0cb6354b7d2934207d73ea106cba99e489a1a2728862009d9186888584604051610db39493929190612e57565b60405180910390a1600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1987836040518363ffffffff1660e01b8152600401610e1b929190612dc2565b600060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b50505050610e55611e99565b8094505050505092915050565b600080610eb36000846000600e0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612157565b9050610f5e6000600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f506000600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548461219a90919063ffffffff16565b611eb890919063ffffffff16565b915050919050565b6000806000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610fbb6000866121b0565b90506000811480610fcc5750600082145b15610fdb578392505050611017565b80821115610fed578392505050611017565b61101281611004848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b600080600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600e0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082141561111157600090506111ac565b600061112e848660020160149054906101000a900460ff16611ece565b905060008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506111a781600a61118691906131d7565b611199848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b9392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b81526004016111f39392919061323d565b602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612eb1565b905092915050565b6000818361124a9190613274565b905092915050565b6000818361126091906132fd565b905092915050565b6000808560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611309578560070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461130c565b60125b905060008660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146113ae578660070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113b1565b60125b90506113f082600a6113c391906131d7565b6113e283600a6113d391906131d7565b8961123c90919063ffffffff16565b61125290919063ffffffff16565b92505050949350505050565b6000800160009054906101000a900460ff161561144e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114459061337a565b60405180910390fd5b60016000800160006101000a81548160ff021916908315150217905550565b8160050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f2906133e6565b60405180910390fd5b5050565b60008083600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115819190612cbe565b602060405180830381865afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c29190612eb1565b90508085600a0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161d8282611eb890919063ffffffff16565b9250505092915050565b60008260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156116e45761169a61708061168c6170804261125290919063ffffffff16565b61123c90919063ffffffff16565b8260100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118d7565b4261173b6170808460100160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b1115611746576118d7565b600061175283836122d5565b90506117a88184600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b83600f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118166170806118086170804261125290919063ffffffff16565b61123c90919063ffffffff16565b8360100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab8284600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516118cd929190612dc2565b60405180910390a1505b5050565b611966816040518060400160405280601a81526020017f5661756c743a20706f6f6c416d6f756e7420657863656564656400000000000081525085600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124889092919063ffffffff16565b83600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119b583836124dd565b6119bf83836125a6565b7f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb082826040516119f0929190612dc2565b60405180910390a1505050565b600083600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818111611ad057600084600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f448c2068e908f5ee25d962e13bc05be4d5d07b1a3845458d3b927d843df4b2ff8382604051611ac2929190612dc2565b60405180910390a150611b63565b611ae38282611eb890919063ffffffff16565b84600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f448c2068e908f5ee25d962e13bc05be4d5d07b1a3845458d3b927d843df4b2ff8383604051611b59929190612dc2565b60405180910390a1505b505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ba39190612cbe565b602060405180830381865afa158015611bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be49190612eb1565b90508083600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000806000611c428787601e6126ad565b90506000611c8e612710611c80611c7188611c5e57601e611c60565b855b612710611eb890919063ffffffff16565b8961123c90919063ffffffff16565b61125290919063ffffffff16565b90506000611ca58288611eb890919063ffffffff16565b9050611cfb818a60110160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b8960110160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b88611d6d8b8b856110fe565b83604051611d7d93929190613406565b60405180910390a180829450945050505094509492505050565b611e23828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dd49190612cbe565b602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e159190612eb1565b611eb890919063ffffffff16565b84600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e9381838573ffffffffffffffffffffffffffffffffffffffff166127639092919063ffffffff16565b50505050565b60008060000160006101000a81548160ff021916908315150217905550565b60008183611ec6919061343d565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401611f0e9392919061323d565b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612eb1565b905092915050565b611fab8184600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b83600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f71258b0cda4926ee0d520b5f10d744d448b8a0fca6c03a7aab232331fc65ad5b8282604051612021929190612dc2565b60405180910390a1505050565b60006120848285600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b84600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120d384846125a6565b7f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f47378383604051612104929190612dc2565b60405180910390a183600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b60008082141561216a5760009050612193565b61219084848461218b878960020160149054906101000a900460ff166111b3565b6127e9565b90505b9392505050565b600081836121a89190613471565b905092915050565b6000808360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122469190612eb1565b9050600081141561225b5760009150506122cf565b60008460120160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506122ca85601301546122bc838561123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b60004261232e6170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461219a90919063ffffffff16565b111561233d5760009050612482565b60006123a76170806123998660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611eb890919063ffffffff16565b61125290919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561240357600092505050612482565b61247d8161246f8461246189600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461025861123c90919063ffffffff16565b61123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b92915050565b60008383111582906124d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c7919061354f565b60405180910390fd5b5082840390509392505050565b81600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156125a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612599906135bd565b60405180910390fd5b5050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125e19190612cbe565b602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126229190612eb1565b90508083600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90613629565b60405180910390fd5b505050565b60008084600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061270086866121b0565b905060008114806127115750600082145b1561272057839250505061275c565b8082111561273257839250505061275c565b61275781612749848761123c90919063ffffffff16565b61125290919063ffffffff16565b925050505b9392505050565b6127e48363a9059cbb60e01b8484604051602401612782929190612dc2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061287f565b505050565b6000808314156127fc5760009050612877565b60008560070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506128738361286583600a61285691906131d7565b8761123c90919063ffffffff16565b61125290919063ffffffff16565b9150505b949350505050565b60006128e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129469092919063ffffffff16565b905060008151111561294157808060200190518101906129019190613675565b612940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293790613714565b60405180910390fd5b5b505050565b6060612955848460008561295e565b90509392505050565b6060824710156129a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299a906137a6565b60405180910390fd5b6129ac85612a72565b6129eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e290613812565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a149190613879565b60006040518083038185875af1925050503d8060008114612a51576040519150601f19603f3d011682016040523d82523d6000602084013e612a56565b606091505b5091509150612a66828286612a85565b92505050949350505050565b600080823b905060008111915050919050565b60608315612a9557829050612ae5565b600083511115612aa85782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adc919061354f565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b1c82612af1565b9050919050565b612b2c81612b11565b8114612b3757600080fd5b50565b600081359050612b4981612b23565b92915050565b600060208284031215612b6557612b64612aec565b5b6000612b7384828501612b3a565b91505092915050565b6000819050919050565b612b8f81612b7c565b82525050565b6000602082019050612baa6000830184612b86565b92915050565b612bb981612b7c565b8114612bc457600080fd5b50565b600081359050612bd681612bb0565b92915050565b60008060408385031215612bf357612bf2612aec565b5b6000612c0185828601612b3a565b9250506020612c1285828601612bc7565b9150509250929050565b60008060408385031215612c3357612c32612aec565b5b6000612c4185828601612b3a565b9250506020612c5285828601612b3a565b9150509250929050565b600080600060608486031215612c7557612c74612aec565b5b6000612c8386828701612b3a565b9350506020612c9486828701612b3a565b9250506040612ca586828701612b3a565b9150509250925092565b612cb881612b11565b82525050565b6000602082019050612cd36000830184612caf565b92915050565b600082825260208201905092915050565b7f5661756c743a20696e76616c6964206e646f6c416d6f756e7400000000000000600082015250565b6000612d20601983612cd9565b9150612d2b82612cea565b602082019050919050565b60006020820190508181036000830152612d4f81612d13565b9050919050565b7f5661756c743a20696e76616c696420726564656d7074696f6e416d6f756e7400600082015250565b6000612d8c601f83612cd9565b9150612d9782612d56565b602082019050919050565b60006020820190508181036000830152612dbb81612d7f565b9050919050565b6000604082019050612dd76000830185612caf565b612de46020830184612b86565b9392505050565b7f5661756c743a20696e76616c696420746f6b656e416d6f756e74000000000000600082015250565b6000612e21601a83612cd9565b9150612e2c82612deb565b602082019050919050565b60006020820190508181036000830152612e5081612e14565b9050919050565b6000608082019050612e6c6000830187612caf565b612e796020830186612caf565b612e866040830185612b86565b612e936060830184612b86565b95945050505050565b600081519050612eab81612bb0565b92915050565b600060208284031215612ec757612ec6612aec565b5b6000612ed584828501612e9c565b91505092915050565b7f5661756c743a206e6f7420696e697469616c697a656400000000000000000000600082015250565b6000612f14601683612cd9565b9150612f1f82612ede565b602082019050919050565b60006020820190508181036000830152612f4381612f07565b9050919050565b7f5661756c743a20696e76616c696420746f6b656e730000000000000000000000600082015250565b6000612f80601583612cd9565b9150612f8b82612f4a565b602082019050919050565b60006020820190508181036000830152612faf81612f73565b9050919050565b7f5661756c743a20696e76616c696420616d6f756e74496e000000000000000000600082015250565b6000612fec601783612cd9565b9150612ff782612fb6565b602082019050919050565b6000602082019050818103600083015261301b81612fdf565b9050919050565b600060a0820190506130376000830188612caf565b6130446020830187612caf565b6130516040830186612caf565b61305e6060830185612b86565b61306b6080830184612b86565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156130fb578086048111156130d7576130d6613075565b5b60018516156130e65780820291505b80810290506130f4856130a4565b94506130bb565b94509492505050565b60008261311457600190506131d0565b8161312257600090506131d0565b8160018114613138576002811461314257613171565b60019150506131d0565b60ff84111561315457613153613075565b5b8360020a91508482111561316b5761316a613075565b5b506131d0565b5060208310610133831016604e8410600b84101617156131a65782820a9050838111156131a1576131a0613075565b5b6131d0565b6131b384848460016130b1565b925090508184048111156131ca576131c9613075565b5b81810290505b9392505050565b60006131e282612b7c565b91506131ed83612b7c565b925061321a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613104565b905092915050565b60008115159050919050565b61323781613222565b82525050565b60006060820190506132526000830186612caf565b61325f602083018561322e565b61326c604083018461322e565b949350505050565b600061327f82612b7c565b915061328a83612b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132c3576132c2613075565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061330882612b7c565b915061331383612b7c565b925082613323576133226132ce565b5b828204905092915050565b7f436f6e747261637420616c726561647920656e74657265640000000000000000600082015250565b6000613364601883612cd9565b915061336f8261332e565b602082019050919050565b6000602082019050818103600083015261339381613357565b9050919050565b7f5661756c743a20746f6b656e206e6f742077686974656c697374656400000000600082015250565b60006133d0601c83612cd9565b91506133db8261339a565b602082019050919050565b600060208201905081810360008301526133ff816133c3565b9050919050565b600060608201905061341b6000830186612caf565b6134286020830185612b86565b6134356040830184612b86565b949350505050565b600061344882612b7c565b915061345383612b7c565b92508282101561346657613465613075565b5b828203905092915050565b600061347c82612b7c565b915061348783612b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134bc576134bb613075565b5b828201905092915050565b600081519050919050565b60005b838110156134f05780820151818401526020810190506134d5565b838111156134ff576000848401525b50505050565b6000601f19601f8301169050919050565b6000613521826134c7565b61352b8185612cd9565b935061353b8185602086016134d2565b61354481613505565b840191505092915050565b600060208201905081810360008301526135698184613516565b905092915050565b7f5661756c743a2072657365727665206578636565647320706f6f6c0000000000600082015250565b60006135a7601b83612cd9565b91506135b282613571565b602082019050919050565b600060208201905081810360008301526135d68161359a565b9050919050565b7f5661756c743a20696e76616c696420696e637265617365000000000000000000600082015250565b6000613613601783612cd9565b915061361e826135dd565b602082019050919050565b6000602082019050818103600083015261364281613606565b9050919050565b61365281613222565b811461365d57600080fd5b50565b60008151905061366f81613649565b92915050565b60006020828403121561368b5761368a612aec565b5b600061369984828501613660565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006136fe602a83612cd9565b9150613709826136a2565b604082019050919050565b6000602082019050818103600083015261372d816136f1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613790602683612cd9565b915061379b82613734565b604082019050919050565b600060208201905081810360008301526137bf81613783565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006137fc601d83612cd9565b9150613807826137c6565b602082019050919050565b6000602082019050818103600083015261382b816137ef565b9050919050565b600081519050919050565b600081905092915050565b600061385382613832565b61385d818561383d565b935061386d8185602086016134d2565b80840191505092915050565b60006138858284613848565b91508190509291505056fea2646970667358221220a7d76f2c33b057630b53f056f2fba1e6a90b399a8f87ca81284b60710908898564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12757,
        "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21151_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)21036_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)21036_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)21036_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 21023,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21025,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21027,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21029,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21031,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21033,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 21035,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)21151_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 21038,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21040,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21042,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21044,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21046,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21048,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21051,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 21055,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21060,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)21036_storage)"
          },
          {
            "astId": 21064,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21068,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21072,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21076,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21080,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "ndolAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21084,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21088,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21092,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21096,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21100,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21104,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21108,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21110,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 21114,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21118,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21122,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21126,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21130,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21134,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21136,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 21138,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 21142,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 21144,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "totalNDOLMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 21150,
            "contract": "contracts/facets/Vault/VaultNdolFacet.sol:VaultNdolFacet",
            "label": "ndolMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}