{
  "address": "0xf2480259A5204F20CAd350B3B0F0EAe456FEFB02",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x761ef60056fa7e8e7280b3c8338b97acf2862c03577e827a6e026d022e60898b",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xf2480259A5204F20CAd350B3B0F0EAe456FEFB02",
    "transactionIndex": 0,
    "gasUsed": "1269374",
    "logsBloom": "0x
    "blockHash": "0xc7f1bb75865a80982f5b2582f56254c50d7d14beb881786f1b7d1dd972c3aad6",
    "transactionHash": "0x761ef60056fa7e8e7280b3c8338b97acf2862c03577e827a6e026d022e60898b",
    "logs": [],
    "blockNumber": 54915384,
    "cumulativeGasUsed": "1269374",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "51e0a29016eb8a808231ef727f964484",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weiroll/VM.sol\":\"VM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/weiroll/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nuint256 constant IDX_VARIABLE_LENGTH = 0x80;\\nuint256 constant IDX_VALUE_MASK = 0x7f;\\nuint256 constant IDX_END_OF_ARGS = 0xff;\\nuint256 constant IDX_USE_STATE = 0xfe;\\n\\nlibrary CommandBuilder {\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count = 0; // Number of bytes in whole ABI encoded message\\n        uint256 free = 0; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                    free += 32;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                    free += 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n                free += 32;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                    count += 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                    count += 32;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n                count += 32;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint8 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c0aad0ee670ff08b9e8ec0f2af647eb8d8239f86cf2cf0f29401d5e2859c6cc\",\"license\":\"MIT\"},\"contracts/weiroll/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nuint8 constant FLAG_CT_DELEGATECALL = 0x00;\\nuint8 constant FLAG_CT_CALL = 0x01;\\nuint8 constant FLAG_CT_STATICCALL = 0x02;\\nuint8 constant FLAG_CT_VALUECALL = 0x03;\\nuint8 constant FLAG_CT_MASK = 0x03;\\nuint8 constant FLAG_EXTENDED_COMMAND = 0x80;\\nuint8 constant FLAG_TUPLE_RETURN = 0x40;\\n\\nuint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\ncontract VM {\\n    using CommandBuilder for bytes[];\\n\\n    address immutable self;\\n\\n    modifier ensureDelegateCall() {\\n        require(address(this) != self);\\n        _;\\n    }\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] memory state)\\n        public\\n        ensureDelegateCall\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        for (uint256 i = 0; i < commands.length; i++) {\\n            command = commands[i];\\n            flags = uint8(bytes1(command << 32));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                    .delegatecall(\\n                        // inputs\\n                        state.buildInputs(\\n                            //selector\\n                            bytes4(command),\\n                            indices\\n                        )\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outdata) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        state.buildInputs(\\n                            //selector\\n                            bytes4(command),\\n                            indices\\n                        )\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    mstore(calleth, add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            require(success, \\\"Call failed\\\");\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x6c5ca5238b03f64cb9b7d80045b532618dc54c5822e3e89cb73f227094c8bbed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805161161361005f6000396000606401526116136000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004a60048036038101906100459190610d68565b610060565b6040516100579190610f2e565b60405180910390f35b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156100bb57600080fd5b600080600080606060005b898990508110156104e8578989828181106100e4576100e3610f50565b5b905060200201359550602086901b60f81c60ff1694506000608060ff16861614610135578989828061011590610fb8565b935081811061012757610126610f50565b5b90506020020135935061015f565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff602887901b60001c1760001b93505b600060ff16600360ff16861614156101fb578560001c73ffffffffffffffffffffffffffffffffffffffff166101a087868b6104f89092919063ffffffff16565b6040516101ad919061103d565b600060405180830381855af49150503d80600081146101e8576040519150601f19603f3d011682016040523d82523d6000602084013e6101ed565b606091505b50809350819450505061044d565b600160ff16600360ff1686161415610299578560001c73ffffffffffffffffffffffffffffffffffffffff1661023c87868b6104f89092919063ffffffff16565b604051610249919061103d565b6000604051808303816000865af19150503d8060008114610286576040519150601f19603f3d011682016040523d82523d6000602084013e61028b565b606091505b50809350819450505061044c565b600260ff16600360ff1686161415610335578560001c73ffffffffffffffffffffffffffffffffffffffff166102da87868b6104f89092919063ffffffff16565b6040516102e7919061103d565b600060405180830381855afa9150503d8060008114610322576040519150601f19603f3d011682016040523d82523d6000602084013e610327565b606091505b50809350819450505061044b565b600360ff16600360ff168616141561040f57600080898660f81c60ff168151811061036357610362610f50565b5b602002602001015190506020810182528760001c73ffffffffffffffffffffffffffffffffffffffff16826103b08a60ff60088b901b60001c1760001b8e6104f89092919063ffffffff16565b6040516103bd919061103d565b60006040518083038185875af1925050503d80600081146103fa576040519150601f19603f3d011682016040523d82523d6000602084013e6103ff565b606091505b508095508196505050505061044a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610441906110b1565b60405180910390fd5b5b5b5b8261048d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104849061111d565b60405180910390fd5b6000604060ff168616146104b9576104b4605887901b838a6108cb9092919063ffffffff16565b6104d5565b6104d2605887901b838a6109849092919063ffffffff16565b97505b80806104e090610fb8565b9150506100c6565b5086955050505050509392505050565b60606000806060600080600090505b60208110156106d65786816020811061052357610522610f50565b5b1a60f81b60f81c60ff16915060ff82141561053d576106d6565b600060808316146106435760fe8214156105a15760008351141561057e578860405160200161056c9190610f2e565b60405160208183030381529060405292505b82518561058b919061113d565b945060208461059a919061113d565b935061063e565b600089607f8416815181106105b9576105b8610f50565b5b602002602001015151905060006020826105d391906111c2565b14610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90611265565b60405180910390fd5b602081610620919061113d565b8661062b919061113d565b955060208561063a919061113d565b9450505b6106c3565b602089607f84168151811061065b5761065a610f50565b5b602002602001015151146106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906112f7565b60405180910390fd5b6020856106b1919061113d565b94506020846106c0919061113d565b93505b80806106ce90610fb8565b915050610507565b506004846106e4919061113d565b67ffffffffffffffff8111156106fd576106fc610b57565b5b6040519080825280601f01601f19166020018201604052801561072f5781602001600182028036833780820191505090505b5094508660208601526000935060005b60208110156108bf5786816020811061075b5761075a610f50565b5b1a60f81b60f81c60ff16915060ff821415610775576108bf565b6000608083161461086d5760fe8214156107e75783856024880101526107b8836020886004886107a5919061113d565b602088516107b39190611317565b610ab3565b602083516107c69190611317565b846107d1919061113d565b93506020856107e0919061113d565b9450610868565b600089607f8416815181106107ff576107fe610f50565b5b602002602001015151905084866024890101526108498a607f85168151811061082b5761082a610f50565b5b6020026020010151600089600489610843919061113d565b85610ab3565b8085610855919061113d565b9450602086610864919061113d565b9550505b6108ac565b600089607f84168151811061088557610884610f50565b5b602002602001015190506020810151866024890101526020866108a8919061113d565b9550505b80806108b790610fb8565b91505061073f565b50505050509392505050565b60008260f81c905060ff8160ff1614156108e5575061097f565b6000602083516108f5919061113d565b67ffffffffffffffff81111561090e5761090d610b57565b5b6040519080825280601f01601f1916602001820160405280156109405781602001600182028036833780820191505090505b50858360ff168151811061095757610956610f50565b5b6020026020010181905290506109738360008360208751610ab3565b82518060208301525050505b505050565b606060008360f81c60ff16905060ff8114156109a35784915050610aac565b60006080821614610a405760fe8114156109d257828060200190518101906109cb9190611470565b9450610a3b565b60006020840151905060208114610a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a159061152b565b60405180910390fd5b60208451036020850152602084016020607f841602602088010152505b610aa7565b6020835114610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b906115bd565b60405180910390fd5b8285607f831681518110610a9b57610a9a610f50565b5b60200260200101819052505b849150505b9392505050565b808260208501018286602089010160045afa505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b0657610b05610ae1565b5b8235905067ffffffffffffffff811115610b2357610b22610ae6565b5b602083019150836020820283011115610b3f57610b3e610aeb565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b8f82610b46565b810181811067ffffffffffffffff82111715610bae57610bad610b57565b5b80604052505050565b6000610bc1610acd565b9050610bcd8282610b86565b919050565b600067ffffffffffffffff821115610bed57610bec610b57565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115610c1e57610c1d610b57565b5b610c2782610b46565b9050602081019050919050565b82818337600083830152505050565b6000610c56610c5184610c03565b610bb7565b905082815260208101848484011115610c7257610c71610bfe565b5b610c7d848285610c34565b509392505050565b600082601f830112610c9a57610c99610ae1565b5b8135610caa848260208601610c43565b91505092915050565b6000610cc6610cc184610bd2565b610bb7565b90508083825260208201905060208402830185811115610ce957610ce8610aeb565b5b835b81811015610d3057803567ffffffffffffffff811115610d0e57610d0d610ae1565b5b808601610d1b8982610c85565b85526020850194505050602081019050610ceb565b5050509392505050565b600082601f830112610d4f57610d4e610ae1565b5b8135610d5f848260208601610cb3565b91505092915050565b600080600060408486031215610d8157610d80610ad7565b5b600084013567ffffffffffffffff811115610d9f57610d9e610adc565b5b610dab86828701610af0565b9350935050602084013567ffffffffffffffff811115610dce57610dcd610adc565b5b610dda86828701610d3a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4a578082015181840152602081019050610e2f565b83811115610e59576000848401525b50505050565b6000610e6a82610e10565b610e748185610e1b565b9350610e84818560208601610e2c565b610e8d81610b46565b840191505092915050565b6000610ea48383610e5f565b905092915050565b6000602082019050919050565b6000610ec482610de4565b610ece8185610def565b935083602082028501610ee085610e00565b8060005b85811015610f1c5784840389528151610efd8582610e98565b9450610f0883610eac565b925060208a01995050600181019050610ee4565b50829750879550505050505092915050565b60006020820190508181036000830152610f488184610eb9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610fc382610fae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ff657610ff5610f7f565b5b600182019050919050565b600081905092915050565b600061101782610e10565b6110218185611001565b9350611031818560208601610e2c565b80840191505092915050565b6000611049828461100c565b915081905092915050565b600082825260208201905092915050565b7f496e76616c69642063616c6c7479706500000000000000000000000000000000600082015250565b600061109b601083611054565b91506110a682611065565b602082019050919050565b600060208201905081810360008301526110ca8161108e565b9050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611107600b83611054565b9150611112826110d1565b602082019050919050565b60006020820190508181036000830152611136816110fa565b9050919050565b600061114882610fae565b915061115383610fae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561118857611187610f7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111cd82610fae565b91506111d883610fae565b9250826111e8576111e7611193565b5b828206905092915050565b7f44796e616d6963207374617465207661726961626c6573206d7573742062652060008201527f61206d756c7469706c65206f6620333220627974657300000000000000000000602082015250565b600061124f603683611054565b915061125a826111f3565b604082019050919050565b6000602082019050818103600083015261127e81611242565b9050919050565b7f537461746963207374617465207661726961626c6573206d757374206265203360008201527f3220627974657300000000000000000000000000000000000000000000000000602082015250565b60006112e1602783611054565b91506112ec82611285565b604082019050919050565b60006020820190508181036000830152611310816112d4565b9050919050565b600061132282610fae565b915061132d83610fae565b9250828210156113405761133f610f7f565b5b828203905092915050565b600061135e61135984610c03565b610bb7565b90508281526020810184848401111561137a57611379610bfe565b5b611385848285610e2c565b509392505050565b600082601f8301126113a2576113a1610ae1565b5b81516113b284826020860161134b565b91505092915050565b60006113ce6113c984610bd2565b610bb7565b905080838252602082019050602084028301858111156113f1576113f0610aeb565b5b835b8181101561143857805167ffffffffffffffff81111561141657611415610ae1565b5b808601611423898261138d565b855260208501945050506020810190506113f3565b5050509392505050565b600082601f83011261145757611456610ae1565b5b81516114678482602086016113bb565b91505092915050565b60006020828403121561148657611485610ad7565b5b600082015167ffffffffffffffff8111156114a4576114a3610adc565b5b6114b084828501611442565b91505092915050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f287661726961626c652900000000000000000000000000000000000000000000602082015250565b6000611515602a83611054565b9150611520826114b9565b604082019050919050565b6000602082019050818103600083015261154481611508565b9050919050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f2873746174696329000000000000000000000000000000000000000000000000602082015250565b60006115a7602883611054565b91506115b28261154b565b604082019050919050565b600060208201905081810360008301526115d68161159a565b905091905056fea264697066735822122055e939113b16188df7642fa1a7ee43fa792deb773395f8030eac4fdfb380aa6864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004a60048036038101906100459190610d68565b610060565b6040516100579190610f2e565b60405180910390f35b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156100bb57600080fd5b600080600080606060005b898990508110156104e8578989828181106100e4576100e3610f50565b5b905060200201359550602086901b60f81c60ff1694506000608060ff16861614610135578989828061011590610fb8565b935081811061012757610126610f50565b5b90506020020135935061015f565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff602887901b60001c1760001b93505b600060ff16600360ff16861614156101fb578560001c73ffffffffffffffffffffffffffffffffffffffff166101a087868b6104f89092919063ffffffff16565b6040516101ad919061103d565b600060405180830381855af49150503d80600081146101e8576040519150601f19603f3d011682016040523d82523d6000602084013e6101ed565b606091505b50809350819450505061044d565b600160ff16600360ff1686161415610299578560001c73ffffffffffffffffffffffffffffffffffffffff1661023c87868b6104f89092919063ffffffff16565b604051610249919061103d565b6000604051808303816000865af19150503d8060008114610286576040519150601f19603f3d011682016040523d82523d6000602084013e61028b565b606091505b50809350819450505061044c565b600260ff16600360ff1686161415610335578560001c73ffffffffffffffffffffffffffffffffffffffff166102da87868b6104f89092919063ffffffff16565b6040516102e7919061103d565b600060405180830381855afa9150503d8060008114610322576040519150601f19603f3d011682016040523d82523d6000602084013e610327565b606091505b50809350819450505061044b565b600360ff16600360ff168616141561040f57600080898660f81c60ff168151811061036357610362610f50565b5b602002602001015190506020810182528760001c73ffffffffffffffffffffffffffffffffffffffff16826103b08a60ff60088b901b60001c1760001b8e6104f89092919063ffffffff16565b6040516103bd919061103d565b60006040518083038185875af1925050503d80600081146103fa576040519150601f19603f3d011682016040523d82523d6000602084013e6103ff565b606091505b508095508196505050505061044a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610441906110b1565b60405180910390fd5b5b5b5b8261048d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104849061111d565b60405180910390fd5b6000604060ff168616146104b9576104b4605887901b838a6108cb9092919063ffffffff16565b6104d5565b6104d2605887901b838a6109849092919063ffffffff16565b97505b80806104e090610fb8565b9150506100c6565b5086955050505050509392505050565b60606000806060600080600090505b60208110156106d65786816020811061052357610522610f50565b5b1a60f81b60f81c60ff16915060ff82141561053d576106d6565b600060808316146106435760fe8214156105a15760008351141561057e578860405160200161056c9190610f2e565b60405160208183030381529060405292505b82518561058b919061113d565b945060208461059a919061113d565b935061063e565b600089607f8416815181106105b9576105b8610f50565b5b602002602001015151905060006020826105d391906111c2565b14610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90611265565b60405180910390fd5b602081610620919061113d565b8661062b919061113d565b955060208561063a919061113d565b9450505b6106c3565b602089607f84168151811061065b5761065a610f50565b5b602002602001015151146106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906112f7565b60405180910390fd5b6020856106b1919061113d565b94506020846106c0919061113d565b93505b80806106ce90610fb8565b915050610507565b506004846106e4919061113d565b67ffffffffffffffff8111156106fd576106fc610b57565b5b6040519080825280601f01601f19166020018201604052801561072f5781602001600182028036833780820191505090505b5094508660208601526000935060005b60208110156108bf5786816020811061075b5761075a610f50565b5b1a60f81b60f81c60ff16915060ff821415610775576108bf565b6000608083161461086d5760fe8214156107e75783856024880101526107b8836020886004886107a5919061113d565b602088516107b39190611317565b610ab3565b602083516107c69190611317565b846107d1919061113d565b93506020856107e0919061113d565b9450610868565b600089607f8416815181106107ff576107fe610f50565b5b602002602001015151905084866024890101526108498a607f85168151811061082b5761082a610f50565b5b6020026020010151600089600489610843919061113d565b85610ab3565b8085610855919061113d565b9450602086610864919061113d565b9550505b6108ac565b600089607f84168151811061088557610884610f50565b5b602002602001015190506020810151866024890101526020866108a8919061113d565b9550505b80806108b790610fb8565b91505061073f565b50505050509392505050565b60008260f81c905060ff8160ff1614156108e5575061097f565b6000602083516108f5919061113d565b67ffffffffffffffff81111561090e5761090d610b57565b5b6040519080825280601f01601f1916602001820160405280156109405781602001600182028036833780820191505090505b50858360ff168151811061095757610956610f50565b5b6020026020010181905290506109738360008360208751610ab3565b82518060208301525050505b505050565b606060008360f81c60ff16905060ff8114156109a35784915050610aac565b60006080821614610a405760fe8114156109d257828060200190518101906109cb9190611470565b9450610a3b565b60006020840151905060208114610a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a159061152b565b60405180910390fd5b60208451036020850152602084016020607f841602602088010152505b610aa7565b6020835114610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b906115bd565b60405180910390fd5b8285607f831681518110610a9b57610a9a610f50565b5b60200260200101819052505b849150505b9392505050565b808260208501018286602089010160045afa505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b0657610b05610ae1565b5b8235905067ffffffffffffffff811115610b2357610b22610ae6565b5b602083019150836020820283011115610b3f57610b3e610aeb565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b8f82610b46565b810181811067ffffffffffffffff82111715610bae57610bad610b57565b5b80604052505050565b6000610bc1610acd565b9050610bcd8282610b86565b919050565b600067ffffffffffffffff821115610bed57610bec610b57565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115610c1e57610c1d610b57565b5b610c2782610b46565b9050602081019050919050565b82818337600083830152505050565b6000610c56610c5184610c03565b610bb7565b905082815260208101848484011115610c7257610c71610bfe565b5b610c7d848285610c34565b509392505050565b600082601f830112610c9a57610c99610ae1565b5b8135610caa848260208601610c43565b91505092915050565b6000610cc6610cc184610bd2565b610bb7565b90508083825260208201905060208402830185811115610ce957610ce8610aeb565b5b835b81811015610d3057803567ffffffffffffffff811115610d0e57610d0d610ae1565b5b808601610d1b8982610c85565b85526020850194505050602081019050610ceb565b5050509392505050565b600082601f830112610d4f57610d4e610ae1565b5b8135610d5f848260208601610cb3565b91505092915050565b600080600060408486031215610d8157610d80610ad7565b5b600084013567ffffffffffffffff811115610d9f57610d9e610adc565b5b610dab86828701610af0565b9350935050602084013567ffffffffffffffff811115610dce57610dcd610adc565b5b610dda86828701610d3a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4a578082015181840152602081019050610e2f565b83811115610e59576000848401525b50505050565b6000610e6a82610e10565b610e748185610e1b565b9350610e84818560208601610e2c565b610e8d81610b46565b840191505092915050565b6000610ea48383610e5f565b905092915050565b6000602082019050919050565b6000610ec482610de4565b610ece8185610def565b935083602082028501610ee085610e00565b8060005b85811015610f1c5784840389528151610efd8582610e98565b9450610f0883610eac565b925060208a01995050600181019050610ee4565b50829750879550505050505092915050565b60006020820190508181036000830152610f488184610eb9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610fc382610fae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ff657610ff5610f7f565b5b600182019050919050565b600081905092915050565b600061101782610e10565b6110218185611001565b9350611031818560208601610e2c565b80840191505092915050565b6000611049828461100c565b915081905092915050565b600082825260208201905092915050565b7f496e76616c69642063616c6c7479706500000000000000000000000000000000600082015250565b600061109b601083611054565b91506110a682611065565b602082019050919050565b600060208201905081810360008301526110ca8161108e565b9050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611107600b83611054565b9150611112826110d1565b602082019050919050565b60006020820190508181036000830152611136816110fa565b9050919050565b600061114882610fae565b915061115383610fae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561118857611187610f7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111cd82610fae565b91506111d883610fae565b9250826111e8576111e7611193565b5b828206905092915050565b7f44796e616d6963207374617465207661726961626c6573206d7573742062652060008201527f61206d756c7469706c65206f6620333220627974657300000000000000000000602082015250565b600061124f603683611054565b915061125a826111f3565b604082019050919050565b6000602082019050818103600083015261127e81611242565b9050919050565b7f537461746963207374617465207661726961626c6573206d757374206265203360008201527f3220627974657300000000000000000000000000000000000000000000000000602082015250565b60006112e1602783611054565b91506112ec82611285565b604082019050919050565b60006020820190508181036000830152611310816112d4565b9050919050565b600061132282610fae565b915061132d83610fae565b9250828210156113405761133f610f7f565b5b828203905092915050565b600061135e61135984610c03565b610bb7565b90508281526020810184848401111561137a57611379610bfe565b5b611385848285610e2c565b509392505050565b600082601f8301126113a2576113a1610ae1565b5b81516113b284826020860161134b565b91505092915050565b60006113ce6113c984610bd2565b610bb7565b905080838252602082019050602084028301858111156113f1576113f0610aeb565b5b835b8181101561143857805167ffffffffffffffff81111561141657611415610ae1565b5b808601611423898261138d565b855260208501945050506020810190506113f3565b5050509392505050565b600082601f83011261145757611456610ae1565b5b81516114678482602086016113bb565b91505092915050565b60006020828403121561148657611485610ad7565b5b600082015167ffffffffffffffff8111156114a4576114a3610adc565b5b6114b084828501611442565b91505092915050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f287661726961626c652900000000000000000000000000000000000000000000602082015250565b6000611515602a83611054565b9150611520826114b9565b604082019050919050565b6000602082019050818103600083015261154481611508565b9050919050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f2873746174696329000000000000000000000000000000000000000000000000602082015250565b60006115a7602883611054565b91506115b28261154b565b604082019050919050565b600060208201905081810360008301526115d68161159a565b905091905056fea264697066735822122055e939113b16188df7642fa1a7ee43fa792deb773395f8030eac4fdfb380aa6864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}