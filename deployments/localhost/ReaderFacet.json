{
  "address": "0x0580cEd4F4d45591682223D655FEBE5A967C18a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFundingRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getMaxAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_collateralTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_indexTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isLong",
          "type": "bool[]"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalancesWithSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_excludedAccounts",
          "type": "address[]"
        }
      ],
      "name": "getTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ndolAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58e1ca5a7c0cae031c1cd8e44fc7b57f754832a100fd542079aabaac8b816779",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x0580cEd4F4d45591682223D655FEBE5A967C18a8",
    "transactionIndex": 0,
    "gasUsed": "2631525",
    "logsBloom": "0x
    "blockHash": "0x5858e448bb268bdbf1a02609b32d5de8d0cc78ba3d94dec098416dacab10919d",
    "transactionHash": "0x58e1ca5a7c0cae031c1cd8e44fc7b57f754832a100fd542079aabaac8b816779",
    "logs": [],
    "blockNumber": 54541428,
    "cumulativeGasUsed": "2631525",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b25fdb449e81246734de55deaa372783",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFundingRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getMaxAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_indexTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isLong\",\"type\":\"bool[]\"}],\"name\":\"getPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalancesWithSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ndolAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Reader/ReaderFacet.sol\":\"ReaderFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x33102583a908b03dc8aa7e102b295c5b52a6124a58479cebc94b6e1871de1993\",\"license\":\"GPL-3.0\"},\"contracts/facets/Reader/ReaderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../amm/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../Vault/VaultLib.sol\\\";\\nimport \\\"../Vault/Facet.sol\\\";\\n\\ncontract ReaderFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function getMaxAmountIn(\\n        IVault,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (uint256) {\\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\\n        uint256 poolAmount = s.poolAmounts[_tokenOut];\\n        uint256 reservedAmount = s.reservedAmounts[_tokenOut];\\n        uint256 availableAmount = poolAmount.sub(reservedAmount);\\n        uint256 _amountIn = availableAmount.mul(priceOut).div(priceIn);\\n\\n        return VaultLib.adjustForDecimals(s, _amountIn, _tokenOut, _tokenIn);\\n    }\\n\\n    function getAmountOut(\\n        IVault,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) public view returns (uint256, uint256) {\\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\\n        uint256 amountOutAfterFees = amountOut\\n            .mul(BASIS_POINTS_DIVISOR.sub(SWAP_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\\n\\n        return (amountOutAfterFees, feeAmount);\\n    }\\n\\n    function getFees(address, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amounts[i] = s.feeReserves[_tokens[i]];\\n        }\\n\\n        return amounts;\\n    }\\n\\n    // TODO: getTotalContributedCollateral()\\n\\n    function getPairInfo(address _factory, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 inputLength = 2;\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](\\n            (_tokens.length / inputLength) * propsLength\\n        );\\n\\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\\n            address token0 = _tokens[i * inputLength];\\n            address token1 = _tokens[i * inputLength + 1];\\n            address pair = IUniswapV2Factory(_factory).getPair(token0, token1);\\n\\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getFundingRates(\\n        address,\\n        address _weth,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory fundingRates = new uint256[](\\n            _tokens.length * propsLength\\n        );\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 reservedAmount = s.reservedAmounts[token];\\n            uint256 poolAmount = s.poolAmounts[token];\\n\\n            if (poolAmount > 0) {\\n                fundingRates[i * propsLength] = FUNDING_RATE_FACTOR\\n                    .mul(reservedAmount)\\n                    .div(poolAmount);\\n            }\\n\\n            if (s.cumulativeFundingRates[token] > 0) {\\n                uint256 nextRate = VaultLib._getNextFundingRate(s, token);\\n                uint256 baseRate = s.cumulativeFundingRates[token];\\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\\n            }\\n        }\\n\\n        return fundingRates;\\n    }\\n\\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 supply = _token.totalSupply();\\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\\n            address account = _excludedAccounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            supply = supply.sub(balance);\\n        }\\n\\n        return supply;\\n    }\\n\\n    function getTokenBalances(address _account, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i] = _account.balance;\\n                continue;\\n            }\\n            balances[i] = IERC20(token).balanceOf(_account);\\n        }\\n        return balances;\\n    }\\n\\n    function getTokenBalancesWithSupplies(\\n        address _account,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i * propsLength] = _account.balance;\\n                balances[i * propsLength + 1] = 0;\\n                continue;\\n            }\\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\\n        }\\n        return balances;\\n    }\\n\\n    function getVaultTokenInfo(\\n        address,\\n        address _weth,\\n        uint256 _ndolAmount,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 9;\\n\\n        IVault vault = IVault(address(this));\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(address(this));\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            if (token != s.ndol) {\\n                amounts[i * propsLength] = s.poolAmounts[token];\\n                amounts[i * propsLength + 1] = s.reservedAmounts[token];\\n                amounts[i * propsLength + 2] = s.ndolAmounts[token];\\n                amounts[i * propsLength + 3] = vault.getRedemptionAmount(\\n                    token,\\n                    _ndolAmount\\n                );\\n                amounts[i * propsLength + 4] = VaultLib.getMinPrice(\\n                    token,\\n                    s.includeAmmPrice\\n                );\\n                amounts[i * propsLength + 5] = VaultLib.getMaxPrice(\\n                    token,\\n                    s.includeAmmPrice\\n                );\\n                amounts[i * propsLength + 6] = s.guaranteedUsd[token];\\n                amounts[i * propsLength + 7] = priceFeed.getPrice(\\n                    token,\\n                    false,\\n                    false\\n                );\\n                amounts[i * propsLength + 8] = priceFeed.getPrice(\\n                    token,\\n                    true,\\n                    false\\n                );\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getPositions(\\n        address,\\n        address _account,\\n        address[] memory _collateralTokens,\\n        address[] memory _indexTokens,\\n        bool[] memory _isLong\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](\\n            _collateralTokens.length * POSITION_PROPS_LENGTH\\n        );\\n\\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\\n            {\\n                (\\n                    uint256 size,\\n                    uint256 collateral,\\n                    uint256 averagePrice,\\n                    uint256 entryFundingRate,\\n                    ,\\n                    /* reserveAmount */\\n                    uint256 realisedPnl,\\n                    bool hasRealisedProfit,\\n                    uint256 lastIncreasedTime\\n                ) = IVault(address(this)).getPosition(\\n                        _account,\\n                        _collateralTokens[i],\\n                        _indexTokens[i],\\n                        _isLong[i]\\n                    );\\n\\n                amounts[i * POSITION_PROPS_LENGTH] = size;\\n                amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\\n                amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\\n                amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\\n                amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit\\n                    ? 1\\n                    : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\\n                amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\\n            }\\n\\n            uint256 _size = amounts[i * POSITION_PROPS_LENGTH];\\n            uint256 _averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\\n            uint256 _lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\\n            if (_averagePrice > 0) {\\n                (bool hasProfit, uint256 delta) = IVault(address(this))\\n                    .getDelta(\\n                        _indexTokens[i],\\n                        _size,\\n                        _averagePrice,\\n                        _isLong[i],\\n                        _lastIncreasedTime\\n                    );\\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x44ae2bf66a42a098129267b5c8381e94a92b027dad86b798cedfbfb8117e9a29\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function _setGov(address _newGov) internal {\\n        onlyGov();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.contractOwner = _newGov;\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xc2f5c3feb5ea52eaeca64a71d95026a29e13245cc77dd5f93c384fce6ff8e4d6\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreaseNDOLAmount(address token, uint256 amount);\\n    event DecreaseNDOLAmount(address token, uint256 amount);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    function _getNextFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _intervals = block\\n            .timestamp\\n            .sub(s.lastFundingTimes[_token])\\n            .div(FUNDING_INTERVAL);\\n        uint256 _poolAmount = s.poolAmounts[_token];\\n        if (_poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            FUNDING_RATE_FACTOR\\n                .mul(s.reservedAmounts[_token])\\n                .mul(_intervals)\\n                .div(_poolAmount);\\n    }\\n\\n    function updateCumulativeFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        if (s.lastFundingTimes[_token] == 0) {\\n            s.lastFundingTimes[_token] = block\\n                .timestamp\\n                .div(FUNDING_INTERVAL)\\n                .mul(FUNDING_INTERVAL);\\n            return;\\n        }\\n\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = _getNextFundingRate(s, _token);\\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\\n            fundingRate\\n        );\\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\\n            FUNDING_INTERVAL\\n        );\\n\\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\\n    }\\n\\n    function adjustForDecimals(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 _decimalsDiv = _tokenDiv == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenDiv];\\n        uint256 _decimalsMul = _tokenMul == s.ndol\\n            ? NDOL_DECIMALS\\n            : s.tokenDecimals[_tokenMul];\\n\\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\\n    }\\n\\n    function getMinPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                false,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function getMaxPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                true,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function isTokenWhitelisted(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(s.whitelistedTokens[_token], \\\"Vault: token not whitelisted\\\");\\n    }\\n\\n    function isPoolAmountBelowBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(s.poolAmounts[_token] <= balance, \\\"Vault: invalid increase\\\");\\n    }\\n\\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 prevBalance = s.tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        s.tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function transferOut(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\\n            _amount\\n        );\\n\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function tokenToUsdMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMaxPrice(_token, s.includeAmmPrice)\\n            );\\n    }\\n\\n    function usdToToken(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _usdAmount.mul(10**_decimals).div(_price);\\n    }\\n\\n    function tokenToUsdMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMinPrice(_token, includeAmmPrice)\\n            );\\n    }\\n\\n    function updateTokenBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\\n\\n        s.tokenBalances[_token] = _nextBalance;\\n    }\\n\\n    function validatePosition(uint256 _size, uint256 _collateral)\\n        internal\\n        pure\\n    {\\n        if (_size == 0) {\\n            require(_collateral == 0, \\\"Vault: collateral should be withdrawn\\\");\\n            return;\\n        }\\n        require(\\n            _size >= _collateral,\\n            \\\"Vault: _size must be more than _collateral\\\"\\n        );\\n    }\\n\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {\\n            return;\\n        }\\n        if (msg.sender == address(this)) {\\n            return;\\n        }\\n        revert(\\\"Vault: invalid msg.sender\\\");\\n    }\\n\\n    function validateTokens(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken\\n    ) internal view {\\n        require(_collateralToken == _indexToken, \\\"Vault: mismatched tokens\\\");\\n        isTokenWhitelisted(s, _collateralToken);\\n        isTokenWhitelisted(s, _indexToken);\\n    }\\n\\n    function getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _account,\\n                    _collateralToken,\\n                    _indexToken,\\n                    _isLong\\n                )\\n            );\\n    }\\n\\n    function _collectSwapFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        bool _isBuyingNDOL\\n    ) internal returns (uint256, uint256) {\\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\\n            s,\\n            _token,\\n            SWAP_FEE_BASIS_POINTS\\n        );\\n        uint256 _afterFeeAmount = _amount\\n            .mul(\\n                BASIS_POINTS_DIVISOR.sub(\\n                    _isBuyingNDOL ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\\n                )\\n            )\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\\n\\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\\n\\n        emit CollectSwapFees(\\n            _token,\\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\\n            _feeAmount\\n        );\\n        return (_feeAmount, _afterFeeAmount);\\n    }\\n\\n    function _increasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit IncreasePoolAmount(_token, _amount);\\n\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function _decreasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: poolAmount exceeded\\\"\\n        );\\n        isReservedAmountBelowPoolAmount(s, _token);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function isReservedAmountBelowPoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n    }\\n\\n    function _transferRemainingCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _receiver,\\n        uint256 _usdOut,\\n        uint256 _usdOutAfterFee\\n    ) internal returns (uint256) {\\n        if (_usdOut > 0) {\\n            VaultLib._decreasePoolAmount(\\n                s,\\n                _collateralToken,\\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\\n            );\\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                _usdOutAfterFee\\n            );\\n            VaultLib.transferOut(\\n                s,\\n                _collateralToken,\\n                _amountOutAfterFees,\\n                _receiver\\n            );\\n\\n            return _amountOutAfterFees;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _increaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.ndolAmounts[_token] = s.ndolAmounts[_token].add(_amount);\\n\\n        emit IncreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _decreaseNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _value = s.ndolAmounts[_token];\\n        // since NDOL can be minted using multiple assets\\n        // it is possible for the NDOL debt for a single asset to be less than zero\\n        // the NDOL debt is capped to zero for this case\\n        if (_value <= _amount) {\\n            s.ndolAmounts[_token] = 0;\\n            emit DecreaseNDOLAmount(_token, _value);\\n            return;\\n        }\\n        s.ndolAmounts[_token] = _value.sub(_amount);\\n\\n        emit DecreaseNDOLAmount(_token, _amount);\\n    }\\n\\n    function _reduceCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256, uint256) {\\n        LibExchangeStorage.Position storage position = s.positions[\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\\n        ];\\n\\n        uint256 fee = _collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n            (bool _hasProfit, uint256 delta) = _getDelta(\\n                s,\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n            hasProfit = _hasProfit;\\n            // get the proportional change in pnl\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        if (usdOut < fee) {\\n            position.collateral = position.collateral.sub(fee);\\n            uint256 feeTokens = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                fee\\n            );\\n            VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\\n        }\\n\\n        emit UpdatePnl(\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\\n            hasProfit,\\n            adjustedDelta\\n        );\\n\\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\\n    }\\n\\n    function _collectMarginFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n\\n        uint256 fundingFee = _getFundingFee(\\n            s,\\n            _token,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\\n\\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _increaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: insufficient reserve\\\"\\n        );\\n\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\\n\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\\n\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _getDelta(\\n        LibExchangeStorage.Storage storage s,\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) internal view returns (bool, uint256) {\\n        require(_averagePrice > 0, \\\"Vault: invalid _averagePrice\\\");\\n        uint256 price = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n        uint256 priceDelta = _averagePrice > price\\n            ? _averagePrice.sub(price)\\n            : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp >\\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\\n            ? 0\\n            : s.minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function _getFundingFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal view returns (uint256) {\\n        if (_size == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\\n            _entryFundingRate\\n        );\\n        if (fundingRate == 0) {\\n            return 0;\\n        }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = _sizeDelta\\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function _getTargetAdjustedFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _fee\\n    ) internal view returns (uint256) {\\n        uint256 _initialAmount = s.ndolAmounts[_token];\\n        uint256 _targetAmount = _getTargetNDOLAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function _getTargetNDOLAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        uint256 _ndolSupply = IERC20(s.ndol).totalSupply();\\n        if (_ndolSupply == 0) {\\n            return 0;\\n        }\\n        uint256 _tokenWeight = s.tokenWeights[_token];\\n\\n        return _ndolSupply.mul(_tokenWeight).div(s.totalTokenWeight);\\n    }\\n}\\n\",\"keccak256\":\"0xd5876017bfebabcbb9fdc25b60cf2a089eaabecdd731ac352bfe763d76423932\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVault {\\n    function getRedemptionCollateralUsd(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setIsMintingEnabled(bool _isMintingEnabled) external;\\n\\n    function setFees(\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function setMaxNDOL(uint256 _maxNDOLBatchSize, uint256 _maxNDOLBuffer)\\n        external;\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function sellNDOL(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function BASIS_POINTS_DIVISOR() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function ndolAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _ndolAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getUtilisation(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    function adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) external view returns (uint256);\\n\\n    function withdrawFees(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xa4951a677e7140dc8a3d0a8b2e9d38b8ec11734ddbbae81f1660078fcb2bd4cd\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVaultPriceFeed {\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf24961f2f3cdb035b8b7a14596d22443f44bd141f4bd9725097d54dbdb22e5fa\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NDOL_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.exchange.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address ndol;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) ndolAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNDOLMinted;\\n        mapping(address => mapping(address => int256)) ndolMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xb93d4fae1622e4ef47346ad61e3c329fceaa52fa2f57f4dfb29fdc22fce1ab33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060000160006101000a81548160ff021916908315150217905550612e9e8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a4543ead11610066578063a4543ead14610193578063d7176ca9146101c3578063d802178e146101f4578063dc383cab14610224578063f3535e6c146102545761009e565b806320542568146100a35780632ac0184c146100d35780632e3e33421461010357806386d4d0f51461013357806395a7535a14610163575b600080fd5b6100bd60048036038101906100b89190612239565b610284565b6040516100ca919061237a565b60405180910390f35b6100ed60048036038101906100e891906123da565b610869565b6040516100fa9190612445565b60405180910390f35b61011d60048036038101906101189190612460565b6109bb565b60405161012a919061237a565b60405180910390f35b61014d60048036038101906101489190612460565b610c66565b60405161015a919061237a565b60405180910390f35b61017d600480360381019061017891906124bc565b610d5c565b60405161018a919061237a565b60405180910390f35b6101ad60048036038101906101a89190612460565b611016565b6040516101ba919061237a565b60405180910390f35b6101dd60048036038101906101d89190612569565b6112f6565b6040516101eb9291906125d0565b60405180910390f35b61020e60048036038101906102099190612460565b6113cd565b60405161021b919061237a565b60405180910390f35b61023e600480360381019061023991906126f4565b611573565b60405161024b919061237a565b60405180910390f35b61026e600480360381019061026991906127c3565b611a5e565b60405161027b9190612445565b60405180910390f35b60606000600990506000309050600030905060008386516102a59190612845565b67ffffffffffffffff8111156102be576102bd6120f6565b5b6040519080825280602002602001820160405280156102ec5781602001602082028036833780820191505090505b50905060005b86518110156108595760008782815181106103105761030f61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610353578990505b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610845576000600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548387846103fb9190612845565b8151811061040c5761040b61289f565b5b6020026020010181815250506000600d0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836001888561046a9190612845565b61047491906128ce565b815181106104855761048461289f565b5b6020026020010181815250506000600b0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600288856104e39190612845565b6104ed91906128ce565b815181106104fe576104fd61289f565b5b6020026020010181815250508473ffffffffffffffffffffffffffffffffffffffff16632c668ec1828b6040518363ffffffff1660e01b8152600401610545929190612933565b602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190612971565b83600388856105959190612845565b61059f91906128ce565b815181106105b0576105af61289f565b5b6020026020010181815250506105d881600060020160149054906101000a900460ff16611b87565b83600488856105e79190612845565b6105f191906128ce565b815181106106025761060161289f565b5b60200260200101818152505061062a81600060020160149054906101000a900460ff16611c10565b83600588856106399190612845565b61064391906128ce565b815181106106545761065361289f565b5b6020026020010181815250506000600e0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600688856106b29190612845565b6106bc91906128ce565b815181106106cd576106cc61289f565b5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae69163826000806040518463ffffffff1660e01b8152600401610717939291906129ad565b602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190612971565b83600788856107679190612845565b61077191906128ce565b815181106107825761078161289f565b5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae6916382600160006040518463ffffffff1660e01b81526004016107cd939291906129ad565b602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190612971565b836008888561081d9190612845565b61082791906128ce565b815181106108385761083761289f565b5b6020026020010181815250505b508080610851906129e4565b9150506102f2565b5080945050505050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190612971565b905060005b83518110156109b05760008482815181106108fe576108fd61289f565b5b6020026020010151905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016109439190612a2d565b602060405180830381865afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109849190612971565b90506109998185611c9990919063ffffffff16565b9350505080806109a8906129e4565b9150506108e0565b508091505092915050565b606060006002905060008184516109d29190612845565b67ffffffffffffffff8111156109eb576109ea6120f6565b5b604051908082528060200260200182016040528015610a195781602001602082028036833780820191505090505b50905060005b8451811015610c5a576000858281518110610a3d57610a3c61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afc578673ffffffffffffffffffffffffffffffffffffffff1631838584610aa19190612845565b81518110610ab257610ab161289f565b5b60200260200101818152505060008360018685610acf9190612845565b610ad991906128ce565b81518110610aea57610ae961289f565b5b60200260200101818152505050610c47565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401610b359190612a2d565b602060405180830381865afa158015610b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b769190612971565b838584610b839190612845565b81518110610b9457610b9361289f565b5b6020026020010181815250508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612971565b8360018685610c1e9190612845565b610c2891906128ce565b81518110610c3957610c3861289f565b5b602002602001018181525050505b8080610c52906129e4565b915050610a1f565b50809250505092915050565b60606000825167ffffffffffffffff811115610c8557610c846120f6565b5b604051908082528060200260200182016040528015610cb35781602001602082028036833780820191505090505b50905060005b8351811015610d515760006011016000858381518110610cdc57610cdb61289f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610d3257610d3161289f565b5b6020026020010181815250508080610d49906129e4565b915050610cb9565b508091505092915050565b60606000600290506000818451610d739190612845565b67ffffffffffffffff811115610d8c57610d8b6120f6565b5b604051908082528060200260200182016040528015610dba5781602001602082028036833780820191505090505b50905060005b8451811015611009576000858281518110610dde57610ddd61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e21578690505b600080600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610f0857610edd81610ecf84610258611caf90919063ffffffff16565b611cc590919063ffffffff16565b858786610eea9190612845565b81518110610efb57610efa61289f565b5b6020026020010181815250505b600080600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610ff3576000610f5f600085611cdb565b9050600080600f0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610fba8282611e8e90919063ffffffff16565b8760018a89610fc99190612845565b610fd391906128ce565b81518110610fe457610fe361289f565b5b60200260200101818152505050505b5050508080611001906129e4565b915050610dc0565b5080925050509392505050565b60606000600290506000600290506000818386516110349190612a77565b61103e9190612845565b67ffffffffffffffff811115611057576110566120f6565b5b6040519080825280602002602001820160405280156110855781602001602082028036833780820191505090505b50905060005b8386516110989190612a77565b8110156112e95760008685836110ae9190612845565b815181106110bf576110be61289f565b5b60200260200101519050600087600187856110da9190612845565b6110e491906128ce565b815181106110f5576110f461289f565b5b6020026020010151905060008973ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b815260040161113c929190612aa8565b602060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612ae6565b90508273ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b81526004016111b89190612a2d565b602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190612971565b8587866112069190612845565b815181106112175761121661289f565b5b6020026020010181815250508173ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b815260040161125c9190612a2d565b602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190612971565b85600188876112ac9190612845565b6112b691906128ce565b815181106112c7576112c661289f565b5b60200260200101818152505050505080806112e1906129e4565b91505061108b565b5080935050505092915050565b600080600061131786600060020160149054906101000a900460ff16611b87565b9050600061133786600060020160149054906101000a900460ff16611c10565b90506000611360826113528589611caf90919063ffffffff16565b611cc590919063ffffffff16565b905060006113a0612710611392611383601e612710611c9990919063ffffffff16565b85611caf90919063ffffffff16565b611cc590919063ffffffff16565b905060006113b78284611c9990919063ffffffff16565b9050818196509650505050505094509492505050565b60606000825167ffffffffffffffff8111156113ec576113eb6120f6565b5b60405190808252806020026020018201604052801561141a5781602001602082028036833780820191505090505b50905060005b835181101561156857600084828151811061143e5761143d61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114ba578573ffffffffffffffffffffffffffffffffffffffff16318383815181106114a8576114a761289f565b5b60200260200101818152505050611555565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016114f39190612a2d565b602060405180830381865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612971565b8383815181106115475761154661289f565b5b602002602001018181525050505b8080611560906129e4565b915050611420565b508091505092915050565b60606000600985516115859190612845565b67ffffffffffffffff81111561159e5761159d6120f6565b5b6040519080825280602002602001820160405280156115cc5781602001602082028036833780820191505090505b50905060005b8551811015611a505760008060008060008060003073ffffffffffffffffffffffffffffffffffffffff16634a3f088d8f8f8b815181106116165761161561289f565b5b60200260200101518f8c815181106116315761163061289f565b5b60200260200101518f8d8151811061164c5761164b61289f565b5b60200260200101516040518563ffffffff1660e01b81526004016116739493929190612b13565b61010060405180830381865afa158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190612b6d565b975097509750509650965096509650868960098a6116d39190612845565b815181106116e4576116e361289f565b5b6020026020010181815250508589600160098b6117019190612845565b61170b91906128ce565b8151811061171c5761171b61289f565b5b6020026020010181815250508489600260098b6117399190612845565b61174391906128ce565b815181106117545761175361289f565b5b6020026020010181815250508389600360098b6117719190612845565b61177b91906128ce565b8151811061178c5761178b61289f565b5b602002602001018181525050816117a45760006117a7565b60015b60ff1689600460098b6117ba9190612845565b6117c491906128ce565b815181106117d5576117d461289f565b5b6020026020010181815250508289600560098b6117f29190612845565b6117fc91906128ce565b8151811061180d5761180c61289f565b5b6020026020010181815250508089600660098b61182a9190612845565b61183491906128ce565b815181106118455761184461289f565b5b602002602001018181525050505050505050506000826009836118689190612845565b815181106118795761187861289f565b5b6020026020010151905060008360026009856118959190612845565b61189f91906128ce565b815181106118b0576118af61289f565b5b6020026020010151905060008460066009866118cc9190612845565b6118d691906128ce565b815181106118e7576118e661289f565b5b602002602001015190506000821115611a3a576000803073ffffffffffffffffffffffffffffffffffffffff16635c07eaab8b888151811061192c5761192b61289f565b5b602002602001015187878d8b815181106119495761194861289f565b5b6020026020010151886040518663ffffffff1660e01b8152600401611972959493929190612c23565b6040805180830381865afa15801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b29190612c76565b91509150816119c25760006119c5565b60015b60ff168760076009896119d89190612845565b6119e291906128ce565b815181106119f3576119f261289f565b5b60200260200101818152505080876008600989611a109190612845565b611a1a91906128ce565b81518110611a2b57611a2a61289f565b5b60200260200101818152505050505b5050508080611a48906129e4565b9150506115d2565b508091505095945050505050565b600080611a7d84600060020160149054906101000a900460ff16611b87565b90506000611a9d84600060020160149054906101000a900460ff16611c10565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600d0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611b408284611c9990919063ffffffff16565b90506000611b6986611b5b8785611caf90919063ffffffff16565b611cc590919063ffffffff16565b9050611b786000828a8c611ea4565b96505050505050509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401611bc7939291906129ad565b602060405180830381865afa158015611be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c089190612971565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b8152600401611c50939291906129ad565b602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190612971565b905092915050565b60008183611ca79190612cb6565b905092915050565b60008183611cbd9190612845565b905092915050565b60008183611cd39190612a77565b905092915050565b600042611d346170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e8e90919063ffffffff16565b1115611d435760009050611e88565b6000611dad617080611d9f8660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611c9990919063ffffffff16565b611cc590919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611e0957600092505050611e88565b611e8381611e7584611e6789600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610258611caf90919063ffffffff16565b611caf90919063ffffffff16565b611cc590919063ffffffff16565b925050505b92915050565b60008183611e9c91906128ce565b905092915050565b6000808560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611f45578560070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f48565b60125b905060008660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611fea578660070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fed565b60125b905061202c82600a611fff9190612e1d565b61201e83600a61200f9190612e1d565b89611caf90919063ffffffff16565b611cc590919063ffffffff16565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120778261204c565b9050919050565b6120878161206c565b811461209257600080fd5b50565b6000813590506120a48161207e565b92915050565b6000819050919050565b6120bd816120aa565b81146120c857600080fd5b50565b6000813590506120da816120b4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61212e826120e5565b810181811067ffffffffffffffff8211171561214d5761214c6120f6565b5b80604052505050565b6000612160612038565b905061216c8282612125565b919050565b600067ffffffffffffffff82111561218c5761218b6120f6565b5b602082029050602081019050919050565b600080fd5b60006121b56121b084612171565b612156565b905080838252602082019050602084028301858111156121d8576121d761219d565b5b835b8181101561220157806121ed8882612095565b8452602084019350506020810190506121da565b5050509392505050565b600082601f8301126122205761221f6120e0565b5b81356122308482602086016121a2565b91505092915050565b6000806000806080858703121561225357612252612042565b5b600061226187828801612095565b945050602061227287828801612095565b9350506040612283878288016120cb565b925050606085013567ffffffffffffffff8111156122a4576122a3612047565b5b6122b08782880161220b565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122f1816120aa565b82525050565b600061230383836122e8565b60208301905092915050565b6000602082019050919050565b6000612327826122bc565b61233181856122c7565b935061233c836122d8565b8060005b8381101561236d57815161235488826122f7565b975061235f8361230f565b925050600181019050612340565b5085935050505092915050565b60006020820190508181036000830152612394818461231c565b905092915050565b60006123a78261206c565b9050919050565b6123b78161239c565b81146123c257600080fd5b50565b6000813590506123d4816123ae565b92915050565b600080604083850312156123f1576123f0612042565b5b60006123ff858286016123c5565b925050602083013567ffffffffffffffff8111156124205761241f612047565b5b61242c8582860161220b565b9150509250929050565b61243f816120aa565b82525050565b600060208201905061245a6000830184612436565b92915050565b6000806040838503121561247757612476612042565b5b600061248585828601612095565b925050602083013567ffffffffffffffff8111156124a6576124a5612047565b5b6124b28582860161220b565b9150509250929050565b6000806000606084860312156124d5576124d4612042565b5b60006124e386828701612095565b93505060206124f486828701612095565b925050604084013567ffffffffffffffff81111561251557612514612047565b5b6125218682870161220b565b9150509250925092565b60006125368261206c565b9050919050565b6125468161252b565b811461255157600080fd5b50565b6000813590506125638161253d565b92915050565b6000806000806080858703121561258357612582612042565b5b600061259187828801612554565b94505060206125a287828801612095565b93505060406125b387828801612095565b92505060606125c4878288016120cb565b91505092959194509250565b60006040820190506125e56000830185612436565b6125f26020830184612436565b9392505050565b600067ffffffffffffffff821115612614576126136120f6565b5b602082029050602081019050919050565b60008115159050919050565b61263a81612625565b811461264557600080fd5b50565b60008135905061265781612631565b92915050565b600061267061266b846125f9565b612156565b905080838252602082019050602084028301858111156126935761269261219d565b5b835b818110156126bc57806126a88882612648565b845260208401935050602081019050612695565b5050509392505050565b600082601f8301126126db576126da6120e0565b5b81356126eb84826020860161265d565b91505092915050565b600080600080600060a086880312156127105761270f612042565b5b600061271e88828901612095565b955050602061272f88828901612095565b945050604086013567ffffffffffffffff8111156127505761274f612047565b5b61275c8882890161220b565b935050606086013567ffffffffffffffff81111561277d5761277c612047565b5b6127898882890161220b565b925050608086013567ffffffffffffffff8111156127aa576127a9612047565b5b6127b6888289016126c6565b9150509295509295909350565b6000806000606084860312156127dc576127db612042565b5b60006127ea86828701612554565b93505060206127fb86828701612095565b925050604061280c86828701612095565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612850826120aa565b915061285b836120aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561289457612893612816565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128d9826120aa565b91506128e4836120aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561291957612918612816565b5b828201905092915050565b61292d8161206c565b82525050565b60006040820190506129486000830185612924565b6129556020830184612436565b9392505050565b60008151905061296b816120b4565b92915050565b60006020828403121561298757612986612042565b5b60006129958482850161295c565b91505092915050565b6129a781612625565b82525050565b60006060820190506129c26000830186612924565b6129cf602083018561299e565b6129dc604083018461299e565b949350505050565b60006129ef826120aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a2257612a21612816565b5b600182019050919050565b6000602082019050612a426000830184612924565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a82826120aa565b9150612a8d836120aa565b925082612a9d57612a9c612a48565b5b828204905092915050565b6000604082019050612abd6000830185612924565b612aca6020830184612924565b9392505050565b600081519050612ae08161207e565b92915050565b600060208284031215612afc57612afb612042565b5b6000612b0a84828501612ad1565b91505092915050565b6000608082019050612b286000830187612924565b612b356020830186612924565b612b426040830185612924565b612b4f606083018461299e565b95945050505050565b600081519050612b6781612631565b92915050565b600080600080600080600080610100898b031215612b8e57612b8d612042565b5b6000612b9c8b828c0161295c565b9850506020612bad8b828c0161295c565b9750506040612bbe8b828c0161295c565b9650506060612bcf8b828c0161295c565b9550506080612be08b828c0161295c565b94505060a0612bf18b828c0161295c565b93505060c0612c028b828c01612b58565b92505060e0612c138b828c0161295c565b9150509295985092959890939650565b600060a082019050612c386000830188612924565b612c456020830187612436565b612c526040830186612436565b612c5f606083018561299e565b612c6c6080830184612436565b9695505050505050565b60008060408385031215612c8d57612c8c612042565b5b6000612c9b85828601612b58565b9250506020612cac8582860161295c565b9150509250929050565b6000612cc1826120aa565b9150612ccc836120aa565b925082821015612cdf57612cde612816565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b6001851115612d4157808604811115612d1d57612d1c612816565b5b6001851615612d2c5780820291505b8081029050612d3a85612cea565b9450612d01565b94509492505050565b600082612d5a5760019050612e16565b81612d685760009050612e16565b8160018114612d7e5760028114612d8857612db7565b6001915050612e16565b60ff841115612d9a57612d99612816565b5b8360020a915084821115612db157612db0612816565b5b50612e16565b5060208310610133831016604e8410600b8410161715612dec5782820a905083811115612de757612de6612816565b5b612e16565b612df98484846001612cf7565b92509050818404811115612e1057612e0f612816565b5b81810290505b9392505050565b6000612e28826120aa565b9150612e33836120aa565b9250612e607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612d4a565b90509291505056fea2646970667358221220fecfdaff64d98d6875d303f00d04116f530f42acf668cf1dec8646abee61a49c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a4543ead11610066578063a4543ead14610193578063d7176ca9146101c3578063d802178e146101f4578063dc383cab14610224578063f3535e6c146102545761009e565b806320542568146100a35780632ac0184c146100d35780632e3e33421461010357806386d4d0f51461013357806395a7535a14610163575b600080fd5b6100bd60048036038101906100b89190612239565b610284565b6040516100ca919061237a565b60405180910390f35b6100ed60048036038101906100e891906123da565b610869565b6040516100fa9190612445565b60405180910390f35b61011d60048036038101906101189190612460565b6109bb565b60405161012a919061237a565b60405180910390f35b61014d60048036038101906101489190612460565b610c66565b60405161015a919061237a565b60405180910390f35b61017d600480360381019061017891906124bc565b610d5c565b60405161018a919061237a565b60405180910390f35b6101ad60048036038101906101a89190612460565b611016565b6040516101ba919061237a565b60405180910390f35b6101dd60048036038101906101d89190612569565b6112f6565b6040516101eb9291906125d0565b60405180910390f35b61020e60048036038101906102099190612460565b6113cd565b60405161021b919061237a565b60405180910390f35b61023e600480360381019061023991906126f4565b611573565b60405161024b919061237a565b60405180910390f35b61026e600480360381019061026991906127c3565b611a5e565b60405161027b9190612445565b60405180910390f35b60606000600990506000309050600030905060008386516102a59190612845565b67ffffffffffffffff8111156102be576102bd6120f6565b5b6040519080825280602002602001820160405280156102ec5781602001602082028036833780820191505090505b50905060005b86518110156108595760008782815181106103105761030f61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610353578990505b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610845576000600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548387846103fb9190612845565b8151811061040c5761040b61289f565b5b6020026020010181815250506000600d0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836001888561046a9190612845565b61047491906128ce565b815181106104855761048461289f565b5b6020026020010181815250506000600b0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600288856104e39190612845565b6104ed91906128ce565b815181106104fe576104fd61289f565b5b6020026020010181815250508473ffffffffffffffffffffffffffffffffffffffff16632c668ec1828b6040518363ffffffff1660e01b8152600401610545929190612933565b602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190612971565b83600388856105959190612845565b61059f91906128ce565b815181106105b0576105af61289f565b5b6020026020010181815250506105d881600060020160149054906101000a900460ff16611b87565b83600488856105e79190612845565b6105f191906128ce565b815181106106025761060161289f565b5b60200260200101818152505061062a81600060020160149054906101000a900460ff16611c10565b83600588856106399190612845565b61064391906128ce565b815181106106545761065361289f565b5b6020026020010181815250506000600e0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600688856106b29190612845565b6106bc91906128ce565b815181106106cd576106cc61289f565b5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae69163826000806040518463ffffffff1660e01b8152600401610717939291906129ad565b602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190612971565b83600788856107679190612845565b61077191906128ce565b815181106107825761078161289f565b5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae6916382600160006040518463ffffffff1660e01b81526004016107cd939291906129ad565b602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190612971565b836008888561081d9190612845565b61082791906128ce565b815181106108385761083761289f565b5b6020026020010181815250505b508080610851906129e4565b9150506102f2565b5080945050505050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190612971565b905060005b83518110156109b05760008482815181106108fe576108fd61289f565b5b6020026020010151905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016109439190612a2d565b602060405180830381865afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109849190612971565b90506109998185611c9990919063ffffffff16565b9350505080806109a8906129e4565b9150506108e0565b508091505092915050565b606060006002905060008184516109d29190612845565b67ffffffffffffffff8111156109eb576109ea6120f6565b5b604051908082528060200260200182016040528015610a195781602001602082028036833780820191505090505b50905060005b8451811015610c5a576000858281518110610a3d57610a3c61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afc578673ffffffffffffffffffffffffffffffffffffffff1631838584610aa19190612845565b81518110610ab257610ab161289f565b5b60200260200101818152505060008360018685610acf9190612845565b610ad991906128ce565b81518110610aea57610ae961289f565b5b60200260200101818152505050610c47565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401610b359190612a2d565b602060405180830381865afa158015610b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b769190612971565b838584610b839190612845565b81518110610b9457610b9361289f565b5b6020026020010181815250508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612971565b8360018685610c1e9190612845565b610c2891906128ce565b81518110610c3957610c3861289f565b5b602002602001018181525050505b8080610c52906129e4565b915050610a1f565b50809250505092915050565b60606000825167ffffffffffffffff811115610c8557610c846120f6565b5b604051908082528060200260200182016040528015610cb35781602001602082028036833780820191505090505b50905060005b8351811015610d515760006011016000858381518110610cdc57610cdb61289f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610d3257610d3161289f565b5b6020026020010181815250508080610d49906129e4565b915050610cb9565b508091505092915050565b60606000600290506000818451610d739190612845565b67ffffffffffffffff811115610d8c57610d8b6120f6565b5b604051908082528060200260200182016040528015610dba5781602001602082028036833780820191505090505b50905060005b8451811015611009576000858281518110610dde57610ddd61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e21578690505b600080600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610f0857610edd81610ecf84610258611caf90919063ffffffff16565b611cc590919063ffffffff16565b858786610eea9190612845565b81518110610efb57610efa61289f565b5b6020026020010181815250505b600080600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610ff3576000610f5f600085611cdb565b9050600080600f0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610fba8282611e8e90919063ffffffff16565b8760018a89610fc99190612845565b610fd391906128ce565b81518110610fe457610fe361289f565b5b60200260200101818152505050505b5050508080611001906129e4565b915050610dc0565b5080925050509392505050565b60606000600290506000600290506000818386516110349190612a77565b61103e9190612845565b67ffffffffffffffff811115611057576110566120f6565b5b6040519080825280602002602001820160405280156110855781602001602082028036833780820191505090505b50905060005b8386516110989190612a77565b8110156112e95760008685836110ae9190612845565b815181106110bf576110be61289f565b5b60200260200101519050600087600187856110da9190612845565b6110e491906128ce565b815181106110f5576110f461289f565b5b6020026020010151905060008973ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b815260040161113c929190612aa8565b602060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612ae6565b90508273ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b81526004016111b89190612a2d565b602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190612971565b8587866112069190612845565b815181106112175761121661289f565b5b6020026020010181815250508173ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b815260040161125c9190612a2d565b602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190612971565b85600188876112ac9190612845565b6112b691906128ce565b815181106112c7576112c661289f565b5b60200260200101818152505050505080806112e1906129e4565b91505061108b565b5080935050505092915050565b600080600061131786600060020160149054906101000a900460ff16611b87565b9050600061133786600060020160149054906101000a900460ff16611c10565b90506000611360826113528589611caf90919063ffffffff16565b611cc590919063ffffffff16565b905060006113a0612710611392611383601e612710611c9990919063ffffffff16565b85611caf90919063ffffffff16565b611cc590919063ffffffff16565b905060006113b78284611c9990919063ffffffff16565b9050818196509650505050505094509492505050565b60606000825167ffffffffffffffff8111156113ec576113eb6120f6565b5b60405190808252806020026020018201604052801561141a5781602001602082028036833780820191505090505b50905060005b835181101561156857600084828151811061143e5761143d61289f565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114ba578573ffffffffffffffffffffffffffffffffffffffff16318383815181106114a8576114a761289f565b5b60200260200101818152505050611555565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016114f39190612a2d565b602060405180830381865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612971565b8383815181106115475761154661289f565b5b602002602001018181525050505b8080611560906129e4565b915050611420565b508091505092915050565b60606000600985516115859190612845565b67ffffffffffffffff81111561159e5761159d6120f6565b5b6040519080825280602002602001820160405280156115cc5781602001602082028036833780820191505090505b50905060005b8551811015611a505760008060008060008060003073ffffffffffffffffffffffffffffffffffffffff16634a3f088d8f8f8b815181106116165761161561289f565b5b60200260200101518f8c815181106116315761163061289f565b5b60200260200101518f8d8151811061164c5761164b61289f565b5b60200260200101516040518563ffffffff1660e01b81526004016116739493929190612b13565b61010060405180830381865afa158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190612b6d565b975097509750509650965096509650868960098a6116d39190612845565b815181106116e4576116e361289f565b5b6020026020010181815250508589600160098b6117019190612845565b61170b91906128ce565b8151811061171c5761171b61289f565b5b6020026020010181815250508489600260098b6117399190612845565b61174391906128ce565b815181106117545761175361289f565b5b6020026020010181815250508389600360098b6117719190612845565b61177b91906128ce565b8151811061178c5761178b61289f565b5b602002602001018181525050816117a45760006117a7565b60015b60ff1689600460098b6117ba9190612845565b6117c491906128ce565b815181106117d5576117d461289f565b5b6020026020010181815250508289600560098b6117f29190612845565b6117fc91906128ce565b8151811061180d5761180c61289f565b5b6020026020010181815250508089600660098b61182a9190612845565b61183491906128ce565b815181106118455761184461289f565b5b602002602001018181525050505050505050506000826009836118689190612845565b815181106118795761187861289f565b5b6020026020010151905060008360026009856118959190612845565b61189f91906128ce565b815181106118b0576118af61289f565b5b6020026020010151905060008460066009866118cc9190612845565b6118d691906128ce565b815181106118e7576118e661289f565b5b602002602001015190506000821115611a3a576000803073ffffffffffffffffffffffffffffffffffffffff16635c07eaab8b888151811061192c5761192b61289f565b5b602002602001015187878d8b815181106119495761194861289f565b5b6020026020010151886040518663ffffffff1660e01b8152600401611972959493929190612c23565b6040805180830381865afa15801561198e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b29190612c76565b91509150816119c25760006119c5565b60015b60ff168760076009896119d89190612845565b6119e291906128ce565b815181106119f3576119f261289f565b5b60200260200101818152505080876008600989611a109190612845565b611a1a91906128ce565b81518110611a2b57611a2a61289f565b5b60200260200101818152505050505b5050508080611a48906129e4565b9150506115d2565b508091505095945050505050565b600080611a7d84600060020160149054906101000a900460ff16611b87565b90506000611a9d84600060020160149054906101000a900460ff16611c10565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600d0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611b408284611c9990919063ffffffff16565b90506000611b6986611b5b8785611caf90919063ffffffff16565b611cc590919063ffffffff16565b9050611b786000828a8c611ea4565b96505050505050509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401611bc7939291906129ad565b602060405180830381865afa158015611be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c089190612971565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b8152600401611c50939291906129ad565b602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190612971565b905092915050565b60008183611ca79190612cb6565b905092915050565b60008183611cbd9190612845565b905092915050565b60008183611cd39190612a77565b905092915050565b600042611d346170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e8e90919063ffffffff16565b1115611d435760009050611e88565b6000611dad617080611d9f8660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442611c9990919063ffffffff16565b611cc590919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611e0957600092505050611e88565b611e8381611e7584611e6789600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610258611caf90919063ffffffff16565b611caf90919063ffffffff16565b611cc590919063ffffffff16565b925050505b92915050565b60008183611e9c91906128ce565b905092915050565b6000808560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611f45578560070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f48565b60125b905060008660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611fea578660070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611fed565b60125b905061202c82600a611fff9190612e1d565b61201e83600a61200f9190612e1d565b89611caf90919063ffffffff16565b611cc590919063ffffffff16565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120778261204c565b9050919050565b6120878161206c565b811461209257600080fd5b50565b6000813590506120a48161207e565b92915050565b6000819050919050565b6120bd816120aa565b81146120c857600080fd5b50565b6000813590506120da816120b4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61212e826120e5565b810181811067ffffffffffffffff8211171561214d5761214c6120f6565b5b80604052505050565b6000612160612038565b905061216c8282612125565b919050565b600067ffffffffffffffff82111561218c5761218b6120f6565b5b602082029050602081019050919050565b600080fd5b60006121b56121b084612171565b612156565b905080838252602082019050602084028301858111156121d8576121d761219d565b5b835b8181101561220157806121ed8882612095565b8452602084019350506020810190506121da565b5050509392505050565b600082601f8301126122205761221f6120e0565b5b81356122308482602086016121a2565b91505092915050565b6000806000806080858703121561225357612252612042565b5b600061226187828801612095565b945050602061227287828801612095565b9350506040612283878288016120cb565b925050606085013567ffffffffffffffff8111156122a4576122a3612047565b5b6122b08782880161220b565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122f1816120aa565b82525050565b600061230383836122e8565b60208301905092915050565b6000602082019050919050565b6000612327826122bc565b61233181856122c7565b935061233c836122d8565b8060005b8381101561236d57815161235488826122f7565b975061235f8361230f565b925050600181019050612340565b5085935050505092915050565b60006020820190508181036000830152612394818461231c565b905092915050565b60006123a78261206c565b9050919050565b6123b78161239c565b81146123c257600080fd5b50565b6000813590506123d4816123ae565b92915050565b600080604083850312156123f1576123f0612042565b5b60006123ff858286016123c5565b925050602083013567ffffffffffffffff8111156124205761241f612047565b5b61242c8582860161220b565b9150509250929050565b61243f816120aa565b82525050565b600060208201905061245a6000830184612436565b92915050565b6000806040838503121561247757612476612042565b5b600061248585828601612095565b925050602083013567ffffffffffffffff8111156124a6576124a5612047565b5b6124b28582860161220b565b9150509250929050565b6000806000606084860312156124d5576124d4612042565b5b60006124e386828701612095565b93505060206124f486828701612095565b925050604084013567ffffffffffffffff81111561251557612514612047565b5b6125218682870161220b565b9150509250925092565b60006125368261206c565b9050919050565b6125468161252b565b811461255157600080fd5b50565b6000813590506125638161253d565b92915050565b6000806000806080858703121561258357612582612042565b5b600061259187828801612554565b94505060206125a287828801612095565b93505060406125b387828801612095565b92505060606125c4878288016120cb565b91505092959194509250565b60006040820190506125e56000830185612436565b6125f26020830184612436565b9392505050565b600067ffffffffffffffff821115612614576126136120f6565b5b602082029050602081019050919050565b60008115159050919050565b61263a81612625565b811461264557600080fd5b50565b60008135905061265781612631565b92915050565b600061267061266b846125f9565b612156565b905080838252602082019050602084028301858111156126935761269261219d565b5b835b818110156126bc57806126a88882612648565b845260208401935050602081019050612695565b5050509392505050565b600082601f8301126126db576126da6120e0565b5b81356126eb84826020860161265d565b91505092915050565b600080600080600060a086880312156127105761270f612042565b5b600061271e88828901612095565b955050602061272f88828901612095565b945050604086013567ffffffffffffffff8111156127505761274f612047565b5b61275c8882890161220b565b935050606086013567ffffffffffffffff81111561277d5761277c612047565b5b6127898882890161220b565b925050608086013567ffffffffffffffff8111156127aa576127a9612047565b5b6127b6888289016126c6565b9150509295509295909350565b6000806000606084860312156127dc576127db612042565b5b60006127ea86828701612554565b93505060206127fb86828701612095565b925050604061280c86828701612095565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612850826120aa565b915061285b836120aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561289457612893612816565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128d9826120aa565b91506128e4836120aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561291957612918612816565b5b828201905092915050565b61292d8161206c565b82525050565b60006040820190506129486000830185612924565b6129556020830184612436565b9392505050565b60008151905061296b816120b4565b92915050565b60006020828403121561298757612986612042565b5b60006129958482850161295c565b91505092915050565b6129a781612625565b82525050565b60006060820190506129c26000830186612924565b6129cf602083018561299e565b6129dc604083018461299e565b949350505050565b60006129ef826120aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a2257612a21612816565b5b600182019050919050565b6000602082019050612a426000830184612924565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a82826120aa565b9150612a8d836120aa565b925082612a9d57612a9c612a48565b5b828204905092915050565b6000604082019050612abd6000830185612924565b612aca6020830184612924565b9392505050565b600081519050612ae08161207e565b92915050565b600060208284031215612afc57612afb612042565b5b6000612b0a84828501612ad1565b91505092915050565b6000608082019050612b286000830187612924565b612b356020830186612924565b612b426040830185612924565b612b4f606083018461299e565b95945050505050565b600081519050612b6781612631565b92915050565b600080600080600080600080610100898b031215612b8e57612b8d612042565b5b6000612b9c8b828c0161295c565b9850506020612bad8b828c0161295c565b9750506040612bbe8b828c0161295c565b9650506060612bcf8b828c0161295c565b9550506080612be08b828c0161295c565b94505060a0612bf18b828c0161295c565b93505060c0612c028b828c01612b58565b92505060e0612c138b828c0161295c565b9150509295985092959890939650565b600060a082019050612c386000830188612924565b612c456020830187612436565b612c526040830186612436565b612c5f606083018561299e565b612c6c6080830184612436565b9695505050505050565b60008060408385031215612c8d57612c8c612042565b5b6000612c9b85828601612b58565b9250506020612cac8582860161295c565b9150509250929050565b6000612cc1826120aa565b9150612ccc836120aa565b925082821015612cdf57612cde612816565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b6001851115612d4157808604811115612d1d57612d1c612816565b5b6001851615612d2c5780820291505b8081029050612d3a85612cea565b9450612d01565b94509492505050565b600082612d5a5760019050612e16565b81612d685760009050612e16565b8160018114612d7e5760028114612d8857612db7565b6001915050612e16565b60ff841115612d9a57612d99612816565b5b8360020a915084821115612db157612db0612816565b5b50612e16565b5060208310610133831016604e8410600b8410161715612dec5782820a905083811115612de757612de6612816565b5b612e16565b612df98484846001612cf7565b92509050818404811115612e1057612e0f612816565b5b81810290505b9392505050565b6000612e28826120aa565b9150612e33836120aa565b9250612e607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612d4a565b90509291505056fea2646970667358221220fecfdaff64d98d6875d303f00d04116f530f42acf668cf1dec8646abee61a49c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12531,
        "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21042_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)20927_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)20927_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)20927_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 20914,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20916,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20918,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20920,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20922,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20924,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 20926,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)21042_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 20929,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20931,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20933,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20935,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20937,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 20939,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 20942,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 20946,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20951,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)20927_storage)"
          },
          {
            "astId": 20955,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20959,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20963,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20967,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20971,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "ndolAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20975,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20979,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20983,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20987,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20991,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20995,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20999,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21001,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 21005,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21009,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21013,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21017,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21021,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21025,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21027,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 21029,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 21033,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 21035,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "totalNDOLMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 21041,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "ndolMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}