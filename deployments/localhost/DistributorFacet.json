{
  "address": "0xA7029559D3d6e34B84B15b19d68b2d4dfBd940F6",
  "abi": [
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "nextRewardAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "nextRewardFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2a0e4ac41d1e77c9f5c766773e22b42aa9b00594b1f869cf8d638d09b85ad97",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xA7029559D3d6e34B84B15b19d68b2d4dfBd940F6",
    "transactionIndex": 0,
    "gasUsed": "674873",
    "logsBloom": "0x
    "blockHash": "0x584cf2cce4e305558ff3bcbc196c650e4e9d59172737ce7a6d88f7f4ae2e6558",
    "transactionHash": "0xb2a0e4ac41d1e77c9f5c766773e22b42aa9b00594b1f869cf8d638d09b85ad97",
    "logs": [],
    "blockNumber": 54678169,
    "cumulativeGasUsed": "674873",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6cb46e1129665aecf43fff40b13b2808",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nextRewardAt(uint256)\":{\"params\":{\"_rate\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"nextRewardFor(address)\":{\"params\":{\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distribute()\":{\"notice\":\"send epoch reward to staking contract\"},\"nextRewardAt(uint256)\":{\"notice\":\"view function for next reward at given rate\"},\"nextRewardFor(address)\":{\"notice\":\"view function for next reward for specified address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/DistributorFacet.sol\":\"DistributorFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a4171a71240b68dc37f64342ab46f8f395e8a4f45b41398121003056549690f\",\"license\":\"MIT\"},\"contracts/facets/Bond/DistributorFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Facet.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface ITreasury {\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n}\\n\\ncontract DistributorFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /* ====== PUBLIC FUNCTIONS ====== */\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function distribute() external returns (bool) {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        bool _success = true;\\n        for (\\n            uint256 _principleIndex = 0;\\n            _principleIndex < _principleLength;\\n            _principleIndex++\\n        ) {\\n            if (s.nextEpochTimestamp[_principleIndex] <= block.timestamp) {\\n                s.nextEpochTimestamp[_principleIndex] = s\\n                    .nextEpochTimestamp[_principleIndex]\\n                    .add(s.epochLength); // set next epoch timestamp\\n\\n                // distribute rewards to each recipient\\n                for (uint256 i = 0; i < s.info.length; i++) {\\n                    if (s.info[i].rate > 0) {\\n                        ITreasury(s.treasury).mintRewards( // mint and send from treasury\\n                            s.info[i].recipient,\\n                            nextRewardAt(s.info[i].rate)\\n                        );\\n                        adjust(i); // check for adjustment\\n                    }\\n                }\\n            } else {\\n                _success = false;\\n            }\\n        }\\n\\n        return _success;\\n    }\\n\\n    /* ====== INTERNAL FUNCTIONS ====== */\\n\\n    /**\\n        @notice increment reward rate for collector\\n     */\\n    function adjust(uint256 _index) internal {\\n        LibBondStorage.DistributorAdjustment storage adjustment = s\\n            .distributorAdjustments[_index];\\n\\n        if (adjustment.rate != 0) {\\n            if (adjustment.add) {\\n                // if rate should increase\\n                s.info[_index].rate = s.info[_index].rate.add(adjustment.rate); // raise rate\\n                if (s.info[_index].rate >= adjustment.target) {\\n                    // if target met\\n                    s.distributorAdjustments[_index].rate = 0; // turn off distributorAdjustment\\n                }\\n            } else {\\n                // if rate should decrease\\n                if (s.info[_index].rate > adjustment.rate) {\\n                    // protect from underflow\\n                    s.info[_index].rate = s.info[_index].rate.sub(\\n                        adjustment.rate\\n                    ); // lower rate\\n                } else {\\n                    s.info[_index].rate = 0;\\n                }\\n\\n                if (s.info[_index].rate <= adjustment.target) {\\n                    // if target met\\n                    s.distributorAdjustments[_index].rate = 0; // turn off adjustment\\n                    s.info[_index].rate = adjustment.target; // set to target\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ====== VIEW FUNCTIONS ====== */\\n\\n    /**\\n        @notice view function for next reward at given rate\\n        @param _rate uint\\n        @return uint\\n     */\\n    function nextRewardAt(uint256 _rate) public view returns (uint256) {\\n        return IERC20(s.Necc).totalSupply().mul(_rate).div(1000000);\\n    }\\n\\n    /**\\n        @notice view function for next reward for specified address\\n        @param _recipient address\\n        @return uint\\n     */\\n    function nextRewardFor(address _recipient) public view returns (uint256) {\\n        uint256 reward;\\n        for (uint256 i = 0; i < s.info.length; i++) {\\n            if (s.info[i].recipient == _recipient) {\\n                reward = nextRewardAt(s.info[i].rate);\\n            }\\n        }\\n        return reward;\\n    }\\n}\\n\",\"keccak256\":\"0x05b223a9d66f6fdf014938ead48e08b116c518e25cc1debb515c7a72ffbc2ab6\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address sNecc; // token given for staking\\n        address nNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0x99f3f5202ed90e964deaeff2198b2bb9638b6a13c12c792712b299c18180283b\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b48806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806336d33f4414610046578063c9fa8b2a14610076578063e4fc6b6d146100a6575b600080fd5b610060600480360381019061005b91906107bd565b6100c4565b60405161006d9190610803565b60405180910390f35b610090600480360381019061008b919061084a565b6101a7565b60405161009d9190610803565b60405180910390f35b6100ae61026a565b6040516100bb9190610892565b60405180910390f35b60008060005b60006011018054905081101561019d578373ffffffffffffffffffffffffffffffffffffffff1660006011018281548110610108576101076108ad565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561018a57610187600060110182815481106101705761016f6108ad565b5b9060005260206000209060020201600001546101a7565b91505b80806101959061090b565b9150506100ca565b5080915050919050565b6000610263620f4240610255846000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610969565b61048390919063ffffffff16565b61049990919063ffffffff16565b9050919050565b60008061027a60006008016104af565b905060006001905060005b8281101561047a57426000600f0160008381526020019081526020016000205411610462576102d86000601701546000600f016000848152602001908152602001600020546104c490919063ffffffff16565b6000600f0160008381526020019081526020016000208190555060005b60006011018054905081101561045c57600080601101828154811061031d5761031c6108ad565b5b906000526020600020906002020160000154111561044957600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de926000601101838154811061038d5761038c6108ad565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103f0600060110185815481106103d9576103d86108ad565b5b9060005260206000209060020201600001546101a7565b6040518363ffffffff1660e01b815260040161040d9291906109a5565b600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b50505050610448816104da565b5b80806104549061090b565b9150506102f5565b50610467565b600091505b80806104729061090b565b915050610285565b50809250505090565b6000818361049191906109ce565b905092915050565b600081836104a79190610a57565b905092915050565b60006104bd82600001610733565b9050919050565b600081836104d29190610a88565b905092915050565b60008060120160008381526020019081526020016000209050600081600101541461072f578060000160009054906101000a900460ff16156105d857610555816001015460006011018481548110610535576105346108ad565b5b9060005260206000209060020201600001546104c490919063ffffffff16565b6000601101838154811061056c5761056b6108ad565b5b90600052602060002090600202016000018190555080600201546000601101838154811061059d5761059c6108ad565b5b906000526020600020906002020160000154106105d3576000806012016000848152602001908152602001600020600101819055505b61072e565b8060010154600060110183815481106105f4576105f36108ad565b5b906000526020600020906002020160000154111561067c5761064b81600101546000601101848154811061062b5761062a6108ad565b5b90600052602060002090600202016000015461074490919063ffffffff16565b60006011018381548110610662576106616108ad565b5b9060005260206000209060020201600001819055506106aa565b6000806011018381548110610694576106936108ad565b5b9060005260206000209060020201600001819055505b8060020154600060110183815481106106c6576106c56108ad565b5b9060005260206000209060020201600001541161072d57600080601201600084815260200190815260200160002060010181905550806002015460006011018381548110610717576107166108ad565b5b9060005260206000209060020201600001819055505b5b5b5050565b600081600001805490509050919050565b600081836107529190610ade565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078a8261075f565b9050919050565b61079a8161077f565b81146107a557600080fd5b50565b6000813590506107b781610791565b92915050565b6000602082840312156107d3576107d261075a565b5b60006107e1848285016107a8565b91505092915050565b6000819050919050565b6107fd816107ea565b82525050565b600060208201905061081860008301846107f4565b92915050565b610827816107ea565b811461083257600080fd5b50565b6000813590506108448161081e565b92915050565b6000602082840312156108605761085f61075a565b5b600061086e84828501610835565b91505092915050565b60008115159050919050565b61088c81610877565b82525050565b60006020820190506108a76000830184610883565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610916826107ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610949576109486108dc565b5b600182019050919050565b6000815190506109638161081e565b92915050565b60006020828403121561097f5761097e61075a565b5b600061098d84828501610954565b91505092915050565b61099f8161077f565b82525050565b60006040820190506109ba6000830185610996565b6109c760208301846107f4565b9392505050565b60006109d9826107ea565b91506109e4836107ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1d57610a1c6108dc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a62826107ea565b9150610a6d836107ea565b925082610a7d57610a7c610a28565b5b828204905092915050565b6000610a93826107ea565b9150610a9e836107ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ad357610ad26108dc565b5b828201905092915050565b6000610ae9826107ea565b9150610af4836107ea565b925082821015610b0757610b066108dc565b5b82820390509291505056fea26469706673582212202421a37387ac0ec857ad6bd4070e9938cd777b66a1e849e868b903b06aaee39864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806336d33f4414610046578063c9fa8b2a14610076578063e4fc6b6d146100a6575b600080fd5b610060600480360381019061005b91906107bd565b6100c4565b60405161006d9190610803565b60405180910390f35b610090600480360381019061008b919061084a565b6101a7565b60405161009d9190610803565b60405180910390f35b6100ae61026a565b6040516100bb9190610892565b60405180910390f35b60008060005b60006011018054905081101561019d578373ffffffffffffffffffffffffffffffffffffffff1660006011018281548110610108576101076108ad565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561018a57610187600060110182815481106101705761016f6108ad565b5b9060005260206000209060020201600001546101a7565b91505b80806101959061090b565b9150506100ca565b5080915050919050565b6000610263620f4240610255846000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610969565b61048390919063ffffffff16565b61049990919063ffffffff16565b9050919050565b60008061027a60006008016104af565b905060006001905060005b8281101561047a57426000600f0160008381526020019081526020016000205411610462576102d86000601701546000600f016000848152602001908152602001600020546104c490919063ffffffff16565b6000600f0160008381526020019081526020016000208190555060005b60006011018054905081101561045c57600080601101828154811061031d5761031c6108ad565b5b906000526020600020906002020160000154111561044957600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de926000601101838154811061038d5761038c6108ad565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103f0600060110185815481106103d9576103d86108ad565b5b9060005260206000209060020201600001546101a7565b6040518363ffffffff1660e01b815260040161040d9291906109a5565b600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b50505050610448816104da565b5b80806104549061090b565b9150506102f5565b50610467565b600091505b80806104729061090b565b915050610285565b50809250505090565b6000818361049191906109ce565b905092915050565b600081836104a79190610a57565b905092915050565b60006104bd82600001610733565b9050919050565b600081836104d29190610a88565b905092915050565b60008060120160008381526020019081526020016000209050600081600101541461072f578060000160009054906101000a900460ff16156105d857610555816001015460006011018481548110610535576105346108ad565b5b9060005260206000209060020201600001546104c490919063ffffffff16565b6000601101838154811061056c5761056b6108ad565b5b90600052602060002090600202016000018190555080600201546000601101838154811061059d5761059c6108ad565b5b906000526020600020906002020160000154106105d3576000806012016000848152602001908152602001600020600101819055505b61072e565b8060010154600060110183815481106105f4576105f36108ad565b5b906000526020600020906002020160000154111561067c5761064b81600101546000601101848154811061062b5761062a6108ad565b5b90600052602060002090600202016000015461074490919063ffffffff16565b60006011018381548110610662576106616108ad565b5b9060005260206000209060020201600001819055506106aa565b6000806011018381548110610694576106936108ad565b5b9060005260206000209060020201600001819055505b8060020154600060110183815481106106c6576106c56108ad565b5b9060005260206000209060020201600001541161072d57600080601201600084815260200190815260200160002060010181905550806002015460006011018381548110610717576107166108ad565b5b9060005260206000209060020201600001819055505b5b5b5050565b600081600001805490509050919050565b600081836107529190610ade565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078a8261075f565b9050919050565b61079a8161077f565b81146107a557600080fd5b50565b6000813590506107b781610791565b92915050565b6000602082840312156107d3576107d261075a565b5b60006107e1848285016107a8565b91505092915050565b6000819050919050565b6107fd816107ea565b82525050565b600060208201905061081860008301846107f4565b92915050565b610827816107ea565b811461083257600080fd5b50565b6000813590506108448161081e565b92915050565b6000602082840312156108605761085f61075a565b5b600061086e84828501610835565b91505092915050565b60008115159050919050565b61088c81610877565b82525050565b60006020820190506108a76000830184610883565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610916826107ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610949576109486108dc565b5b600182019050919050565b6000815190506109638161081e565b92915050565b60006020828403121561097f5761097e61075a565b5b600061098d84828501610954565b91505092915050565b61099f8161077f565b82525050565b60006040820190506109ba6000830185610996565b6109c760208301846107f4565b9392505050565b60006109d9826107ea565b91506109e4836107ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1d57610a1c6108dc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a62826107ea565b9150610a6d836107ea565b925082610a7d57610a7c610a28565b5b828204905092915050565b6000610a93826107ea565b9150610a9e836107ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ad357610ad26108dc565b5b828201905092915050565b6000610ae9826107ea565b9150610af4836107ea565b925082821015610b0757610b066108dc565b5b82820390509291505056fea26469706673582212202421a37387ac0ec857ad6bd4070e9938cd777b66a1e849e868b903b06aaee39864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "nextRewardAt(uint256)": {
        "params": {
          "_rate": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardFor(address)": {
        "params": {
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distribute()": {
        "notice": "send epoch reward to staking contract"
      },
      "nextRewardAt(uint256)": {
        "notice": "view function for next reward at given rate"
      },
      "nextRewardFor(address)": {
        "notice": "view function for next reward for specified address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2261,
        "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)5583_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)5437_storage)dyn_storage": {
        "base": "t_struct(Info)5437_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)5432_storage)dyn_storage": {
        "base": "t_struct(Payout)5432_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)5468_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)5468_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)5495_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)5495_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)5432_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)5432_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)5468_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)5468_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)5477_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)5477_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)5444_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)5444_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)5459_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)5459_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1222_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1221,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)921_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)5468_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 5461,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5463,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5465,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5467,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)5477_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 5470,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5472,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5474,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5476,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)5495_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 5488,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5490,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5492,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5494,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)5444_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 5439,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5441,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5443,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)5486_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 5479,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5481,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5483,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5485,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)5437_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 5434,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5436,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)5432_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 5429,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5431,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)921_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 916,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 920,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)5583_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 5497,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5499,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5501,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5503,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5505,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5507,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5509,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5511,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5514,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1222_storage"
          },
          {
            "astId": 5519,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)5459_storage)"
          },
          {
            "astId": 5524,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)5477_storage)"
          },
          {
            "astId": 5531,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)5468_storage))"
          },
          {
            "astId": 5535,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5539,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5543,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5547,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5551,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)5437_storage)dyn_storage"
          },
          {
            "astId": 5556,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)5444_storage)"
          },
          {
            "astId": 5559,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)5486_storage"
          },
          {
            "astId": 5561,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 5563,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 5565,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 5567,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 5572,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)5495_storage)"
          },
          {
            "astId": 5574,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 5580,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)5432_storage)dyn_storage)"
          },
          {
            "astId": 5582,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)5459_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 5446,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5448,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5450,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5452,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5454,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5456,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5458,
            "contract": "contracts/facets/Bond/DistributorFacet.sol:DistributorFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}