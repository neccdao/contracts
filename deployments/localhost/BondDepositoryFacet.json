{
  "address": "0x0E63AAd7E9f67B474e9902Ec7835B7cfA511a11a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "BCV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "BCV_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vesting",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Bond",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "controlVariable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTerm",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLiquidityBond",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Terms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87bda701c40d939a48c88c4d714ab0c6de85a3061ae3aa67f9da97531b7130b5",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x0E63AAd7E9f67B474e9902Ec7835B7cfA511a11a",
    "transactionIndex": 0,
    "gasUsed": "3898419",
    "logsBloom": "0x
    "blockHash": "0x61d6bdcf4481c2d059f7b43bdb287753af890f90dcd88b38a305b743d4b8c4f7",
    "transactionHash": "0x87bda701c40d939a48c88c4d714ab0c6de85a3061ae3aa67f9da97531b7130b5",
    "logs": [],
    "blockNumber": 9724579,
    "cumulativeGasUsed": "3898419",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "abf82ec0881c7b670342fb1d07d67e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"BCV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BCV_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Bond\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityBond\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Terms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice(address)\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD(address)\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt(address)\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay(address)\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio(address)\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"maxPayout(address)\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256,address)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"redeem(address,address,bool)\":{\"params\":{\"_recipient\":\"address\",\"_stake\":\"bool\"},\"returns\":{\"_0\":\"uint\"}},\"standardizedDebtRatio(address)\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetPrice(address)\":{\"notice\":\"get asset price from chainlink\"},\"bondPrice(address)\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD(address)\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt(address)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(address)\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio(address)\":{\"notice\":\"calculate current ratio of debt to Necc supply\"},\"deposit(uint256,uint256,address,address)\":{\"notice\":\"deposit bond\"},\"maxPayout(address)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256,address)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address,address)\":{\"notice\":\"calculate amount of Necc available for claim by depositor\"},\"percentVestedFor(address,address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address,address,bool)\":{\"notice\":\"redeem bond for user\"},\"standardizedDebtRatio(address)\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BondDepositoryFacet.sol\":\"BondDepositoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryFacet.sol\":{\"content\":\"pragma abicoder v2;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../lib/FixedPoint.sol\\\";\\nimport \\\"../../lib/FullMath.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\n// Chainlink price feed\\ninterface IOracle {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface ITreasury {\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_);\\n\\n    function valueOfToken(address _token, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 value_);\\n}\\n\\ninterface IBondCalculator {\\n    function valuation(address _LP, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function markdown(address _LP) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n}\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BondDepositoryFacet is Facet {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated(\\n        uint256 deposit,\\n        uint256 indexed payout,\\n        uint256 indexed expires,\\n        uint256 indexed priceInUSD\\n    );\\n    event BondRedeemed(\\n        address indexed recipient,\\n        uint256 payout,\\n        uint256 remaining\\n    );\\n    event BondPriceChanged(\\n        uint256 indexed priceInUSD,\\n        uint256 indexed internalPrice,\\n        uint256 indexed debtRatio\\n    );\\n    event ControlVariableAdjustment(\\n        uint256 initialBCV,\\n        uint256 newBCV,\\n        uint256 adjustment,\\n        bool addition\\n    );\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor,\\n        address _principle\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        decayDebt(_principle);\\n        require(\\n            s.totalDebt[_principleIndex] <= s.terms[_principleIndex].maxDebt,\\n            \\\"Max capacity reached\\\"\\n        );\\n\\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\\n        uint256 nativePrice = _bondPrice(_principle);\\n\\n        require(\\n            _maxPrice >= nativePrice,\\n            \\\"Slippage limit: more than max price\\\"\\n        ); // slippage protection\\n\\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\\n        require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 Necc ( underflow protection )\\n        require(payout <= maxPayout(_principle), \\\"Bond too large\\\"); // size protection because there is no slippage\\n        // profits are calculated\\n        uint256 fee = payout.mul(s.terms[_principleIndex].fee).div(10000);\\n        uint256 profit = value.sub(payout);\\n        if (profit > 0) {\\n            profit = profit.sub(fee);\\n            /**\\n            principle is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) Necc\\n         */\\n            if (s.terms[_principleIndex].isLiquidityBond) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else if (_principle == s.ndol) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else {\\n                /**\\n            asset carries risk and is not minted against\\n            asset transfered to treasury and rewards minted as payout\\n         */\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    s.treasury,\\n                    _amount\\n                );\\n                ITreasury(s.treasury).mintRewards(address(this), profit);\\n            }\\n\\n            if (fee != 0) {\\n                // fee is transferred to dao\\n                if (s.DAO != address(0)) {\\n                    IERC20(s.Necc).safeTransfer(s.DAO, fee);\\n                }\\n                if (s.farmDistributor != address(0)) {\\n                    IERC20(s.Necc).safeTransfer(\\n                        s.farmDistributor,\\n                        payout.mul(100).div(10000) // 1% farm distributor fee for minters\\n                    );\\n                }\\n            }\\n        }\\n\\n        // total debt is increased\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\\n\\n        // depositor info is stored\\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\\n            vesting: s.terms[_principleIndex].vestingTerm,\\n            lastTime: uint256(block.timestamp),\\n            pricePaid: priceInUSD\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated(\\n            _amount,\\n            payout,\\n            block.timestamp.add(s.terms[_principleIndex].vestingTerm),\\n            priceInUSD\\n        );\\n        emit BondPriceChanged(\\n            bondPriceInUSD(_principle),\\n            _bondPrice(_principle),\\n            debtRatio(_principle)\\n        );\\n\\n        adjust(_principle); // control variable is adjusted\\n        return payout;\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @param _recipient address\\n     *  @param _stake bool\\n     *  @return uint\\n     */\\n    function redeem(\\n        address _recipient,\\n        address _principle,\\n        bool _stake\\n    ) external returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\\n            _principleIndex\\n        ];\\n        // (seconds since last interaction / vesting term remaining)\\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\\n\\n        if (percentVested >= 10000) {\\n            // if fully vested\\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n            return stakeOrSend(_recipient, _stake, info.payout, _principle); // pay user everything due\\n        } else {\\n            // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n            // store updated deposit info\\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(\\n                    uint256(block.timestamp).sub(info.lastTime)\\n                ),\\n                lastTime: uint256(block.timestamp),\\n                pricePaid: info.pricePaid\\n            });\\n\\n            emit BondRedeemed(\\n                _recipient,\\n                payout,\\n                s.bondInfo[_recipient][_principleIndex].payout\\n            );\\n            return stakeOrSend(_recipient, _stake, payout, _principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\\n            debtDecay(_principle)\\n        );\\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return\\n            IERC20(s.Necc)\\n                .totalSupply()\\n                .mul(s.terms[_principleIndex].maxPayout)\\n                .div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value, address _principle)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else if (_principle == s.ndol) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else {\\n            // Reserve token like WETH\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e14);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .div(1e5);\\n        }\\n\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .div(1e5);\\n        }\\n\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\\n            s.terms[_principleIndex].minimumPrice = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice converts bond price to DAI value\\n     *  @return price_ uint\\n     */\\n    function bondPriceInUSD(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = bondPrice(_principle)\\n                .mul(IBondCalculator(address(this)).markdown(_principle))\\n                .div(100);\\n        } else {\\n            if (_principle == s.ndol) {\\n                price_ = bondPrice(_principle)\\n                    .mul(10**IERC20Decimals(_principle).decimals())\\n                    .div(100);\\n            } else {\\n                price_ = bondPrice(_principle)\\n                    .mul(uint256(assetPrice(_principle)))\\n                    .mul(1e6);\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to Necc supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio(address _principle)\\n        public\\n        view\\n        returns (uint256 debtRatio_)\\n    {\\n        uint256 supply = IERC20(s.Necc).totalSupply();\\n        debtRatio_ = FixedPoint\\n            .fraction(currentDebt(_principle).mul(1e9), supply)\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\n     *  @return uint\\n     */\\n    function standardizedDebtRatio(address _principle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                debtRatio(_principle)\\n                    .mul(IBondCalculator(address(this)).markdown(_principle))\\n                    .div(1e9);\\n        } else {\\n            if (_principle == s.ndol) {\\n                return debtRatio(_principle);\\n            } else {\\n                return\\n                    debtRatio(_principle)\\n                        .mul(uint256(assetPrice(_principle)))\\n                        .div(IOracle(s.priceFeeds[_principleIndex]).decimals());\\n                // ETH Feed is 8 decimals\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay(address _principle)\\n        public\\n        view\\n        returns (uint256 decay_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\\n            s.lastDecay[_principleIndex]\\n        );\\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\\n            s.terms[_principleIndex].vestingTerm\\n        );\\n        if (decay_ > s.totalDebt[_principleIndex]) {\\n            decay_ = s.totalDebt[_principleIndex];\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor, address _principle)\\n        public\\n        view\\n        returns (uint256 percentVested_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\\n            _principleIndex\\n        ];\\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of Necc available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor, address _principle)\\n        external\\n        view\\n        returns (uint256 pendingPayout_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice allow user to stake payout automatically\\n     *  @param _stake bool\\n     *  @param _amount uint\\n     *  @return uint\\n     */\\n    function stakeOrSend(\\n        address _recipient,\\n        bool _stake,\\n        uint256 _amount,\\n        address\\n    ) internal returns (uint256) {\\n        if (!_stake) {\\n            // if user does not want to stake\\n            IERC20(s.Necc).transfer(_recipient, _amount); // send payout\\n        } else {\\n            // if user wants to stake\\n            IERC20(s.Necc).approve(address(this), _amount);\\n            IStaking(address(this)).stake(_amount, _recipient);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\\n\\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\\n            uint256 initial = _bondTerms.controlVariable;\\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n            uint256 change = changeBy(_principle);\\n\\n            if (adjustment.delta >= change) {\\n                adjustment.delta = adjustment.delta.sub(change);\\n            } else {\\n                adjustment.delta = 0;\\n            }\\n            if (adjustment.timeToTarget >= timeSinceLast) {\\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\\n                    timeSinceLast\\n                );\\n            } else {\\n                adjustment.timeToTarget = 0;\\n            }\\n\\n            if (adjustment.add) {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\\n                    change\\n                );\\n            } else {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\\n                    change\\n                );\\n            }\\n\\n            adjustment.lastTime = block.timestamp;\\n\\n            emit ControlVariableAdjustment(\\n                initial,\\n                _bondTerms.controlVariable,\\n                change,\\n                adjustment.add\\n            );\\n        }\\n    }\\n\\n    function changeBy(address _principle)\\n        internal\\n        view\\n        returns (uint256 changeBy_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n\\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\\n            adjustment.timeToTarget\\n        );\\n\\n        if (changeBy_ > adjustment.delta) {\\n            changeBy_ = adjustment.delta;\\n        }\\n    }\\n\\n    function bondInfo(address _depositor, address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Bond memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.bondInfo[_depositor][_principleIndex];\\n    }\\n\\n    function BCV(address _principle) public view returns (uint256 BCV_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 change = changeBy(_principle);\\n\\n        if (_bondAdjustment.add) {\\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\\n        } else {\\n            if (s.terms[_principleIndex].controlVariable > change) {\\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\\n            } else {\\n                BCV_ = 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice get asset price from chainlink\\n     */\\n    function assetPrice(address _principle) public view returns (int256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        (, int256 price, , , ) = IOracle(s.priceFeeds[_principleIndex])\\n            .latestRoundData();\\n\\n        return price;\\n    }\\n\\n    function terms(address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Terms memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.terms[_principleIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x34f1d94b9e97310e52af5508d6733b88aceff009c80bf7128c26ed24c6928583\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a4171a71240b68dc37f64342ab46f8f395e8a4f45b41398121003056549690f\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 =\\n        0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return\\n            uq112x112(\\n                uint224(\\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\\n                        ((112 - safeShiftBits) / 2)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x136dde09fc55dc6585ec83bbd5518c94e5efbff574b04346d552cd35757468b4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256 l, uint256 h)\\n    {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (~d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((~pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x37dfeafa81be1494b92766bed34216ddf533593cc88bf6281dde5476ffb4cff7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address sNecc; // token given for staking\\n        address nNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 totalBonus;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xee4d4eb3f999c06950a5587b97bd531c5caf352c5e4ffac69fe6e518816193fe\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506145be806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063aa58834511610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063aa58834514610285578063ad5fe5eb146102b5578063b11512e2146102e5578063b883b0581461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f2146102255780638b429ae81461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a91906134ee565b610405565b60405161012c919061353d565b60405180910390f35b61014f600480360381019061014a9190613558565b610555565b60405161015c919061353d565b60405180910390f35b61017f600480360381019061017a9190613558565b61079b565b60405161018c919061353d565b60405180910390f35b6101af60048036038101906101aa9190613585565b610885565b6040516101bc919061353d565b60405180910390f35b6101df60048036038101906101da9190613585565b61094a565b6040516101ec919061353d565b60405180910390f35b61020f600480360381019061020a91906135c5565b610a56565b60405161021c919061353d565b60405180910390f35b61023f600480360381019061023a9190613558565b6115cd565b60405161024c919061353d565b60405180910390f35b61026f600480360381019061026a9190613664565b61161f565b60405161027c919061353d565b60405180910390f35b61029f600480360381019061029a9190613558565b611991565b6040516102ac919061353d565b60405180910390f35b6102cf60048036038101906102ca9190613585565b611a7c565b6040516102dc919061371b565b60405180910390f35b6102ff60048036038101906102fa9190613558565b611b2b565b60405161030c919061353d565b60405180910390f35b61032f600480360381019061032a9190613558565b611d26565b60405161033c919061374f565b60405180910390f35b61035f600480360381019061035a9190613558565b611df5565b60405161036c9190613807565b60405180910390f35b61038f600480360381019061038a9190613558565b611e95565b60405161039c919061353d565b60405180910390f35b6103bf60048036038101906103ba9190613558565b6120d2565b6040516103cc919061353d565b60405180910390f35b6103ef60048036038101906103ea9190613558565b6121ad565b6040516103fc919061353d565b60405180910390f35b60008061041c8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a8761046588611b2b565b612323565b61252a565b61256890919063ffffffff16565b91505061054f565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f988611b2b565b612323565b61252a565b61256890919063ffffffff16565b91505061054f565b61054b655af3107a400061053d6105388761053388611b2b565b612323565b61252a565b61256890919063ffffffff16565b9150505b92915050565b60008061056c8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff161561064c57610644633b9aca006106363073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105de9190613831565b602060405180830381865afa1580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f9190613861565b6106288761079b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b915050610796565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106b6576106ae8361079b565b915050610796565b6107926000601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e91906138c7565b60ff1661078461076d86611d26565b6107768761079b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b9150505b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108319190613861565b905061087d670de0b6b3a764000061086f61086a610864633b9aca00610856896115cd565b61257e90919063ffffffff16565b85612323565b61252a565b61256890919063ffffffff16565b915050919050565b60008061089c8360006122a190919063ffffffff16565b905060006108aa858561094a565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600001549050612710821061091757809350610941565b61093e612710610930848461257e90919063ffffffff16565b61256890919063ffffffff16565b93505b50505092915050565b6000806109618360006122a190919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000610a0582604001514261259490919063ffffffff16565b90506000826060015190506000811115610a4757610a4081610a326127108561257e90919063ffffffff16565b61256890919063ffffffff16565b9450610a4c565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe90613951565b60405180910390fd5b6000610add8360006122a190919063ffffffff16565b9050610ae8836125aa565b6000600a016000828152602001908152602001600020600401546000600d016000838152602001908152602001600020541115610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b51906139bd565b60405180910390fd5b6000610b6584611e95565b90506000610b728561262c565b905080871015610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae90613a4f565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610c18929190613a6f565b602060405180830381865afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c599190613861565b90506000610c678288610405565b905062989680811015610caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca690613ae4565b60405180910390fd5b610cb8876121ad565b811115610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613b50565b60405180910390fd5b6000610d3c612710610d2e6000600a0160008a8152602001908152602001600020600301548561257e90919063ffffffff16565b61256890919063ffffffff16565b90506000610d53838561259490919063ffffffff16565b905060008111156113a357610d71828261259490919063ffffffff16565b90506000600a01600088815260200190815260200160002060060160009054906101000a900460ff1615610f1b57610dcc33308e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610e2c929190613a6f565b6020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190613b85565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610ed293929190613bb2565b6020604051808303816000875af1158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f159190613861565b506111d6565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156110f057610fa133308e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401611001929190613a6f565b6020604051808303816000875af1158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190613b85565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b81526004016110a793929190613bb2565b6020604051808303816000875af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190613861565b506111d5565b61114233600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de9230836040518363ffffffff1660e01b81526004016111a2929190613a6f565b600060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050505b5b600082146113a257600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112ac576112ab600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128f49092919063ffffffff16565b5b600073ffffffffffffffffffffffffffffffffffffffff16600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113a1576113a0600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661135661271061134860648861257e90919063ffffffff16565b61256890919063ffffffff16565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128f49092919063ffffffff16565b5b5b5b6113cc846000600d0160008a81526020019081526020016000205461297a90919063ffffffff16565b6000600d01600089815260200190815260200160002081905550604051806080016040528061145a856000600c0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000015461297a90919063ffffffff16565b81526020018781526020014281526020016000600a0160008a8152602001908152602001600020600501548152506000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856115336000600a0160008a8152602001908152602001600020600501544261297a90919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f604051611563919061353d565b60405180910390a46115748961079b565b61157d8a61262c565b6115868b611e95565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a46115bb89612990565b82975050505050505050949350505050565b6000806115e48360006122a190919063ffffffff16565b90506116176115f2846120d2565b6000600d0160008481526020019081526020016000205461259490919063ffffffff16565b915050919050565b6000806116368460006122a190919063ffffffff16565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060006116cd878761094a565b905061271081106117bd576000600c0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b18360000151600060405161179b929190613c2e565b60405180910390a26117b38786846000015189612b5c565b935050505061198a565b60006117ea6127106117dc84866000015161257e90919063ffffffff16565b61256890919063ffffffff16565b9050604051806080016040528061180e83866000015161259490919063ffffffff16565b81526020018460200151815260200142815260200161185061183d86604001514261259490919063ffffffff16565b866060015161259490919063ffffffff16565b8152506000600c0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508773ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000015460405161196f929190613c57565b60405180910390a26119838887838a612b5c565b9450505050505b9392505050565b6000806119a88360006122a190919063ffffffff16565b9050600080600b016000838152602001908152602001600020905060006119ce85612d39565b90508160000160009054906101000a900460ff1615611a1a57611a13816000600a0160008681526020019081526020016000206000015461297a90919063ffffffff16565b9350611a74565b806000600a016000858152602001908152602001600020600001541115611a6e57611a67816000600a0160008681526020019081526020016000206000015461259490919063ffffffff16565b9350611a73565b600193505b5b505050919050565b611a846133bd565b6000611a9a8360006122a190919063ffffffff16565b90506000600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b600080611b428360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611bd657611bcf62989680611bc1633b9aca00611bb3611b8b8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b9150611ce2565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c9557611c8e62989680611c80633b9aca00611c72611c4a8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b9150611ce1565b611cde620186a0611cd0611ca88661079b565b6000600a0160008681526020019081526020016000206000015461257e90919063ffffffff16565b61256890919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015611d20576000600a0160008281526020019081526020016000206001015491505b50919050565b600080611d3d8360006122a190919063ffffffff16565b9050600080601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de59190613cee565b5050509150508092505050919050565b611dfd6133e5565b6000611e138360006122a190919063ffffffff16565b90506000600a0160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611eac8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611f8857611f816064611f733073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611f1b9190613831565b602060405180830381865afa158015611f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5c9190613861565b611f6587611b2b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b91506120cc565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561209057612089606461207b8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205891906138c7565b600a6120649190613ecb565b61206d87611b2b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b91506120cb565b6120c8620f42406120ba6120a386611d26565b6120ac87611b2b565b61257e90919063ffffffff16565b61257e90919063ffffffff16565b91505b5b50919050565b6000806120e98360006122a190919063ffffffff16565b905060006121166000600e016000848152602001908152602001600020544261259490919063ffffffff16565b905061216c6000600a0160008481526020019081526020016000206005015461215e836000600d0160008781526020019081526020016000205461257e90919063ffffffff16565b61256890919063ffffffff16565b92506000600d016000838152602001908152602001600020548311156121a6576000600d0160008381526020019081526020016000205492505b5050919050565b6000806121c48360006122a190919063ffffffff16565b9050612299620186a061228b6000600a016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190613861565b61257e90919063ffffffff16565b61256890919063ffffffff16565b915050919050565b6000806122b084600801612e15565b905060005b8181101561231a578373ffffffffffffffffffffffffffffffffffffffff166122e18660080183612e2a565b73ffffffffffffffffffffffffffffffffffffffff16141561230757809250505061231d565b808061231290613f16565b9150506122b5565b50505b92915050565b61232b613424565b6000821161236e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236590613fd1565b60405180910390fd5b60008314156123ac57604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612524565b71ffffffffffffffffffffffffffffffffffff8016831161247457600082607060ff1685901b6123dc9190614020565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801681111561243f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124369061409d565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612524565b6000612490846e01000000000000000000000000000085612e44565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80168111156124f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ea9061409d565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166125619190614020565b9050919050565b600081836125769190614020565b905092915050565b6000818361258c91906140bd565b905092915050565b600081836125a29190614117565b905092915050565b60006125c08260006122a190919063ffffffff16565b90506125f36125ce836120d2565b6000600d0160008481526020019081526020016000205461259490919063ffffffff16565b6000600d01600083815260200190815260200160002081905550426000600e016000838152602001908152602001600020819055505050565b6000806126438360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156126d7576126d0629896806126c2633b9aca006126b461268c8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b91506127e3565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156127965761278f62989680612781633b9aca0061277361274b8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b91506127e2565b6127df620186a06127d16127a98661079b565b6000600a0160008681526020019081526020016000206000015461257e90919063ffffffff16565b61256890919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015612825576000600a016000828152602001908152602001600020600101549150612865565b600080600a016000838152602001908152602001600020600101541461286457600080600a016000838152602001908152602001600020600101819055505b5b50919050565b6128ee846323b872dd60e01b85858560405160240161288c9392919061414b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eec565b50505050565b6129758363a9059cbb60e01b8484604051602401612913929190613a6f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eec565b505050565b600081836129889190614182565b905092915050565b60006129a68260006122a190919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600080600a0160008481526020019081526020016000209050600082600101541180156129f2575060008260020154115b15612b56576000816000015490506000612a1984600301544261259490919063ffffffff16565b90506000612a2687612d39565b905080856001015410612a5757612a4a81866001015461259490919063ffffffff16565b8560010181905550612a62565b600085600101819055505b81856002015410612a9157612a8482866002015461259490919063ffffffff16565b8560020181905550612a9c565b600085600201819055505b8460000160009054906101000a900460ff1615612ad757612aca81856000015461297a90919063ffffffff16565b8460000181905550612af7565b612aee81856000015461259490919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff16604051612b4a94939291906141e7565b60405180910390a15050505b50505050565b600083612c0b576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b8152600401612bc2929190613a6f565b6020604051808303816000875af1158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190613b85565b50612d2e565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330856040518363ffffffff1660e01b8152600401612c6a929190613a6f565b6020604051808303816000875af1158015612c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cad9190613b85565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775784876040518363ffffffff1660e01b8152600401612ce992919061422c565b6020604051808303816000875af1158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c9190613b85565b505b829050949350505050565b600080612d508360006122a190919063ffffffff16565b9050600080600b0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152505090506000612dc882606001514261259490919063ffffffff16565b9050612df78260400151612de983856020015161257e90919063ffffffff16565b61256890919063ffffffff16565b93508160200151841115612e0d57816020015193505b505050919050565b6000612e2382600001612fb3565b9050919050565b6000612e398360000183612fc4565b60001c905092915050565b6000806000612e538686612fef565b9150915060008480612e6857612e67613ff1565b5b868809905082811115612e8557600182612e829190614117565b91505b8083612e919190614117565b9250848210612ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ecc906142a1565b60405180910390fd5b612ee0838387613064565b93505050509392505050565b6000612f4e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132179092919063ffffffff16565b9050600081511115612fae5780806020019051810190612f6e9190613b85565b612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa490614333565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000826000018281548110612fdc57612fdb614353565b5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8061302357613022613ff1565b5b8486099050838561303491906140bd565b925082816130429190614117565b91508281101561305c576001826130599190614117565b91505b509250929050565b600080600183196130759190614182565b8316905080836130859190614020565b925080856130939190614020565b9450600181600183196130a69190614182565b6130b09190614020565b6130ba9190614182565b846130c591906140bd565b856130d09190614182565b945060006001905080846130e491906140bd565b60026130f09190614117565b816130fb91906140bd565b9050808461310991906140bd565b60026131159190614117565b8161312091906140bd565b9050808461312e91906140bd565b600261313a9190614117565b8161314591906140bd565b9050808461315391906140bd565b600261315f9190614117565b8161316a91906140bd565b9050808461317891906140bd565b60026131849190614117565b8161318f91906140bd565b9050808461319d91906140bd565b60026131a99190614117565b816131b491906140bd565b905080846131c291906140bd565b60026131ce9190614117565b816131d991906140bd565b905080846131e791906140bd565b60026131f39190614117565b816131fe91906140bd565b9050808661320c91906140bd565b925050509392505050565b6060613226848460008561322f565b90509392505050565b606082471015613274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326b906143f4565b60405180910390fd5b61327d85613343565b6132bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132b390614460565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132e591906144fa565b60006040518083038185875af1925050503d8060008114613322576040519150601f19603f3d011682016040523d82523d6000602084013e613327565b606091505b5091509150613337828286613356565b92505050949350505050565b600080823b905060008111915050919050565b60608315613366578290506133b6565b6000835111156133795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ad9190614566565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b61346d8161345a565b811461347857600080fd5b50565b60008135905061348a81613464565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134bb82613490565b9050919050565b6134cb816134b0565b81146134d657600080fd5b50565b6000813590506134e8816134c2565b92915050565b6000806040838503121561350557613504613455565b5b60006135138582860161347b565b9250506020613524858286016134d9565b9150509250929050565b6135378161345a565b82525050565b6000602082019050613552600083018461352e565b92915050565b60006020828403121561356e5761356d613455565b5b600061357c848285016134d9565b91505092915050565b6000806040838503121561359c5761359b613455565b5b60006135aa858286016134d9565b92505060206135bb858286016134d9565b9150509250929050565b600080600080608085870312156135df576135de613455565b5b60006135ed8782880161347b565b94505060206135fe8782880161347b565b935050604061360f878288016134d9565b9250506060613620878288016134d9565b91505092959194509250565b60008115159050919050565b6136418161362c565b811461364c57600080fd5b50565b60008135905061365e81613638565b92915050565b60008060006060848603121561367d5761367c613455565b5b600061368b868287016134d9565b935050602061369c868287016134d9565b92505060406136ad8682870161364f565b9150509250925092565b6136c08161345a565b82525050565b6080820160008201516136dc60008501826136b7565b5060208201516136ef60208501826136b7565b50604082015161370260408501826136b7565b50606082015161371560608501826136b7565b50505050565b600060808201905061373060008301846136c6565b92915050565b6000819050919050565b61374981613736565b82525050565b60006020820190506137646000830184613740565b92915050565b6137738161362c565b82525050565b60e08201600082015161378f60008501826136b7565b5060208201516137a260208501826136b7565b5060408201516137b560408501826136b7565b5060608201516137c860608501826136b7565b5060808201516137db60808501826136b7565b5060a08201516137ee60a08501826136b7565b5060c082015161380160c085018261376a565b50505050565b600060e08201905061381c6000830184613779565b92915050565b61382b816134b0565b82525050565b60006020820190506138466000830184613822565b92915050565b60008151905061385b81613464565b92915050565b60006020828403121561387757613876613455565b5b60006138858482850161384c565b91505092915050565b600060ff82169050919050565b6138a48161388e565b81146138af57600080fd5b50565b6000815190506138c18161389b565b92915050565b6000602082840312156138dd576138dc613455565b5b60006138eb848285016138b2565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600061393b600f836138f4565b915061394682613905565b602082019050919050565b6000602082019050818103600083015261396a8161392e565b9050919050565b7f4d61782063617061636974792072656163686564000000000000000000000000600082015250565b60006139a76014836138f4565b91506139b282613971565b602082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008201527f6963650000000000000000000000000000000000000000000000000000000000602082015250565b6000613a396023836138f4565b9150613a44826139dd565b604082019050919050565b60006020820190508181036000830152613a6881613a2c565b9050919050565b6000604082019050613a846000830185613822565b613a91602083018461352e565b9392505050565b7f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000600082015250565b6000613ace600e836138f4565b9150613ad982613a98565b602082019050919050565b60006020820190508181036000830152613afd81613ac1565b9050919050565b7f426f6e6420746f6f206c61726765000000000000000000000000000000000000600082015250565b6000613b3a600e836138f4565b9150613b4582613b04565b602082019050919050565b60006020820190508181036000830152613b6981613b2d565b9050919050565b600081519050613b7f81613638565b92915050565b600060208284031215613b9b57613b9a613455565b5b6000613ba984828501613b70565b91505092915050565b6000606082019050613bc7600083018661352e565b613bd46020830185613822565b613be1604083018461352e565b949350505050565b6000819050919050565b6000819050919050565b6000613c18613c13613c0e84613be9565b613bf3565b61345a565b9050919050565b613c2881613bfd565b82525050565b6000604082019050613c43600083018561352e565b613c506020830184613c1f565b9392505050565b6000604082019050613c6c600083018561352e565b613c79602083018461352e565b9392505050565b600069ffffffffffffffffffff82169050919050565b613c9f81613c80565b8114613caa57600080fd5b50565b600081519050613cbc81613c96565b92915050565b613ccb81613736565b8114613cd657600080fd5b50565b600081519050613ce881613cc2565b92915050565b600080600080600060a08688031215613d0a57613d09613455565b5b6000613d1888828901613cad565b9550506020613d2988828901613cd9565b9450506040613d3a8882890161384c565b9350506060613d4b8882890161384c565b9250506080613d5c88828901613cad565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115613def57808604811115613dcb57613dca613d69565b5b6001851615613dda5780820291505b8081029050613de885613d98565b9450613daf565b94509492505050565b600082613e085760019050613ec4565b81613e165760009050613ec4565b8160018114613e2c5760028114613e3657613e65565b6001915050613ec4565b60ff841115613e4857613e47613d69565b5b8360020a915084821115613e5f57613e5e613d69565b5b50613ec4565b5060208310610133831016604e8410600b8410161715613e9a5782820a905083811115613e9557613e94613d69565b5b613ec4565b613ea78484846001613da5565b92509050818404811115613ebe57613ebd613d69565b5b81810290505b9392505050565b6000613ed68261345a565b9150613ee18361388e565b9250613f0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613df8565b905092915050565b6000613f218261345a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f5457613f53613d69565b5b600182019050919050565b7f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260008201527f79207a65726f0000000000000000000000000000000000000000000000000000602082015250565b6000613fbb6026836138f4565b9150613fc682613f5f565b604082019050919050565b60006020820190508181036000830152613fea81613fae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061402b8261345a565b91506140368361345a565b92508261404657614045613ff1565b5b828204905092915050565b7f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000600082015250565b6000614087601e836138f4565b915061409282614051565b602082019050919050565b600060208201905081810360008301526140b68161407a565b9050919050565b60006140c88261345a565b91506140d38361345a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561410c5761410b613d69565b5b828202905092915050565b60006141228261345a565b915061412d8361345a565b9250828210156141405761413f613d69565b5b828203905092915050565b60006060820190506141606000830186613822565b61416d6020830185613822565b61417a604083018461352e565b949350505050565b600061418d8261345a565b91506141988361345a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141cd576141cc613d69565b5b828201905092915050565b6141e18161362c565b82525050565b60006080820190506141fc600083018761352e565b614209602083018661352e565b614216604083018561352e565b61422360608301846141d8565b95945050505050565b6000604082019050614241600083018561352e565b61424e6020830184613822565b9392505050565b7f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000600082015250565b600061428b601a836138f4565b915061429682614255565b602082019050919050565b600060208201905081810360008301526142ba8161427e565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061431d602a836138f4565b9150614328826142c1565b604082019050919050565b6000602082019050818103600083015261434c81614310565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006143de6026836138f4565b91506143e982614382565b604082019050919050565b6000602082019050818103600083015261440d816143d1565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061444a601d836138f4565b915061445582614414565b602082019050919050565b600060208201905081810360008301526144798161443d565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156144b4578082015181840152602081019050614499565b838111156144c3576000848401525b50505050565b60006144d482614480565b6144de818561448b565b93506144ee818560208601614496565b80840191505092915050565b600061450682846144c9565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061453882614511565b61454281856138f4565b9350614552818560208601614496565b61455b8161451c565b840191505092915050565b60006020820190508181036000830152614580818461452d565b90509291505056fea2646970667358221220861fe3c224e78c2f0a1cff0a3955c98cb73e839080251b86dbebdcf0d69b05c064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063aa58834511610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063aa58834514610285578063ad5fe5eb146102b5578063b11512e2146102e5578063b883b0581461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f2146102255780638b429ae81461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a91906134ee565b610405565b60405161012c919061353d565b60405180910390f35b61014f600480360381019061014a9190613558565b610555565b60405161015c919061353d565b60405180910390f35b61017f600480360381019061017a9190613558565b61079b565b60405161018c919061353d565b60405180910390f35b6101af60048036038101906101aa9190613585565b610885565b6040516101bc919061353d565b60405180910390f35b6101df60048036038101906101da9190613585565b61094a565b6040516101ec919061353d565b60405180910390f35b61020f600480360381019061020a91906135c5565b610a56565b60405161021c919061353d565b60405180910390f35b61023f600480360381019061023a9190613558565b6115cd565b60405161024c919061353d565b60405180910390f35b61026f600480360381019061026a9190613664565b61161f565b60405161027c919061353d565b60405180910390f35b61029f600480360381019061029a9190613558565b611991565b6040516102ac919061353d565b60405180910390f35b6102cf60048036038101906102ca9190613585565b611a7c565b6040516102dc919061371b565b60405180910390f35b6102ff60048036038101906102fa9190613558565b611b2b565b60405161030c919061353d565b60405180910390f35b61032f600480360381019061032a9190613558565b611d26565b60405161033c919061374f565b60405180910390f35b61035f600480360381019061035a9190613558565b611df5565b60405161036c9190613807565b60405180910390f35b61038f600480360381019061038a9190613558565b611e95565b60405161039c919061353d565b60405180910390f35b6103bf60048036038101906103ba9190613558565b6120d2565b6040516103cc919061353d565b60405180910390f35b6103ef60048036038101906103ea9190613558565b6121ad565b6040516103fc919061353d565b60405180910390f35b60008061041c8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a8761046588611b2b565b612323565b61252a565b61256890919063ffffffff16565b91505061054f565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f988611b2b565b612323565b61252a565b61256890919063ffffffff16565b91505061054f565b61054b655af3107a400061053d6105388761053388611b2b565b612323565b61252a565b61256890919063ffffffff16565b9150505b92915050565b60008061056c8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff161561064c57610644633b9aca006106363073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105de9190613831565b602060405180830381865afa1580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f9190613861565b6106288761079b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b915050610796565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106b6576106ae8361079b565b915050610796565b6107926000601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e91906138c7565b60ff1661078461076d86611d26565b6107768761079b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b9150505b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108319190613861565b905061087d670de0b6b3a764000061086f61086a610864633b9aca00610856896115cd565b61257e90919063ffffffff16565b85612323565b61252a565b61256890919063ffffffff16565b915050919050565b60008061089c8360006122a190919063ffffffff16565b905060006108aa858561094a565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600001549050612710821061091757809350610941565b61093e612710610930848461257e90919063ffffffff16565b61256890919063ffffffff16565b93505b50505092915050565b6000806109618360006122a190919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000610a0582604001514261259490919063ffffffff16565b90506000826060015190506000811115610a4757610a4081610a326127108561257e90919063ffffffff16565b61256890919063ffffffff16565b9450610a4c565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe90613951565b60405180910390fd5b6000610add8360006122a190919063ffffffff16565b9050610ae8836125aa565b6000600a016000828152602001908152602001600020600401546000600d016000838152602001908152602001600020541115610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b51906139bd565b60405180910390fd5b6000610b6584611e95565b90506000610b728561262c565b905080871015610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae90613a4f565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610c18929190613a6f565b602060405180830381865afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c599190613861565b90506000610c678288610405565b905062989680811015610caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca690613ae4565b60405180910390fd5b610cb8876121ad565b811115610cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf190613b50565b60405180910390fd5b6000610d3c612710610d2e6000600a0160008a8152602001908152602001600020600301548561257e90919063ffffffff16565b61256890919063ffffffff16565b90506000610d53838561259490919063ffffffff16565b905060008111156113a357610d71828261259490919063ffffffff16565b90506000600a01600088815260200190815260200160002060060160009054906101000a900460ff1615610f1b57610dcc33308e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610e2c929190613a6f565b6020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190613b85565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610ed293929190613bb2565b6020604051808303816000875af1158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f159190613861565b506111d6565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156110f057610fa133308e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401611001929190613a6f565b6020604051808303816000875af1158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190613b85565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b81526004016110a793929190613bb2565b6020604051808303816000875af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190613861565b506111d5565b61114233600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8c73ffffffffffffffffffffffffffffffffffffffff1661286b909392919063ffffffff16565b600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de9230836040518363ffffffff1660e01b81526004016111a2929190613a6f565b600060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050505b5b600082146113a257600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112ac576112ab600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128f49092919063ffffffff16565b5b600073ffffffffffffffffffffffffffffffffffffffff16600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113a1576113a0600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661135661271061134860648861257e90919063ffffffff16565b61256890919063ffffffff16565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166128f49092919063ffffffff16565b5b5b5b6113cc846000600d0160008a81526020019081526020016000205461297a90919063ffffffff16565b6000600d01600089815260200190815260200160002081905550604051806080016040528061145a856000600c0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000015461297a90919063ffffffff16565b81526020018781526020014281526020016000600a0160008a8152602001908152602001600020600501548152506000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856115336000600a0160008a8152602001908152602001600020600501544261297a90919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f604051611563919061353d565b60405180910390a46115748961079b565b61157d8a61262c565b6115868b611e95565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a46115bb89612990565b82975050505050505050949350505050565b6000806115e48360006122a190919063ffffffff16565b90506116176115f2846120d2565b6000600d0160008481526020019081526020016000205461259490919063ffffffff16565b915050919050565b6000806116368460006122a190919063ffffffff16565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060006116cd878761094a565b905061271081106117bd576000600c0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b18360000151600060405161179b929190613c2e565b60405180910390a26117b38786846000015189612b5c565b935050505061198a565b60006117ea6127106117dc84866000015161257e90919063ffffffff16565b61256890919063ffffffff16565b9050604051806080016040528061180e83866000015161259490919063ffffffff16565b81526020018460200151815260200142815260200161185061183d86604001514261259490919063ffffffff16565b866060015161259490919063ffffffff16565b8152506000600c0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508773ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000015460405161196f929190613c57565b60405180910390a26119838887838a612b5c565b9450505050505b9392505050565b6000806119a88360006122a190919063ffffffff16565b9050600080600b016000838152602001908152602001600020905060006119ce85612d39565b90508160000160009054906101000a900460ff1615611a1a57611a13816000600a0160008681526020019081526020016000206000015461297a90919063ffffffff16565b9350611a74565b806000600a016000858152602001908152602001600020600001541115611a6e57611a67816000600a0160008681526020019081526020016000206000015461259490919063ffffffff16565b9350611a73565b600193505b5b505050919050565b611a846133bd565b6000611a9a8360006122a190919063ffffffff16565b90506000600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b600080611b428360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611bd657611bcf62989680611bc1633b9aca00611bb3611b8b8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b9150611ce2565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c9557611c8e62989680611c80633b9aca00611c72611c4a8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b9150611ce1565b611cde620186a0611cd0611ca88661079b565b6000600a0160008681526020019081526020016000206000015461257e90919063ffffffff16565b61256890919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015611d20576000600a0160008281526020019081526020016000206001015491505b50919050565b600080611d3d8360006122a190919063ffffffff16565b9050600080601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de59190613cee565b5050509150508092505050919050565b611dfd6133e5565b6000611e138360006122a190919063ffffffff16565b90506000600a0160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611eac8360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611f8857611f816064611f733073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611f1b9190613831565b602060405180830381865afa158015611f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5c9190613861565b611f6587611b2b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b91506120cc565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561209057612089606461207b8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205891906138c7565b600a6120649190613ecb565b61206d87611b2b565b61257e90919063ffffffff16565b61256890919063ffffffff16565b91506120cb565b6120c8620f42406120ba6120a386611d26565b6120ac87611b2b565b61257e90919063ffffffff16565b61257e90919063ffffffff16565b91505b5b50919050565b6000806120e98360006122a190919063ffffffff16565b905060006121166000600e016000848152602001908152602001600020544261259490919063ffffffff16565b905061216c6000600a0160008481526020019081526020016000206005015461215e836000600d0160008781526020019081526020016000205461257e90919063ffffffff16565b61256890919063ffffffff16565b92506000600d016000838152602001908152602001600020548311156121a6576000600d0160008381526020019081526020016000205492505b5050919050565b6000806121c48360006122a190919063ffffffff16565b9050612299620186a061228b6000600a016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190613861565b61257e90919063ffffffff16565b61256890919063ffffffff16565b915050919050565b6000806122b084600801612e15565b905060005b8181101561231a578373ffffffffffffffffffffffffffffffffffffffff166122e18660080183612e2a565b73ffffffffffffffffffffffffffffffffffffffff16141561230757809250505061231d565b808061231290613f16565b9150506122b5565b50505b92915050565b61232b613424565b6000821161236e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236590613fd1565b60405180910390fd5b60008314156123ac57604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612524565b71ffffffffffffffffffffffffffffffffffff8016831161247457600082607060ff1685901b6123dc9190614020565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801681111561243f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124369061409d565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612524565b6000612490846e01000000000000000000000000000085612e44565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80168111156124f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ea9061409d565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166125619190614020565b9050919050565b600081836125769190614020565b905092915050565b6000818361258c91906140bd565b905092915050565b600081836125a29190614117565b905092915050565b60006125c08260006122a190919063ffffffff16565b90506125f36125ce836120d2565b6000600d0160008481526020019081526020016000205461259490919063ffffffff16565b6000600d01600083815260200190815260200160002081905550426000600e016000838152602001908152602001600020819055505050565b6000806126438360006122a190919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156126d7576126d0629896806126c2633b9aca006126b461268c8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b91506127e3565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156127965761278f62989680612781633b9aca0061277361274b8861079b565b6000600a0160008881526020019081526020016000206000015461257e90919063ffffffff16565b61297a90919063ffffffff16565b61256890919063ffffffff16565b91506127e2565b6127df620186a06127d16127a98661079b565b6000600a0160008681526020019081526020016000206000015461257e90919063ffffffff16565b61256890919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015612825576000600a016000828152602001908152602001600020600101549150612865565b600080600a016000838152602001908152602001600020600101541461286457600080600a016000838152602001908152602001600020600101819055505b5b50919050565b6128ee846323b872dd60e01b85858560405160240161288c9392919061414b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eec565b50505050565b6129758363a9059cbb60e01b8484604051602401612913929190613a6f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eec565b505050565b600081836129889190614182565b905092915050565b60006129a68260006122a190919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600080600a0160008481526020019081526020016000209050600082600101541180156129f2575060008260020154115b15612b56576000816000015490506000612a1984600301544261259490919063ffffffff16565b90506000612a2687612d39565b905080856001015410612a5757612a4a81866001015461259490919063ffffffff16565b8560010181905550612a62565b600085600101819055505b81856002015410612a9157612a8482866002015461259490919063ffffffff16565b8560020181905550612a9c565b600085600201819055505b8460000160009054906101000a900460ff1615612ad757612aca81856000015461297a90919063ffffffff16565b8460000181905550612af7565b612aee81856000015461259490919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff16604051612b4a94939291906141e7565b60405180910390a15050505b50505050565b600083612c0b576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b8152600401612bc2929190613a6f565b6020604051808303816000875af1158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190613b85565b50612d2e565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330856040518363ffffffff1660e01b8152600401612c6a929190613a6f565b6020604051808303816000875af1158015612c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cad9190613b85565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775784876040518363ffffffff1660e01b8152600401612ce992919061422c565b6020604051808303816000875af1158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c9190613b85565b505b829050949350505050565b600080612d508360006122a190919063ffffffff16565b9050600080600b0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152505090506000612dc882606001514261259490919063ffffffff16565b9050612df78260400151612de983856020015161257e90919063ffffffff16565b61256890919063ffffffff16565b93508160200151841115612e0d57816020015193505b505050919050565b6000612e2382600001612fb3565b9050919050565b6000612e398360000183612fc4565b60001c905092915050565b6000806000612e538686612fef565b9150915060008480612e6857612e67613ff1565b5b868809905082811115612e8557600182612e829190614117565b91505b8083612e919190614117565b9250848210612ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ecc906142a1565b60405180910390fd5b612ee0838387613064565b93505050509392505050565b6000612f4e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132179092919063ffffffff16565b9050600081511115612fae5780806020019051810190612f6e9190613b85565b612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa490614333565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000826000018281548110612fdc57612fdb614353565b5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8061302357613022613ff1565b5b8486099050838561303491906140bd565b925082816130429190614117565b91508281101561305c576001826130599190614117565b91505b509250929050565b600080600183196130759190614182565b8316905080836130859190614020565b925080856130939190614020565b9450600181600183196130a69190614182565b6130b09190614020565b6130ba9190614182565b846130c591906140bd565b856130d09190614182565b945060006001905080846130e491906140bd565b60026130f09190614117565b816130fb91906140bd565b9050808461310991906140bd565b60026131159190614117565b8161312091906140bd565b9050808461312e91906140bd565b600261313a9190614117565b8161314591906140bd565b9050808461315391906140bd565b600261315f9190614117565b8161316a91906140bd565b9050808461317891906140bd565b60026131849190614117565b8161318f91906140bd565b9050808461319d91906140bd565b60026131a99190614117565b816131b491906140bd565b905080846131c291906140bd565b60026131ce9190614117565b816131d991906140bd565b905080846131e791906140bd565b60026131f39190614117565b816131fe91906140bd565b9050808661320c91906140bd565b925050509392505050565b6060613226848460008561322f565b90509392505050565b606082471015613274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326b906143f4565b60405180910390fd5b61327d85613343565b6132bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132b390614460565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132e591906144fa565b60006040518083038185875af1925050503d8060008114613322576040519150601f19603f3d011682016040523d82523d6000602084013e613327565b606091505b5091509150613337828286613356565b92505050949350505050565b600080823b905060008111915050919050565b60608315613366578290506133b6565b6000835111156133795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ad9190614566565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b61346d8161345a565b811461347857600080fd5b50565b60008135905061348a81613464565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134bb82613490565b9050919050565b6134cb816134b0565b81146134d657600080fd5b50565b6000813590506134e8816134c2565b92915050565b6000806040838503121561350557613504613455565b5b60006135138582860161347b565b9250506020613524858286016134d9565b9150509250929050565b6135378161345a565b82525050565b6000602082019050613552600083018461352e565b92915050565b60006020828403121561356e5761356d613455565b5b600061357c848285016134d9565b91505092915050565b6000806040838503121561359c5761359b613455565b5b60006135aa858286016134d9565b92505060206135bb858286016134d9565b9150509250929050565b600080600080608085870312156135df576135de613455565b5b60006135ed8782880161347b565b94505060206135fe8782880161347b565b935050604061360f878288016134d9565b9250506060613620878288016134d9565b91505092959194509250565b60008115159050919050565b6136418161362c565b811461364c57600080fd5b50565b60008135905061365e81613638565b92915050565b60008060006060848603121561367d5761367c613455565b5b600061368b868287016134d9565b935050602061369c868287016134d9565b92505060406136ad8682870161364f565b9150509250925092565b6136c08161345a565b82525050565b6080820160008201516136dc60008501826136b7565b5060208201516136ef60208501826136b7565b50604082015161370260408501826136b7565b50606082015161371560608501826136b7565b50505050565b600060808201905061373060008301846136c6565b92915050565b6000819050919050565b61374981613736565b82525050565b60006020820190506137646000830184613740565b92915050565b6137738161362c565b82525050565b60e08201600082015161378f60008501826136b7565b5060208201516137a260208501826136b7565b5060408201516137b560408501826136b7565b5060608201516137c860608501826136b7565b5060808201516137db60808501826136b7565b5060a08201516137ee60a08501826136b7565b5060c082015161380160c085018261376a565b50505050565b600060e08201905061381c6000830184613779565b92915050565b61382b816134b0565b82525050565b60006020820190506138466000830184613822565b92915050565b60008151905061385b81613464565b92915050565b60006020828403121561387757613876613455565b5b60006138858482850161384c565b91505092915050565b600060ff82169050919050565b6138a48161388e565b81146138af57600080fd5b50565b6000815190506138c18161389b565b92915050565b6000602082840312156138dd576138dc613455565b5b60006138eb848285016138b2565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600061393b600f836138f4565b915061394682613905565b602082019050919050565b6000602082019050818103600083015261396a8161392e565b9050919050565b7f4d61782063617061636974792072656163686564000000000000000000000000600082015250565b60006139a76014836138f4565b91506139b282613971565b602082019050919050565b600060208201905081810360008301526139d68161399a565b9050919050565b7f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008201527f6963650000000000000000000000000000000000000000000000000000000000602082015250565b6000613a396023836138f4565b9150613a44826139dd565b604082019050919050565b60006020820190508181036000830152613a6881613a2c565b9050919050565b6000604082019050613a846000830185613822565b613a91602083018461352e565b9392505050565b7f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000600082015250565b6000613ace600e836138f4565b9150613ad982613a98565b602082019050919050565b60006020820190508181036000830152613afd81613ac1565b9050919050565b7f426f6e6420746f6f206c61726765000000000000000000000000000000000000600082015250565b6000613b3a600e836138f4565b9150613b4582613b04565b602082019050919050565b60006020820190508181036000830152613b6981613b2d565b9050919050565b600081519050613b7f81613638565b92915050565b600060208284031215613b9b57613b9a613455565b5b6000613ba984828501613b70565b91505092915050565b6000606082019050613bc7600083018661352e565b613bd46020830185613822565b613be1604083018461352e565b949350505050565b6000819050919050565b6000819050919050565b6000613c18613c13613c0e84613be9565b613bf3565b61345a565b9050919050565b613c2881613bfd565b82525050565b6000604082019050613c43600083018561352e565b613c506020830184613c1f565b9392505050565b6000604082019050613c6c600083018561352e565b613c79602083018461352e565b9392505050565b600069ffffffffffffffffffff82169050919050565b613c9f81613c80565b8114613caa57600080fd5b50565b600081519050613cbc81613c96565b92915050565b613ccb81613736565b8114613cd657600080fd5b50565b600081519050613ce881613cc2565b92915050565b600080600080600060a08688031215613d0a57613d09613455565b5b6000613d1888828901613cad565b9550506020613d2988828901613cd9565b9450506040613d3a8882890161384c565b9350506060613d4b8882890161384c565b9250506080613d5c88828901613cad565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115613def57808604811115613dcb57613dca613d69565b5b6001851615613dda5780820291505b8081029050613de885613d98565b9450613daf565b94509492505050565b600082613e085760019050613ec4565b81613e165760009050613ec4565b8160018114613e2c5760028114613e3657613e65565b6001915050613ec4565b60ff841115613e4857613e47613d69565b5b8360020a915084821115613e5f57613e5e613d69565b5b50613ec4565b5060208310610133831016604e8410600b8410161715613e9a5782820a905083811115613e9557613e94613d69565b5b613ec4565b613ea78484846001613da5565b92509050818404811115613ebe57613ebd613d69565b5b81810290505b9392505050565b6000613ed68261345a565b9150613ee18361388e565b9250613f0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613df8565b905092915050565b6000613f218261345a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f5457613f53613d69565b5b600182019050919050565b7f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260008201527f79207a65726f0000000000000000000000000000000000000000000000000000602082015250565b6000613fbb6026836138f4565b9150613fc682613f5f565b604082019050919050565b60006020820190508181036000830152613fea81613fae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061402b8261345a565b91506140368361345a565b92508261404657614045613ff1565b5b828204905092915050565b7f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000600082015250565b6000614087601e836138f4565b915061409282614051565b602082019050919050565b600060208201905081810360008301526140b68161407a565b9050919050565b60006140c88261345a565b91506140d38361345a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561410c5761410b613d69565b5b828202905092915050565b60006141228261345a565b915061412d8361345a565b9250828210156141405761413f613d69565b5b828203905092915050565b60006060820190506141606000830186613822565b61416d6020830185613822565b61417a604083018461352e565b949350505050565b600061418d8261345a565b91506141988361345a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141cd576141cc613d69565b5b828201905092915050565b6141e18161362c565b82525050565b60006080820190506141fc600083018761352e565b614209602083018661352e565b614216604083018561352e565b61422360608301846141d8565b95945050505050565b6000604082019050614241600083018561352e565b61424e6020830184613822565b9392505050565b7f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000600082015250565b600061428b601a836138f4565b915061429682614255565b602082019050919050565b600060208201905081810360008301526142ba8161427e565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061431d602a836138f4565b9150614328826142c1565b604082019050919050565b6000602082019050818103600083015261434c81614310565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006143de6026836138f4565b91506143e982614382565b604082019050919050565b6000602082019050818103600083015261440d816143d1565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061444a601d836138f4565b915061445582614414565b602082019050919050565b600060208201905081810360008301526144798161443d565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156144b4578082015181840152602081019050614499565b838111156144c3576000848401525b50505050565b60006144d482614480565b6144de818561448b565b93506144ee818560208601614496565b80840191505092915050565b600061450682846144c9565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061453882614511565b61454281856138f4565b9350614552818560208601614496565b61455b8161451c565b840191505092915050565b60006020820190508181036000830152614580818461452d565b90509291505056fea2646970667358221220861fe3c224e78c2f0a1cff0a3955c98cb73e839080251b86dbebdcf0d69b05c064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay(address)": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio(address)": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "maxPayout(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256,address)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "redeem(address,address,bool)": {
        "params": {
          "_recipient": "address",
          "_stake": "bool"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "standardizedDebtRatio(address)": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetPrice(address)": {
        "notice": "get asset price from chainlink"
      },
      "bondPrice(address)": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD(address)": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt(address)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(address)": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio(address)": {
        "notice": "calculate current ratio of debt to Necc supply"
      },
      "deposit(uint256,uint256,address,address)": {
        "notice": "deposit bond"
      },
      "maxPayout(address)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256,address)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address,address)": {
        "notice": "calculate amount of Necc available for claim by depositor"
      },
      "percentVestedFor(address,address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address,address,bool)": {
        "notice": "redeem bond for user"
      },
      "standardizedDebtRatio(address)": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7228,
        "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)20744_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)20596_storage)dyn_storage": {
        "base": "t_struct(Info)20596_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)20591_storage)dyn_storage": {
        "base": "t_struct(Payout)20591_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20627_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)20627_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)20654_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)20654_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)20591_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)20591_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)20627_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)20627_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20636_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)20636_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)20603_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)20603_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)20618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)20618_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)20627_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 20620,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20622,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20624,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20626,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)20636_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 20629,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20631,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20633,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20635,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)20654_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 20647,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20649,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20651,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20653,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)20603_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 20598,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20600,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20602,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)20645_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 20638,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20640,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20642,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20644,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)20596_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 20593,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20595,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)20591_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 20588,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20590,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)20744_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 20656,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20658,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20660,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20662,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 20664,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20666,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 20668,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 20670,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 20673,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 20678,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)20618_storage)"
          },
          {
            "astId": 20683,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20636_storage)"
          },
          {
            "astId": 20690,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20627_storage))"
          },
          {
            "astId": 20694,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20698,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20702,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20706,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20710,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)20596_storage)dyn_storage"
          },
          {
            "astId": 20715,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)20603_storage)"
          },
          {
            "astId": 20718,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)20645_storage"
          },
          {
            "astId": 20720,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 20722,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 20724,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 20726,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalBonus",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 20728,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          },
          {
            "astId": 20733,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_struct(Claim)20654_storage)"
          },
          {
            "astId": 20735,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 20741,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)20591_storage)dyn_storage)"
          },
          {
            "astId": 20743,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(Terms)20618_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 20605,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20607,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20609,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20611,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20613,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20615,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20617,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}