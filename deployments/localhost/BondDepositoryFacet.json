{
  "address": "0x2bd68F01F84C114c77cfD20542189Ac12c19E28a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "InvalidPrinciple",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "BCV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "BCV_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vesting",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Bond",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "controlVariable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTerm",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLiquidityBond",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Terms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1030cd186fb11c8ea62b23e81253dc286090319b1b9119e74716ec76f0fcc36",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x2bd68F01F84C114c77cfD20542189Ac12c19E28a",
    "transactionIndex": 0,
    "gasUsed": "3673279",
    "logsBloom": "0x
    "blockHash": "0xd756806377ce0b620e48ef6da1ce44e2b21727c668fe50d832e09eee570b95a7",
    "transactionHash": "0xe1030cd186fb11c8ea62b23e81253dc286090319b1b9119e74716ec76f0fcc36",
    "logs": [],
    "blockNumber": 54321857,
    "cumulativeGasUsed": "3673279",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fc97b761a383c1491a1b45095881db39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"InvalidPrinciple\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"BCV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BCV_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Bond\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityBond\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Terms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice(address)\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD(address)\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt(address)\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay(address)\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio(address)\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"maxPayout(address)\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256,address)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"redeem(address,address)\":{\"params\":{\"_principle\":\"address\",\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"standardizedDebtRatio(address)\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetPrice(address)\":{\"notice\":\"get asset price from chainlink\"},\"bondPrice(address)\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD(address)\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt(address)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(address)\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio(address)\":{\"notice\":\"calculate current ratio of debt to Necc supply\"},\"deposit(uint256,uint256,address,address)\":{\"notice\":\"deposit bond\"},\"maxPayout(address)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256,address)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address,address)\":{\"notice\":\"calculate amount of Necc available for claim by depositor\"},\"percentVestedFor(address,address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address,address)\":{\"notice\":\"redeem bond for user\"},\"standardizedDebtRatio(address)\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BondDepositoryFacet.sol\":\"BondDepositoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryFacet.sol\":{\"content\":\"pragma abicoder v2;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../lib/FixedPoint.sol\\\";\\nimport \\\"../../lib/FullMath.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\n// Chainlink price feed\\ninterface IOracle {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface ITreasury {\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_);\\n\\n    function valueOfToken(address _token, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 value_);\\n}\\n\\ninterface IBondCalculator {\\n    function valuation(address _LP, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function markdown(address _LP) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n}\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BondDepositoryFacet is Facet {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated(\\n        uint256 deposit,\\n        uint256 indexed payout,\\n        uint256 indexed expires,\\n        uint256 indexed priceInUSD\\n    );\\n    event BondRedeemed(\\n        address indexed recipient,\\n        uint256 payout,\\n        uint256 remaining\\n    );\\n    event BondPriceChanged(\\n        uint256 indexed priceInUSD,\\n        uint256 indexed internalPrice,\\n        uint256 indexed debtRatio\\n    );\\n    event ControlVariableAdjustment(\\n        uint256 initialBCV,\\n        uint256 newBCV,\\n        uint256 adjustment,\\n        bool addition\\n    );\\n\\n    /* ======== ERRORS ======== */\\n    error InvalidPrinciple(address _principle);\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor,\\n        address _principle\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        decayDebt(_principle);\\n        require(\\n            s.totalDebt[_principleIndex] <= s.terms[_principleIndex].maxDebt,\\n            \\\"Max capacity reached\\\"\\n        );\\n\\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\\n        uint256 nativePrice = _bondPrice(_principle);\\n\\n        require(\\n            _maxPrice >= nativePrice,\\n            \\\"Slippage limit: more than max price\\\"\\n        ); // slippage protection\\n\\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\\n        require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 Necc ( underflow protection )\\n        require(payout <= maxPayout(_principle), \\\"Bond too large\\\"); // size protection because there is no slippage\\n        // profits are calculated\\n        uint256 fee = payout.mul(s.terms[_principleIndex].fee).div(10000);\\n        uint256 profit = value.sub(payout);\\n        if (profit > 0) {\\n            profit = profit.sub(fee);\\n            /**\\n            principle is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) Necc\\n         */\\n            if (s.terms[_principleIndex].isLiquidityBond) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else if (_principle == s.ndol) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else {\\n                revert InvalidPrinciple(_principle);\\n            }\\n\\n            if (fee != 0) {\\n                // fee is transferred to dao in nNecc\\n                if (s.DAO != address(0)) {\\n                    stake(s.DAO, fee);\\n                }\\n                if (s.farmDistributor != address(0)) {\\n                    stake(s.farmDistributor, payout.mul(100).div(10000));\\n                }\\n            }\\n        }\\n\\n        // total debt is increased\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\\n\\n        // depositor info is stored\\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\\n            vesting: s.terms[_principleIndex].vestingTerm,\\n            lastTime: uint256(block.timestamp),\\n            pricePaid: priceInUSD\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated(\\n            _amount,\\n            payout,\\n            block.timestamp.add(s.terms[_principleIndex].vestingTerm),\\n            priceInUSD\\n        );\\n        emit BondPriceChanged(\\n            bondPriceInUSD(_principle),\\n            _bondPrice(_principle),\\n            debtRatio(_principle)\\n        );\\n\\n        adjust(_principle); // control variable is adjusted\\n        return payout;\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @param _recipient address\\n     *  @param _principle address\\n     *  @return uint\\n     */\\n    function redeem(address _recipient, address _principle)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\\n            _principleIndex\\n        ];\\n        // (seconds since last interaction / vesting term remaining)\\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\\n\\n        if (percentVested >= 10000) {\\n            // if fully vested\\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n            return stake(_recipient, info.payout); // pay user everything due\\n        } else {\\n            // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n            // store updated deposit info\\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(\\n                    uint256(block.timestamp).sub(info.lastTime)\\n                ),\\n                lastTime: uint256(block.timestamp),\\n                pricePaid: info.pricePaid\\n            });\\n\\n            emit BondRedeemed(\\n                _recipient,\\n                payout,\\n                s.bondInfo[_recipient][_principleIndex].payout\\n            );\\n            return stake(_recipient, payout);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\\n            debtDecay(_principle)\\n        );\\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return\\n            IERC20(s.Necc)\\n                .totalSupply()\\n                .mul(s.terms[_principleIndex].maxPayout)\\n                .div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value, address _principle)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else if (_principle == s.ndol) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        }\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        }\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\\n            s.terms[_principleIndex].minimumPrice = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice converts bond price to DAI value\\n     *  @return price_ uint\\n     */\\n    function bondPriceInUSD(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = bondPrice(_principle)\\n                .mul(IBondCalculator(address(this)).markdown(_principle))\\n                .div(100);\\n        } else if (_principle == s.ndol) {\\n            price_ = bondPrice(_principle)\\n                .mul(10**IERC20Decimals(_principle).decimals())\\n                .div(100);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to Necc supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio(address _principle)\\n        public\\n        view\\n        returns (uint256 debtRatio_)\\n    {\\n        uint256 supply = IERC20(s.Necc).totalSupply();\\n        debtRatio_ = FixedPoint\\n            .fraction(currentDebt(_principle).mul(1e9), supply)\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\n     *  @return uint\\n     */\\n    function standardizedDebtRatio(address _principle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                debtRatio(_principle)\\n                    .mul(IBondCalculator(address(this)).markdown(_principle))\\n                    .div(1e9);\\n        } else if (_principle == s.ndol) {\\n            return debtRatio(_principle);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay(address _principle)\\n        public\\n        view\\n        returns (uint256 decay_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\\n            s.lastDecay[_principleIndex]\\n        );\\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\\n            s.terms[_principleIndex].vestingTerm\\n        );\\n        if (decay_ > s.totalDebt[_principleIndex]) {\\n            decay_ = s.totalDebt[_principleIndex];\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor, address _principle)\\n        public\\n        view\\n        returns (uint256 percentVested_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\\n            _principleIndex\\n        ];\\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of Necc available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor, address _principle)\\n        external\\n        view\\n        returns (uint256 pendingPayout_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice allow user to stake payout automatically\\n     *  @param _recipient address\\n     *  @param _amount uint\\n     *  @return uint\\n     */\\n    function stake(address _recipient, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        IERC20(s.Necc).approve(address(this), _amount);\\n        IStaking(address(this)).stake(_amount, _recipient);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\\n\\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\\n            uint256 initial = _bondTerms.controlVariable;\\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n            uint256 change = changeBy(_principle);\\n\\n            if (adjustment.delta >= change) {\\n                adjustment.delta = adjustment.delta.sub(change);\\n            } else {\\n                adjustment.delta = 0;\\n            }\\n            if (adjustment.timeToTarget >= timeSinceLast) {\\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\\n                    timeSinceLast\\n                );\\n            } else {\\n                adjustment.timeToTarget = 0;\\n            }\\n\\n            if (adjustment.add) {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\\n                    change\\n                );\\n            } else {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\\n                    change\\n                );\\n            }\\n\\n            adjustment.lastTime = block.timestamp;\\n\\n            emit ControlVariableAdjustment(\\n                initial,\\n                _bondTerms.controlVariable,\\n                change,\\n                adjustment.add\\n            );\\n        }\\n    }\\n\\n    function changeBy(address _principle)\\n        internal\\n        view\\n        returns (uint256 changeBy_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n\\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\\n            adjustment.timeToTarget\\n        );\\n\\n        if (changeBy_ > adjustment.delta) {\\n            changeBy_ = adjustment.delta;\\n        }\\n    }\\n\\n    function bondInfo(address _depositor, address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Bond memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.bondInfo[_depositor][_principleIndex];\\n    }\\n\\n    function BCV(address _principle) public view returns (uint256 BCV_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 change = changeBy(_principle);\\n\\n        if (_bondAdjustment.add) {\\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\\n        } else {\\n            if (s.terms[_principleIndex].controlVariable > change) {\\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\\n            } else {\\n                BCV_ = 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice get asset price from chainlink\\n     */\\n    function assetPrice(address _principle) public view returns (int256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        (, int256 price, , , ) = IOracle(s.priceFeeds[_principleIndex])\\n            .latestRoundData();\\n\\n        return price;\\n    }\\n\\n    function terms(address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Terms memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.terms[_principleIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x7c1f3e4464d4b67b6c1aade6daf1277b42ff22059cf8f6dd015835e54506713b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a4171a71240b68dc37f64342ab46f8f395e8a4f45b41398121003056549690f\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 =\\n        0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return\\n            uq112x112(\\n                uint224(\\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\\n                        ((112 - safeShiftBits) / 2)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x136dde09fc55dc6585ec83bbd5518c94e5efbff574b04346d552cd35757468b4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256 l, uint256 h)\\n    {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (~d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((~pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x37dfeafa81be1494b92766bed34216ddf533593cc88bf6281dde5476ffb4cff7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address sNecc; // token given for staking\\n        address nNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0x99f3f5202ed90e964deaeff2198b2bb9638b6a13c12c792712b299c18180283b\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506141b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad5fe5eb11610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063ad5fe5eb14610285578063b11512e2146102b5578063b883b058146102e5578063bba06f271461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f214610225578063aa5883451461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a9190613149565b610405565b60405161012c9190613198565b60405180910390f35b61014f600480360381019061014a91906131b3565b61055c565b60405161015c9190613198565b60405180910390f35b61017f600480360381019061017a91906131b3565b6106ff565b60405161018c9190613198565b60405180910390f35b6101af60048036038101906101aa91906131e0565b6107e9565b6040516101bc9190613198565b60405180910390f35b6101df60048036038101906101da91906131e0565b6108ae565b6040516101ec9190613198565b60405180910390f35b61020f600480360381019061020a9190613220565b6109ba565b60405161021c9190613198565b60405180910390f35b61023f600480360381019061023a91906131b3565b611401565b60405161024c9190613198565b60405180910390f35b61026f600480360381019061026a91906131b3565b611453565b60405161027c9190613198565b60405180910390f35b61029f600480360381019061029a91906131e0565b61153e565b6040516102ac91906132eb565b60405180910390f35b6102cf60048036038101906102ca91906131b3565b6115ed565b6040516102dc9190613198565b60405180910390f35b6102ff60048036038101906102fa91906131b3565b611798565b60405161030c919061331f565b60405180910390f35b61032f600480360381019061032a91906131e0565b611867565b60405161033c9190613198565b60405180910390f35b61035f600480360381019061035a91906131b3565b611bd4565b60405161036c91906133e3565b60405180910390f35b61038f600480360381019061038a91906131b3565b611c74565b60405161039c9190613198565b60405180910390f35b6103bf60048036038101906103ba91906131b3565b611eb3565b6040516103cc9190613198565b60405180910390f35b6103ef60048036038101906103ea91906131b3565b611f8e565b6040516103fc9190613198565b60405180910390f35b60008061041c83600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a87610465886115ed565b612104565b61230b565b61234990919063ffffffff16565b915050610556565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f9886115ed565b612104565b61230b565b61234990919063ffffffff16565b915050610556565b826040517fcacddcb300000000000000000000000000000000000000000000000000000000815260040161054d919061340d565b60405180910390fd5b92915050565b60008061057383600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156106535761064b633b9aca0061063d3073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105e5919061340d565b602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061343d565b61062f876106ff565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150506106fa565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106bd576106b5836106ff565b9150506106fa565b826040517fcacddcb30000000000000000000000000000000000000000000000000000000081526004016106f1919061340d565b60405180910390fd5b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610795919061343d565b90506107e1670de0b6b3a76400006107d36107ce6107c8633b9aca006107ba89611401565b61235f90919063ffffffff16565b85612104565b61230b565b61234990919063ffffffff16565b915050919050565b60008061080083600061208290919063ffffffff16565b9050600061080e85856108ae565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600001549050612710821061087b578093506108a5565b6108a2612710610894848461235f90919063ffffffff16565b61234990919063ffffffff16565b93505b50505092915050565b6000806108c583600061208290919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600061096982604001514261237590919063ffffffff16565b905060008260600151905060008111156109ab576109a4816109966127108561235f90919063ffffffff16565b61234990919063ffffffff16565b94506109b0565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a22906134c7565b60405180910390fd5b6000610a4183600061208290919063ffffffff16565b9050610a4c8361238b565b6000600a016000828152602001908152602001600020600401546000600d016000838152602001908152602001600020541115610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590613533565b60405180910390fd5b6000610ac984611c74565b90506000610ad68561240d565b905080871015610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b12906135c5565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610b7c9291906135e5565b602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd919061343d565b90506000610bcb8288610405565b905062989680811015610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a9061365a565b60405180910390fd5b610c1c87611f8e565b811115610c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c55906136c6565b60405180910390fd5b6000610ca0612710610c926000600a0160008a8152602001908152602001600020600301548561235f90919063ffffffff16565b61234990919063ffffffff16565b90506000610cb7838561237590919063ffffffff16565b905060008111156111d757610cd5828261237590919063ffffffff16565b90506000600a01600088815260200190815260200160002060060160009054906101000a900460ff1615610e7f57610d3033308e8c73ffffffffffffffffffffffffffffffffffffffff166125fc909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610d909291906135e5565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613712565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610e369392919061373f565b6020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061343d565b50611092565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561105457610f0533308e8c73ffffffffffffffffffffffffffffffffffffffff166125fc909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610f659291906135e5565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190613712565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b815260040161100b9392919061373f565b6020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e919061343d565b50611091565b886040517fcacddcb3000000000000000000000000000000000000000000000000000000008152600401611088919061340d565b60405180910390fd5b5b600082146111d657600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461112457611122600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612685565b505b600073ffffffffffffffffffffffffffffffffffffffff16600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111d5576111d3600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166111ce6127106111c060648861235f90919063ffffffff16565b61234990919063ffffffff16565b612685565b505b5b5b611200846000600d0160008a8152602001908152602001600020546127b290919063ffffffff16565b6000600d01600089815260200190815260200160002081905550604051806080016040528061128e856000600c0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600001546127b290919063ffffffff16565b81526020018781526020014281526020016000600a0160008a8152602001908152602001600020600501548152506000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856113676000600a0160008a815260200190815260200160002060050154426127b290919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f6040516113979190613198565b60405180910390a46113a8896106ff565b6113b18a61240d565b6113ba8b611c74565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a46113ef896127c8565b82975050505050505050949350505050565b60008061141883600061208290919063ffffffff16565b905061144b61142684611eb3565b6000600d0160008481526020019081526020016000205461237590919063ffffffff16565b915050919050565b60008061146a83600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600061149085612994565b90508160000160009054906101000a900460ff16156114dc576114d5816000600a016000868152602001908152602001600020600001546127b290919063ffffffff16565b9350611536565b806000600a01600085815260200190815260200160002060000154111561153057611529816000600a0160008681526020019081526020016000206000015461237590919063ffffffff16565b9350611535565b600193505b5b505050919050565b611546613018565b600061155c83600061208290919063ffffffff16565b90506000600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b60008061160483600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156116985761169162989680611683633b9aca0061167561164d886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b9150611754565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117535761175062989680611742633b9aca0061173461170c886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015611792576000600a0160008281526020019081526020016000206001015491505b50919050565b6000806117af83600061208290919063ffffffff16565b9050600080601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906137e4565b5050509150508092505050919050565b60008061187e83600061208290919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600061191586866108ae565b90506127108110611a03576000600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508573ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1836000015160006040516119e39291906138a4565b60405180910390a26119f9868360000151612685565b9350505050611bce565b6000611a30612710611a2284866000015161235f90919063ffffffff16565b61234990919063ffffffff16565b90506040518060800160405280611a5483866000015161237590919063ffffffff16565b815260200184602001518152602001428152602001611a96611a8386604001514261237590919063ffffffff16565b866060015161237590919063ffffffff16565b8152506000600c0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600c0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060000154604051611bb59291906138cd565b60405180910390a2611bc78782612685565b9450505050505b92915050565b611bdc613040565b6000611bf283600061208290919063ffffffff16565b90506000600a0160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611c8b83600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611d6757611d606064611d523073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611cfa919061340d565b602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b919061343d565b611d44876115ed565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150611ead565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e6f57611e686064611e5a8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e37919061392f565b600a611e439190613abe565b611e4c876115ed565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150611eac565b826040517fcacddcb3000000000000000000000000000000000000000000000000000000008152600401611ea3919061340d565b60405180910390fd5b5b50919050565b600080611eca83600061208290919063ffffffff16565b90506000611ef76000600e016000848152602001908152602001600020544261237590919063ffffffff16565b9050611f4d6000600a01600084815260200190815260200160002060050154611f3f836000600d0160008781526020019081526020016000205461235f90919063ffffffff16565b61234990919063ffffffff16565b92506000600d01600083815260200190815260200160002054831115611f87576000600d0160008381526020019081526020016000205492505b5050919050565b600080611fa583600061208290919063ffffffff16565b905061207a620186a061206c6000600a016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205e919061343d565b61235f90919063ffffffff16565b61234990919063ffffffff16565b915050919050565b60008061209184600801612a70565b905060005b818110156120fb578373ffffffffffffffffffffffffffffffffffffffff166120c28660080183612a85565b73ffffffffffffffffffffffffffffffffffffffff1614156120e85780925050506120fe565b80806120f390613b09565b915050612096565b50505b92915050565b61210c61307f565b6000821161214f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214690613bc4565b60405180910390fd5b600083141561218d57604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612305565b71ffffffffffffffffffffffffffffffffffff8016831161225557600082607060ff1685901b6121bd9190613c13565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016811115612220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221790613c90565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612305565b6000612271846e01000000000000000000000000000085612a9f565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80168111156122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90613c90565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166123429190613c13565b9050919050565b600081836123579190613c13565b905092915050565b6000818361236d9190613cb0565b905092915050565b600081836123839190613d0a565b905092915050565b60006123a182600061208290919063ffffffff16565b90506123d46123af83611eb3565b6000600d0160008481526020019081526020016000205461237590919063ffffffff16565b6000600d01600083815260200190815260200160002081905550426000600e016000838152602001908152602001600020819055505050565b60008061242483600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156124b8576124b1629896806124a3633b9aca0061249561246d886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b9150612574565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125735761257062989680612562633b9aca0061255461252c886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b91505b5b6000600a016000828152602001908152602001600020600101548210156125b6576000600a0160008281526020019081526020016000206001015491506125f6565b600080600a01600083815260200190815260200160002060010154146125f557600080600a016000838152602001908152602001600020600101819055505b5b50919050565b61267f846323b872dd60e01b85858560405160240161261d93929190613d3e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b47565b50505050565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b81526004016126e69291906135e5565b6020604051808303816000875af1158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190613712565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775783856040518363ffffffff1660e01b8152600401612765929190613d75565b6020604051808303816000875af1158015612784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a89190613712565b5081905092915050565b600081836127c09190613d9e565b905092915050565b60006127de82600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600080600a01600084815260200190815260200160002090506000826001015411801561282a575060008260020154115b1561298e57600081600001549050600061285184600301544261237590919063ffffffff16565b9050600061285e87612994565b90508085600101541061288f5761288281866001015461237590919063ffffffff16565b856001018190555061289a565b600085600101819055505b818560020154106128c9576128bc82866002015461237590919063ffffffff16565b85600201819055506128d4565b600085600201819055505b8460000160009054906101000a900460ff161561290f576129028185600001546127b290919063ffffffff16565b846000018190555061292f565b61292681856000015461237590919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff166040516129829493929190613e03565b60405180910390a15050505b50505050565b6000806129ab83600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152505090506000612a2382606001514261237590919063ffffffff16565b9050612a528260400151612a4483856020015161235f90919063ffffffff16565b61234990919063ffffffff16565b93508160200151841115612a6857816020015193505b505050919050565b6000612a7e82600001612c0e565b9050919050565b6000612a948360000183612c1f565b60001c905092915050565b6000806000612aae8686612c4a565b9150915060008480612ac357612ac2613be4565b5b868809905082811115612ae057600182612add9190613d0a565b91505b8083612aec9190613d0a565b9250848210612b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2790613e94565b60405180910390fd5b612b3b838387612cbf565b93505050509392505050565b6000612ba9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e729092919063ffffffff16565b9050600081511115612c095780806020019051810190612bc99190613712565b612c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bff90613f26565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000826000018281548110612c3757612c36613f46565b5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80612c7e57612c7d613be4565b5b84860990508385612c8f9190613cb0565b92508281612c9d9190613d0a565b915082811015612cb757600182612cb49190613d0a565b91505b509250929050565b60008060018319612cd09190613d9e565b831690508083612ce09190613c13565b92508085612cee9190613c13565b945060018160018319612d019190613d9e565b612d0b9190613c13565b612d159190613d9e565b84612d209190613cb0565b85612d2b9190613d9e565b94506000600190508084612d3f9190613cb0565b6002612d4b9190613d0a565b81612d569190613cb0565b90508084612d649190613cb0565b6002612d709190613d0a565b81612d7b9190613cb0565b90508084612d899190613cb0565b6002612d959190613d0a565b81612da09190613cb0565b90508084612dae9190613cb0565b6002612dba9190613d0a565b81612dc59190613cb0565b90508084612dd39190613cb0565b6002612ddf9190613d0a565b81612dea9190613cb0565b90508084612df89190613cb0565b6002612e049190613d0a565b81612e0f9190613cb0565b90508084612e1d9190613cb0565b6002612e299190613d0a565b81612e349190613cb0565b90508084612e429190613cb0565b6002612e4e9190613d0a565b81612e599190613cb0565b90508086612e679190613cb0565b925050509392505050565b6060612e818484600085612e8a565b90509392505050565b606082471015612ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec690613fe7565b60405180910390fd5b612ed885612f9e565b612f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0e90614053565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612f4091906140ed565b60006040518083038185875af1925050503d8060008114612f7d576040519150601f19603f3d011682016040523d82523d6000602084013e612f82565b606091505b5091509150612f92828286612fb1565b92505050949350505050565b600080823b905060008111915050919050565b60608315612fc157829050613011565b600083511115612fd45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130089190614159565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b6130c8816130b5565b81146130d357600080fd5b50565b6000813590506130e5816130bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613116826130eb565b9050919050565b6131268161310b565b811461313157600080fd5b50565b6000813590506131438161311d565b92915050565b600080604083850312156131605761315f6130b0565b5b600061316e858286016130d6565b925050602061317f85828601613134565b9150509250929050565b613192816130b5565b82525050565b60006020820190506131ad6000830184613189565b92915050565b6000602082840312156131c9576131c86130b0565b5b60006131d784828501613134565b91505092915050565b600080604083850312156131f7576131f66130b0565b5b600061320585828601613134565b925050602061321685828601613134565b9150509250929050565b6000806000806080858703121561323a576132396130b0565b5b6000613248878288016130d6565b9450506020613259878288016130d6565b935050604061326a87828801613134565b925050606061327b87828801613134565b91505092959194509250565b613290816130b5565b82525050565b6080820160008201516132ac6000850182613287565b5060208201516132bf6020850182613287565b5060408201516132d26040850182613287565b5060608201516132e56060850182613287565b50505050565b60006080820190506133006000830184613296565b92915050565b6000819050919050565b61331981613306565b82525050565b60006020820190506133346000830184613310565b92915050565b60008115159050919050565b61334f8161333a565b82525050565b60e08201600082015161336b6000850182613287565b50602082015161337e6020850182613287565b5060408201516133916040850182613287565b5060608201516133a46060850182613287565b5060808201516133b76080850182613287565b5060a08201516133ca60a0850182613287565b5060c08201516133dd60c0850182613346565b50505050565b600060e0820190506133f86000830184613355565b92915050565b6134078161310b565b82525050565b600060208201905061342260008301846133fe565b92915050565b600081519050613437816130bf565b92915050565b600060208284031215613453576134526130b0565b5b600061346184828501613428565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b60006134b1600f8361346a565b91506134bc8261347b565b602082019050919050565b600060208201905081810360008301526134e0816134a4565b9050919050565b7f4d61782063617061636974792072656163686564000000000000000000000000600082015250565b600061351d60148361346a565b9150613528826134e7565b602082019050919050565b6000602082019050818103600083015261354c81613510565b9050919050565b7f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008201527f6963650000000000000000000000000000000000000000000000000000000000602082015250565b60006135af60238361346a565b91506135ba82613553565b604082019050919050565b600060208201905081810360008301526135de816135a2565b9050919050565b60006040820190506135fa60008301856133fe565b6136076020830184613189565b9392505050565b7f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000600082015250565b6000613644600e8361346a565b915061364f8261360e565b602082019050919050565b6000602082019050818103600083015261367381613637565b9050919050565b7f426f6e6420746f6f206c61726765000000000000000000000000000000000000600082015250565b60006136b0600e8361346a565b91506136bb8261367a565b602082019050919050565b600060208201905081810360008301526136df816136a3565b9050919050565b6136ef8161333a565b81146136fa57600080fd5b50565b60008151905061370c816136e6565b92915050565b600060208284031215613728576137276130b0565b5b6000613736848285016136fd565b91505092915050565b60006060820190506137546000830186613189565b61376160208301856133fe565b61376e6040830184613189565b949350505050565b600069ffffffffffffffffffff82169050919050565b61379581613776565b81146137a057600080fd5b50565b6000815190506137b28161378c565b92915050565b6137c181613306565b81146137cc57600080fd5b50565b6000815190506137de816137b8565b92915050565b600080600080600060a08688031215613800576137ff6130b0565b5b600061380e888289016137a3565b955050602061381f888289016137cf565b945050604061383088828901613428565b935050606061384188828901613428565b9250506080613852888289016137a3565b9150509295509295909350565b6000819050919050565b6000819050919050565b600061388e6138896138848461385f565b613869565b6130b5565b9050919050565b61389e81613873565b82525050565b60006040820190506138b96000830185613189565b6138c66020830184613895565b9392505050565b60006040820190506138e26000830185613189565b6138ef6020830184613189565b9392505050565b600060ff82169050919050565b61390c816138f6565b811461391757600080fd5b50565b60008151905061392981613903565b92915050565b600060208284031215613945576139446130b0565b5b60006139538482850161391a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156139e2578086048111156139be576139bd61395c565b5b60018516156139cd5780820291505b80810290506139db8561398b565b94506139a2565b94509492505050565b6000826139fb5760019050613ab7565b81613a095760009050613ab7565b8160018114613a1f5760028114613a2957613a58565b6001915050613ab7565b60ff841115613a3b57613a3a61395c565b5b8360020a915084821115613a5257613a5161395c565b5b50613ab7565b5060208310610133831016604e8410600b8410161715613a8d5782820a905083811115613a8857613a8761395c565b5b613ab7565b613a9a8484846001613998565b92509050818404811115613ab157613ab061395c565b5b81810290505b9392505050565b6000613ac9826130b5565b9150613ad4836138f6565b9250613b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139eb565b905092915050565b6000613b14826130b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b4757613b4661395c565b5b600182019050919050565b7f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260008201527f79207a65726f0000000000000000000000000000000000000000000000000000602082015250565b6000613bae60268361346a565b9150613bb982613b52565b604082019050919050565b60006020820190508181036000830152613bdd81613ba1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c1e826130b5565b9150613c29836130b5565b925082613c3957613c38613be4565b5b828204905092915050565b7f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000600082015250565b6000613c7a601e8361346a565b9150613c8582613c44565b602082019050919050565b60006020820190508181036000830152613ca981613c6d565b9050919050565b6000613cbb826130b5565b9150613cc6836130b5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613cff57613cfe61395c565b5b828202905092915050565b6000613d15826130b5565b9150613d20836130b5565b925082821015613d3357613d3261395c565b5b828203905092915050565b6000606082019050613d5360008301866133fe565b613d6060208301856133fe565b613d6d6040830184613189565b949350505050565b6000604082019050613d8a6000830185613189565b613d9760208301846133fe565b9392505050565b6000613da9826130b5565b9150613db4836130b5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613de957613de861395c565b5b828201905092915050565b613dfd8161333a565b82525050565b6000608082019050613e186000830187613189565b613e256020830186613189565b613e326040830185613189565b613e3f6060830184613df4565b95945050505050565b7f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000600082015250565b6000613e7e601a8361346a565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613f10602a8361346a565b9150613f1b82613eb4565b604082019050919050565b60006020820190508181036000830152613f3f81613f03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613fd160268361346a565b9150613fdc82613f75565b604082019050919050565b6000602082019050818103600083015261400081613fc4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061403d601d8361346a565b915061404882614007565b602082019050919050565b6000602082019050818103600083015261406c81614030565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156140a757808201518184015260208101905061408c565b838111156140b6576000848401525b50505050565b60006140c782614073565b6140d1818561407e565b93506140e1818560208601614089565b80840191505092915050565b60006140f982846140bc565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061412b82614104565b614135818561346a565b9350614145818560208601614089565b61414e8161410f565b840191505092915050565b600060208201905081810360008301526141738184614120565b90509291505056fea2646970667358221220b25d4db64d555a4b7747a3b9bb395ae0cf705cdcb494aec5a3c770f23fa29ad664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad5fe5eb11610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063ad5fe5eb14610285578063b11512e2146102b5578063b883b058146102e5578063bba06f271461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f214610225578063aa5883451461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a9190613149565b610405565b60405161012c9190613198565b60405180910390f35b61014f600480360381019061014a91906131b3565b61055c565b60405161015c9190613198565b60405180910390f35b61017f600480360381019061017a91906131b3565b6106ff565b60405161018c9190613198565b60405180910390f35b6101af60048036038101906101aa91906131e0565b6107e9565b6040516101bc9190613198565b60405180910390f35b6101df60048036038101906101da91906131e0565b6108ae565b6040516101ec9190613198565b60405180910390f35b61020f600480360381019061020a9190613220565b6109ba565b60405161021c9190613198565b60405180910390f35b61023f600480360381019061023a91906131b3565b611401565b60405161024c9190613198565b60405180910390f35b61026f600480360381019061026a91906131b3565b611453565b60405161027c9190613198565b60405180910390f35b61029f600480360381019061029a91906131e0565b61153e565b6040516102ac91906132eb565b60405180910390f35b6102cf60048036038101906102ca91906131b3565b6115ed565b6040516102dc9190613198565b60405180910390f35b6102ff60048036038101906102fa91906131b3565b611798565b60405161030c919061331f565b60405180910390f35b61032f600480360381019061032a91906131e0565b611867565b60405161033c9190613198565b60405180910390f35b61035f600480360381019061035a91906131b3565b611bd4565b60405161036c91906133e3565b60405180910390f35b61038f600480360381019061038a91906131b3565b611c74565b60405161039c9190613198565b60405180910390f35b6103bf60048036038101906103ba91906131b3565b611eb3565b6040516103cc9190613198565b60405180910390f35b6103ef60048036038101906103ea91906131b3565b611f8e565b6040516103fc9190613198565b60405180910390f35b60008061041c83600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a87610465886115ed565b612104565b61230b565b61234990919063ffffffff16565b915050610556565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f9886115ed565b612104565b61230b565b61234990919063ffffffff16565b915050610556565b826040517fcacddcb300000000000000000000000000000000000000000000000000000000815260040161054d919061340d565b60405180910390fd5b92915050565b60008061057383600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156106535761064b633b9aca0061063d3073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105e5919061340d565b602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061343d565b61062f876106ff565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150506106fa565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106bd576106b5836106ff565b9150506106fa565b826040517fcacddcb30000000000000000000000000000000000000000000000000000000081526004016106f1919061340d565b60405180910390fd5b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610795919061343d565b90506107e1670de0b6b3a76400006107d36107ce6107c8633b9aca006107ba89611401565b61235f90919063ffffffff16565b85612104565b61230b565b61234990919063ffffffff16565b915050919050565b60008061080083600061208290919063ffffffff16565b9050600061080e85856108ae565b9050600080600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020600001549050612710821061087b578093506108a5565b6108a2612710610894848461235f90919063ffffffff16565b61234990919063ffffffff16565b93505b50505092915050565b6000806108c583600061208290919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600061096982604001514261237590919063ffffffff16565b905060008260600151905060008111156109ab576109a4816109966127108561235f90919063ffffffff16565b61234990919063ffffffff16565b94506109b0565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a22906134c7565b60405180910390fd5b6000610a4183600061208290919063ffffffff16565b9050610a4c8361238b565b6000600a016000828152602001908152602001600020600401546000600d016000838152602001908152602001600020541115610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590613533565b60405180910390fd5b6000610ac984611c74565b90506000610ad68561240d565b905080871015610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b12906135c5565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610b7c9291906135e5565b602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd919061343d565b90506000610bcb8288610405565b905062989680811015610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a9061365a565b60405180910390fd5b610c1c87611f8e565b811115610c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c55906136c6565b60405180910390fd5b6000610ca0612710610c926000600a0160008a8152602001908152602001600020600301548561235f90919063ffffffff16565b61234990919063ffffffff16565b90506000610cb7838561237590919063ffffffff16565b905060008111156111d757610cd5828261237590919063ffffffff16565b90506000600a01600088815260200190815260200160002060060160009054906101000a900460ff1615610e7f57610d3033308e8c73ffffffffffffffffffffffffffffffffffffffff166125fc909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610d909291906135e5565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613712565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610e369392919061373f565b6020604051808303816000875af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061343d565b50611092565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561105457610f0533308e8c73ffffffffffffffffffffffffffffffffffffffff166125fc909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610f659291906135e5565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190613712565b50600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b815260040161100b9392919061373f565b6020604051808303816000875af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e919061343d565b50611091565b886040517fcacddcb3000000000000000000000000000000000000000000000000000000008152600401611088919061340d565b60405180910390fd5b5b600082146111d657600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461112457611122600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612685565b505b600073ffffffffffffffffffffffffffffffffffffffff16600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111d5576111d3600060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166111ce6127106111c060648861235f90919063ffffffff16565b61234990919063ffffffff16565b612685565b505b5b5b611200846000600d0160008a8152602001908152602001600020546127b290919063ffffffff16565b6000600d01600089815260200190815260200160002081905550604051806080016040528061128e856000600c0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600001546127b290919063ffffffff16565b81526020018781526020014281526020016000600a0160008a8152602001908152602001600020600501548152506000600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856113676000600a0160008a815260200190815260200160002060050154426127b290919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f6040516113979190613198565b60405180910390a46113a8896106ff565b6113b18a61240d565b6113ba8b611c74565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a46113ef896127c8565b82975050505050505050949350505050565b60008061141883600061208290919063ffffffff16565b905061144b61142684611eb3565b6000600d0160008481526020019081526020016000205461237590919063ffffffff16565b915050919050565b60008061146a83600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600061149085612994565b90508160000160009054906101000a900460ff16156114dc576114d5816000600a016000868152602001908152602001600020600001546127b290919063ffffffff16565b9350611536565b806000600a01600085815260200190815260200160002060000154111561153057611529816000600a0160008681526020019081526020016000206000015461237590919063ffffffff16565b9350611535565b600193505b5b505050919050565b611546613018565b600061155c83600061208290919063ffffffff16565b90506000600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b60008061160483600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156116985761169162989680611683633b9aca0061167561164d886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b9150611754565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117535761175062989680611742633b9aca0061173461170c886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b91505b5b6000600a01600082815260200190815260200160002060010154821015611792576000600a0160008281526020019081526020016000206001015491505b50919050565b6000806117af83600061208290919063ffffffff16565b9050600080601001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906137e4565b5050509150508092505050919050565b60008061187e83600061208290919063ffffffff16565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600061191586866108ae565b90506127108110611a03576000600c0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508573ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1836000015160006040516119e39291906138a4565b60405180910390a26119f9868360000151612685565b9350505050611bce565b6000611a30612710611a2284866000015161235f90919063ffffffff16565b61234990919063ffffffff16565b90506040518060800160405280611a5483866000015161237590919063ffffffff16565b815260200184602001518152602001428152602001611a96611a8386604001514261237590919063ffffffff16565b866060015161237590919063ffffffff16565b8152506000600c0160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600c0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060000154604051611bb59291906138cd565b60405180910390a2611bc78782612685565b9450505050505b92915050565b611bdc613040565b6000611bf283600061208290919063ffffffff16565b90506000600a0160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611c8b83600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff1615611d6757611d606064611d523073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611cfa919061340d565b602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b919061343d565b611d44876115ed565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150611ead565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e6f57611e686064611e5a8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e37919061392f565b600a611e439190613abe565b611e4c876115ed565b61235f90919063ffffffff16565b61234990919063ffffffff16565b9150611eac565b826040517fcacddcb3000000000000000000000000000000000000000000000000000000008152600401611ea3919061340d565b60405180910390fd5b5b50919050565b600080611eca83600061208290919063ffffffff16565b90506000611ef76000600e016000848152602001908152602001600020544261237590919063ffffffff16565b9050611f4d6000600a01600084815260200190815260200160002060050154611f3f836000600d0160008781526020019081526020016000205461235f90919063ffffffff16565b61234990919063ffffffff16565b92506000600d01600083815260200190815260200160002054831115611f87576000600d0160008381526020019081526020016000205492505b5050919050565b600080611fa583600061208290919063ffffffff16565b905061207a620186a061206c6000600a016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205e919061343d565b61235f90919063ffffffff16565b61234990919063ffffffff16565b915050919050565b60008061209184600801612a70565b905060005b818110156120fb578373ffffffffffffffffffffffffffffffffffffffff166120c28660080183612a85565b73ffffffffffffffffffffffffffffffffffffffff1614156120e85780925050506120fe565b80806120f390613b09565b915050612096565b50505b92915050565b61210c61307f565b6000821161214f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214690613bc4565b60405180910390fd5b600083141561218d57604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612305565b71ffffffffffffffffffffffffffffffffffff8016831161225557600082607060ff1685901b6121bd9190613c13565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016811115612220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221790613c90565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612305565b6000612271846e01000000000000000000000000000085612a9f565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80168111156122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90613c90565b60405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166123429190613c13565b9050919050565b600081836123579190613c13565b905092915050565b6000818361236d9190613cb0565b905092915050565b600081836123839190613d0a565b905092915050565b60006123a182600061208290919063ffffffff16565b90506123d46123af83611eb3565b6000600d0160008481526020019081526020016000205461237590919063ffffffff16565b6000600d01600083815260200190815260200160002081905550426000600e016000838152602001908152602001600020819055505050565b60008061242483600061208290919063ffffffff16565b90506000600a01600082815260200190815260200160002060060160009054906101000a900460ff16156124b8576124b1629896806124a3633b9aca0061249561246d886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b9150612574565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125735761257062989680612562633b9aca0061255461252c886106ff565b6000600a0160008881526020019081526020016000206000015461235f90919063ffffffff16565b6127b290919063ffffffff16565b61234990919063ffffffff16565b91505b5b6000600a016000828152602001908152602001600020600101548210156125b6576000600a0160008281526020019081526020016000206001015491506125f6565b600080600a01600083815260200190815260200160002060010154146125f557600080600a016000838152602001908152602001600020600101819055505b5b50919050565b61267f846323b872dd60e01b85858560405160240161261d93929190613d3e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b47565b50505050565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b81526004016126e69291906135e5565b6020604051808303816000875af1158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190613712565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775783856040518363ffffffff1660e01b8152600401612765929190613d75565b6020604051808303816000875af1158015612784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a89190613712565b5081905092915050565b600081836127c09190613d9e565b905092915050565b60006127de82600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000209050600080600a01600084815260200190815260200160002090506000826001015411801561282a575060008260020154115b1561298e57600081600001549050600061285184600301544261237590919063ffffffff16565b9050600061285e87612994565b90508085600101541061288f5761288281866001015461237590919063ffffffff16565b856001018190555061289a565b600085600101819055505b818560020154106128c9576128bc82866002015461237590919063ffffffff16565b85600201819055506128d4565b600085600201819055505b8460000160009054906101000a900460ff161561290f576129028185600001546127b290919063ffffffff16565b846000018190555061292f565b61292681856000015461237590919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff166040516129829493929190613e03565b60405180910390a15050505b50505050565b6000806129ab83600061208290919063ffffffff16565b9050600080600b0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152505090506000612a2382606001514261237590919063ffffffff16565b9050612a528260400151612a4483856020015161235f90919063ffffffff16565b61234990919063ffffffff16565b93508160200151841115612a6857816020015193505b505050919050565b6000612a7e82600001612c0e565b9050919050565b6000612a948360000183612c1f565b60001c905092915050565b6000806000612aae8686612c4a565b9150915060008480612ac357612ac2613be4565b5b868809905082811115612ae057600182612add9190613d0a565b91505b8083612aec9190613d0a565b9250848210612b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2790613e94565b60405180910390fd5b612b3b838387612cbf565b93505050509392505050565b6000612ba9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e729092919063ffffffff16565b9050600081511115612c095780806020019051810190612bc99190613712565b612c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bff90613f26565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000826000018281548110612c3757612c36613f46565b5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80612c7e57612c7d613be4565b5b84860990508385612c8f9190613cb0565b92508281612c9d9190613d0a565b915082811015612cb757600182612cb49190613d0a565b91505b509250929050565b60008060018319612cd09190613d9e565b831690508083612ce09190613c13565b92508085612cee9190613c13565b945060018160018319612d019190613d9e565b612d0b9190613c13565b612d159190613d9e565b84612d209190613cb0565b85612d2b9190613d9e565b94506000600190508084612d3f9190613cb0565b6002612d4b9190613d0a565b81612d569190613cb0565b90508084612d649190613cb0565b6002612d709190613d0a565b81612d7b9190613cb0565b90508084612d899190613cb0565b6002612d959190613d0a565b81612da09190613cb0565b90508084612dae9190613cb0565b6002612dba9190613d0a565b81612dc59190613cb0565b90508084612dd39190613cb0565b6002612ddf9190613d0a565b81612dea9190613cb0565b90508084612df89190613cb0565b6002612e049190613d0a565b81612e0f9190613cb0565b90508084612e1d9190613cb0565b6002612e299190613d0a565b81612e349190613cb0565b90508084612e429190613cb0565b6002612e4e9190613d0a565b81612e599190613cb0565b90508086612e679190613cb0565b925050509392505050565b6060612e818484600085612e8a565b90509392505050565b606082471015612ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec690613fe7565b60405180910390fd5b612ed885612f9e565b612f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0e90614053565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612f4091906140ed565b60006040518083038185875af1925050503d8060008114612f7d576040519150601f19603f3d011682016040523d82523d6000602084013e612f82565b606091505b5091509150612f92828286612fb1565b92505050949350505050565b600080823b905060008111915050919050565b60608315612fc157829050613011565b600083511115612fd45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130089190614159565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b6130c8816130b5565b81146130d357600080fd5b50565b6000813590506130e5816130bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613116826130eb565b9050919050565b6131268161310b565b811461313157600080fd5b50565b6000813590506131438161311d565b92915050565b600080604083850312156131605761315f6130b0565b5b600061316e858286016130d6565b925050602061317f85828601613134565b9150509250929050565b613192816130b5565b82525050565b60006020820190506131ad6000830184613189565b92915050565b6000602082840312156131c9576131c86130b0565b5b60006131d784828501613134565b91505092915050565b600080604083850312156131f7576131f66130b0565b5b600061320585828601613134565b925050602061321685828601613134565b9150509250929050565b6000806000806080858703121561323a576132396130b0565b5b6000613248878288016130d6565b9450506020613259878288016130d6565b935050604061326a87828801613134565b925050606061327b87828801613134565b91505092959194509250565b613290816130b5565b82525050565b6080820160008201516132ac6000850182613287565b5060208201516132bf6020850182613287565b5060408201516132d26040850182613287565b5060608201516132e56060850182613287565b50505050565b60006080820190506133006000830184613296565b92915050565b6000819050919050565b61331981613306565b82525050565b60006020820190506133346000830184613310565b92915050565b60008115159050919050565b61334f8161333a565b82525050565b60e08201600082015161336b6000850182613287565b50602082015161337e6020850182613287565b5060408201516133916040850182613287565b5060608201516133a46060850182613287565b5060808201516133b76080850182613287565b5060a08201516133ca60a0850182613287565b5060c08201516133dd60c0850182613346565b50505050565b600060e0820190506133f86000830184613355565b92915050565b6134078161310b565b82525050565b600060208201905061342260008301846133fe565b92915050565b600081519050613437816130bf565b92915050565b600060208284031215613453576134526130b0565b5b600061346184828501613428565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b60006134b1600f8361346a565b91506134bc8261347b565b602082019050919050565b600060208201905081810360008301526134e0816134a4565b9050919050565b7f4d61782063617061636974792072656163686564000000000000000000000000600082015250565b600061351d60148361346a565b9150613528826134e7565b602082019050919050565b6000602082019050818103600083015261354c81613510565b9050919050565b7f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008201527f6963650000000000000000000000000000000000000000000000000000000000602082015250565b60006135af60238361346a565b91506135ba82613553565b604082019050919050565b600060208201905081810360008301526135de816135a2565b9050919050565b60006040820190506135fa60008301856133fe565b6136076020830184613189565b9392505050565b7f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000600082015250565b6000613644600e8361346a565b915061364f8261360e565b602082019050919050565b6000602082019050818103600083015261367381613637565b9050919050565b7f426f6e6420746f6f206c61726765000000000000000000000000000000000000600082015250565b60006136b0600e8361346a565b91506136bb8261367a565b602082019050919050565b600060208201905081810360008301526136df816136a3565b9050919050565b6136ef8161333a565b81146136fa57600080fd5b50565b60008151905061370c816136e6565b92915050565b600060208284031215613728576137276130b0565b5b6000613736848285016136fd565b91505092915050565b60006060820190506137546000830186613189565b61376160208301856133fe565b61376e6040830184613189565b949350505050565b600069ffffffffffffffffffff82169050919050565b61379581613776565b81146137a057600080fd5b50565b6000815190506137b28161378c565b92915050565b6137c181613306565b81146137cc57600080fd5b50565b6000815190506137de816137b8565b92915050565b600080600080600060a08688031215613800576137ff6130b0565b5b600061380e888289016137a3565b955050602061381f888289016137cf565b945050604061383088828901613428565b935050606061384188828901613428565b9250506080613852888289016137a3565b9150509295509295909350565b6000819050919050565b6000819050919050565b600061388e6138896138848461385f565b613869565b6130b5565b9050919050565b61389e81613873565b82525050565b60006040820190506138b96000830185613189565b6138c66020830184613895565b9392505050565b60006040820190506138e26000830185613189565b6138ef6020830184613189565b9392505050565b600060ff82169050919050565b61390c816138f6565b811461391757600080fd5b50565b60008151905061392981613903565b92915050565b600060208284031215613945576139446130b0565b5b60006139538482850161391a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156139e2578086048111156139be576139bd61395c565b5b60018516156139cd5780820291505b80810290506139db8561398b565b94506139a2565b94509492505050565b6000826139fb5760019050613ab7565b81613a095760009050613ab7565b8160018114613a1f5760028114613a2957613a58565b6001915050613ab7565b60ff841115613a3b57613a3a61395c565b5b8360020a915084821115613a5257613a5161395c565b5b50613ab7565b5060208310610133831016604e8410600b8410161715613a8d5782820a905083811115613a8857613a8761395c565b5b613ab7565b613a9a8484846001613998565b92509050818404811115613ab157613ab061395c565b5b81810290505b9392505050565b6000613ac9826130b5565b9150613ad4836138f6565b9250613b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139eb565b905092915050565b6000613b14826130b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b4757613b4661395c565b5b600182019050919050565b7f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260008201527f79207a65726f0000000000000000000000000000000000000000000000000000602082015250565b6000613bae60268361346a565b9150613bb982613b52565b604082019050919050565b60006020820190508181036000830152613bdd81613ba1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c1e826130b5565b9150613c29836130b5565b925082613c3957613c38613be4565b5b828204905092915050565b7f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000600082015250565b6000613c7a601e8361346a565b9150613c8582613c44565b602082019050919050565b60006020820190508181036000830152613ca981613c6d565b9050919050565b6000613cbb826130b5565b9150613cc6836130b5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613cff57613cfe61395c565b5b828202905092915050565b6000613d15826130b5565b9150613d20836130b5565b925082821015613d3357613d3261395c565b5b828203905092915050565b6000606082019050613d5360008301866133fe565b613d6060208301856133fe565b613d6d6040830184613189565b949350505050565b6000604082019050613d8a6000830185613189565b613d9760208301846133fe565b9392505050565b6000613da9826130b5565b9150613db4836130b5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613de957613de861395c565b5b828201905092915050565b613dfd8161333a565b82525050565b6000608082019050613e186000830187613189565b613e256020830186613189565b613e326040830185613189565b613e3f6060830184613df4565b95945050505050565b7f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000600082015250565b6000613e7e601a8361346a565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613f10602a8361346a565b9150613f1b82613eb4565b604082019050919050565b60006020820190508181036000830152613f3f81613f03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613fd160268361346a565b9150613fdc82613f75565b604082019050919050565b6000602082019050818103600083015261400081613fc4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061403d601d8361346a565b915061404882614007565b602082019050919050565b6000602082019050818103600083015261406c81614030565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156140a757808201518184015260208101905061408c565b838111156140b6576000848401525b50505050565b60006140c782614073565b6140d1818561407e565b93506140e1818560208601614089565b80840191505092915050565b60006140f982846140bc565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061412b82614104565b614135818561346a565b9350614145818560208601614089565b61414e8161410f565b840191505092915050565b600060208201905081810360008301526141738184614120565b90509291505056fea2646970667358221220b25d4db64d555a4b7747a3b9bb395ae0cf705cdcb494aec5a3c770f23fa29ad664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay(address)": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio(address)": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "maxPayout(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256,address)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "redeem(address,address)": {
        "params": {
          "_principle": "address",
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "standardizedDebtRatio(address)": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetPrice(address)": {
        "notice": "get asset price from chainlink"
      },
      "bondPrice(address)": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD(address)": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt(address)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(address)": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio(address)": {
        "notice": "calculate current ratio of debt to Necc supply"
      },
      "deposit(uint256,uint256,address,address)": {
        "notice": "deposit bond"
      },
      "maxPayout(address)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256,address)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address,address)": {
        "notice": "calculate amount of Necc available for claim by depositor"
      },
      "percentVestedFor(address,address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address,address)": {
        "notice": "redeem bond for user"
      },
      "standardizedDebtRatio(address)": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3298,
        "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)4783_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)4637_storage)dyn_storage": {
        "base": "t_struct(Info)4637_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)4632_storage)dyn_storage": {
        "base": "t_struct(Payout)4632_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)4668_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)4668_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)4695_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)4695_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)4632_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)4632_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)4668_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)4668_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)4677_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)4677_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)4644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)4644_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)4659_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)4659_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1222_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1221,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)921_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)4668_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 4661,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4663,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4665,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4667,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)4677_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 4670,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4672,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4674,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4676,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)4695_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 4688,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4690,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4692,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4694,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)4644_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 4639,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4641,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4643,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)4686_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 4679,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4681,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4683,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4685,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)4637_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 4634,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4636,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)4632_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 4629,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4631,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)921_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 916,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 920,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)4783_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 4697,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4699,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4701,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4703,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4705,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4707,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4709,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 4711,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 4714,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1222_storage"
          },
          {
            "astId": 4719,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)4659_storage)"
          },
          {
            "astId": 4724,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)4677_storage)"
          },
          {
            "astId": 4731,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)4668_storage))"
          },
          {
            "astId": 4735,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4739,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4743,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4747,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4751,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)4637_storage)dyn_storage"
          },
          {
            "astId": 4756,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)4644_storage)"
          },
          {
            "astId": 4759,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)4686_storage"
          },
          {
            "astId": 4761,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4763,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 4765,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 4767,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 4772,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)4695_storage)"
          },
          {
            "astId": 4774,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 4780,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)4632_storage)dyn_storage)"
          },
          {
            "astId": 4782,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)4659_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 4646,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4648,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4650,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4652,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4654,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4656,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4658,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}