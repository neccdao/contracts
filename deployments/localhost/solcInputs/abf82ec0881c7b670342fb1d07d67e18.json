{
  "language": "Solidity",
  "sources": {
    "contracts/amm/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\ninterface IUniswapV2ERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/facets/Treasury/BondingCalculatorFacet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Facet.sol\";\nimport \"../../lib/FixedPoint.sol\";\nimport \"../../amm/interfaces/IUniswapV2Pair.sol\";\nimport \"../../amm/interfaces/IUniswapV2ERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 b = add(div(a, 2), 1);\n            while (b < c) {\n                c = b;\n                b = div(add(div(a, b), b), 2);\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n\ncontract BondingCalculatorFacet is Facet {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n    using SafeMath for uint112;\n\n    function getKValue(address _pair) public view returns (uint256 k_) {\n        uint256 token0 = IERC20Metadata(IUniswapV2Pair(_pair).token0())\n            .decimals();\n        uint256 token1 = IERC20Metadata(IUniswapV2Pair(_pair).token1())\n            .decimals();\n        uint256 decimals = token0.add(token1).sub(\n            IERC20Metadata(_pair).decimals()\n        );\n\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\n            .getReserves();\n        k_ = reserve0.mul(reserve1).div(10**decimals);\n    }\n\n    function getTotalValue(address _pair) public view returns (uint256 _value) {\n        _value = getKValue(_pair).sqrrt().mul(2);\n    }\n\n    function valuation(address _pair, uint256 amount_)\n        external\n        view\n        returns (uint256 _value)\n    {\n        uint256 totalValue = getTotalValue(_pair);\n        uint256 totalSupply = IUniswapV2Pair(_pair).totalSupply();\n\n        _value = totalValue\n            .mul(FixedPoint.fraction(amount_, totalSupply).decode112with18())\n            .div(1e18);\n    }\n\n    function markdown(address _pair) external view returns (uint256) {\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\n            .getReserves();\n\n        uint256 reserve;\n        if (IUniswapV2Pair(_pair).token0() == address(s.Necc)) {\n            reserve = reserve1;\n        } else {\n            reserve = reserve0;\n        }\n        return\n            reserve\n                .mul(2 * (10**IERC20Metadata(address(s.Necc)).decimals()))\n                .div(getTotalValue(_pair));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/facets/Treasury/Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"../../lib/LibTreasuryStorage.sol\";\nimport \"../../lib/LibDiamond.sol\";\n\ncontract Facet {\n    LibTreasuryStorage.Storage internal s;\n\n    function onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n}\n"
    },
    "contracts/lib/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"./FullMath.sol\";\n\nlibrary Babylonian {\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\nlibrary BitMath {\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, \"BitMath::mostSignificantBit: zero\");\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n}\n\nlibrary FixedPoint {\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 =\n        0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return uint256(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        require(denominator > 0, \"FixedPoint::fraction: division by zero\");\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= type(uint144).max) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(\n                result <= type(uint224).max,\n                \"FixedPoint::fraction: overflow\"\n            );\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(\n                result <= type(uint224).max,\n                \"FixedPoint::fraction: overflow\"\n            );\n            return uq112x112(uint224(result));\n        }\n    }\n\n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        if (self._x <= type(uint144).max) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return\n            uq112x112(\n                uint224(\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\n                        ((112 - safeShiftBits) / 2)\n                )\n            );\n    }\n}\n"
    },
    "contracts/amm/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/lib/LibTreasuryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n// import \"hardhat/console.sol\";\n\nlibrary LibTreasuryStorage {\n    bytes32 constant STORAGE_POSITION = keccak256(\"necc.dao.treasury.storage\");\n\n    // Single global store\n    struct Storage {\n        // TODO: Refactor arrays to EnumerableSet\n        // Treasury\n        address Necc;\n        uint256 blocksNeededForQueue;\n        address[] reserveTokens; // Push only, beware false-positives.\n        address sNecc;\n        uint256 sNeccQueue; // Delays change to sNecc address\n        uint256 totalReserves; // Risk-free value of all assets\n        uint256 totalDebt;\n        mapping(address => bool) isReserveToken;\n        mapping(address => uint256) reserveTokenQueue; // Delays changes to mapping.\n        address[] reserveDepositors; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isReserveDepositor;\n        mapping(address => uint256) reserveDepositorQueue; // Delays changes to mapping.\n        address[] reserveSpenders; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isReserveSpender;\n        mapping(address => uint256) reserveSpenderQueue; // Delays changes to mapping.\n        address[] liquidityTokens; // Push only, beware false-positives.\n        mapping(address => bool) isLiquidityToken;\n        mapping(address => uint256) LiquidityTokenQueue; // Delays changes to mapping.\n        address[] liquidityDepositors; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isLiquidityDepositor;\n        mapping(address => uint256) LiquidityDepositorQueue; // Delays changes to mapping.\n        address[] reserveManagers; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isReserveManager;\n        mapping(address => uint256) ReserveManagerQueue; // Delays changes to mapping.\n        address[] liquidityManagers; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isLiquidityManager;\n        mapping(address => uint256) LiquidityManagerQueue; // Delays changes to mapping.\n        address[] debtors; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isDebtor;\n        mapping(address => uint256) debtorQueue; // Delays changes to mapping.\n        mapping(address => uint256) debtorBalance;\n        address[] rewardManagers; // Push only, beware false-positives. Only for viewing.\n        mapping(address => bool) isRewardManager;\n        mapping(address => uint256) rewardManagerQueue; // Delays changes to mapping.\n        // Always add new storage variable to the end of this struct\n    }\n}\n"
    },
    "contracts/lib/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nlibrary LibDiamond {\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(\n            msg.sender == diamondStorage().contractOwner,\n            \"LibDiamond: invalid contract owner\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/lib/FullMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y)\n        private\n        pure\n        returns (uint256 l, uint256 h)\n    {\n        uint256 mm = mulmod(x, y, type(uint256).max);\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & (~d + 1);\n        d /= pow2;\n        l /= pow2;\n        l += h * ((~pow2 + 1) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n        require(h < d, \"FullMath::mulDiv: overflow\");\n        return fullDiv(l, h, d);\n    }\n}\n"
    },
    "contracts/facets/Bond/BondDepositoryFacet.sol": {
      "content": "pragma abicoder v2;\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../lib/FixedPoint.sol\";\nimport \"../../lib/FullMath.sol\";\nimport \"../../lib/LibBondStorage.sol\";\nimport \"./BondDepositoryLib.sol\";\nimport \"./Facet.sol\";\n\n// Chainlink price feed\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface ITreasury {\n    function mintRewards(address _recipient, uint256 _amount) external;\n\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256 send_);\n\n    function valueOfToken(address _token, uint256 _amount)\n        external\n        view\n        returns (uint256 value_);\n}\n\ninterface IBondCalculator {\n    function valuation(address _LP, uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function markdown(address _LP) external view returns (uint256);\n}\n\ninterface IStaking {\n    function stake(uint256 _amount, address _recipient) external returns (bool);\n}\n\ninterface IERC20Decimals {\n    function decimals() external view returns (uint8);\n}\n\ncontract BondDepositoryFacet is Facet {\n    using FixedPoint for *;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using BondDepositoryLib for LibBondStorage.Storage;\n\n    /* ======== EVENTS ======== */\n\n    event BondCreated(\n        uint256 deposit,\n        uint256 indexed payout,\n        uint256 indexed expires,\n        uint256 indexed priceInUSD\n    );\n    event BondRedeemed(\n        address indexed recipient,\n        uint256 payout,\n        uint256 remaining\n    );\n    event BondPriceChanged(\n        uint256 indexed priceInUSD,\n        uint256 indexed internalPrice,\n        uint256 indexed debtRatio\n    );\n    event ControlVariableAdjustment(\n        uint256 initialBCV,\n        uint256 newBCV,\n        uint256 adjustment,\n        bool addition\n    );\n\n    /* ======== USER FUNCTIONS ======== */\n\n    /**\n     *  @notice deposit bond\n     *  @param _amount uint\n     *  @param _maxPrice uint\n     *  @param _depositor address\n     *  @return uint\n     */\n    function deposit(\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor,\n        address _principle\n    ) external returns (uint256) {\n        require(_depositor != address(0), \"Invalid address\");\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        decayDebt(_principle);\n        require(\n            s.totalDebt[_principleIndex] <= s.terms[_principleIndex].maxDebt,\n            \"Max capacity reached\"\n        );\n\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\n        uint256 nativePrice = _bondPrice(_principle);\n\n        require(\n            _maxPrice >= nativePrice,\n            \"Slippage limit: more than max price\"\n        ); // slippage protection\n\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\n        require(payout >= 10000000, \"Bond too small\"); // must be > 0.01 Necc ( underflow protection )\n        require(payout <= maxPayout(_principle), \"Bond too large\"); // size protection because there is no slippage\n        // profits are calculated\n        uint256 fee = payout.mul(s.terms[_principleIndex].fee).div(10000);\n        uint256 profit = value.sub(payout);\n        if (profit > 0) {\n            profit = profit.sub(fee);\n            /**\n            principle is transferred in\n            approved and\n            deposited into the treasury, returning (_amount - profit) Necc\n         */\n            if (s.terms[_principleIndex].isLiquidityBond) {\n                IERC20(_principle).safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    _amount\n                );\n                IERC20(_principle).approve(address(s.treasury), _amount);\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\n            } else if (_principle == s.ndol) {\n                IERC20(_principle).safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    _amount\n                );\n                IERC20(_principle).approve(address(s.treasury), _amount);\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\n            } else {\n                /**\n            asset carries risk and is not minted against\n            asset transfered to treasury and rewards minted as payout\n         */\n                IERC20(_principle).safeTransferFrom(\n                    msg.sender,\n                    s.treasury,\n                    _amount\n                );\n                ITreasury(s.treasury).mintRewards(address(this), profit);\n            }\n\n            if (fee != 0) {\n                // fee is transferred to dao\n                if (s.DAO != address(0)) {\n                    IERC20(s.Necc).safeTransfer(s.DAO, fee);\n                }\n                if (s.farmDistributor != address(0)) {\n                    IERC20(s.Necc).safeTransfer(\n                        s.farmDistributor,\n                        payout.mul(100).div(10000) // 1% farm distributor fee for minters\n                    );\n                }\n            }\n        }\n\n        // total debt is increased\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\n\n        // depositor info is stored\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\n            vesting: s.terms[_principleIndex].vestingTerm,\n            lastTime: uint256(block.timestamp),\n            pricePaid: priceInUSD\n        });\n\n        // indexed events are emitted\n        emit BondCreated(\n            _amount,\n            payout,\n            block.timestamp.add(s.terms[_principleIndex].vestingTerm),\n            priceInUSD\n        );\n        emit BondPriceChanged(\n            bondPriceInUSD(_principle),\n            _bondPrice(_principle),\n            debtRatio(_principle)\n        );\n\n        adjust(_principle); // control variable is adjusted\n        return payout;\n    }\n\n    /**\n     *  @notice redeem bond for user\n     *  @param _recipient address\n     *  @param _stake bool\n     *  @return uint\n     */\n    function redeem(\n        address _recipient,\n        address _principle,\n        bool _stake\n    ) external returns (uint256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\n            _principleIndex\n        ];\n        // (seconds since last interaction / vesting term remaining)\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\n\n        if (percentVested >= 10000) {\n            // if fully vested\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\n            return stakeOrSend(_recipient, _stake, info.payout, _principle); // pay user everything due\n        } else {\n            // if unfinished\n            // calculate payout vested\n            uint256 payout = info.payout.mul(percentVested).div(10000);\n            // store updated deposit info\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\n                payout: info.payout.sub(payout),\n                vesting: info.vesting.sub(\n                    uint256(block.timestamp).sub(info.lastTime)\n                ),\n                lastTime: uint256(block.timestamp),\n                pricePaid: info.pricePaid\n            });\n\n            emit BondRedeemed(\n                _recipient,\n                payout,\n                s.bondInfo[_recipient][_principleIndex].payout\n            );\n            return stakeOrSend(_recipient, _stake, payout, _principle);\n        }\n    }\n\n    /**\n     *  @notice reduce total debt\n     */\n    function decayDebt(address _principle) internal {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\n            debtDecay(_principle)\n        );\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     *  @notice determine maximum bond size\n     *  @return uint\n     */\n    function maxPayout(address _principle) public view returns (uint256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return\n            IERC20(s.Necc)\n                .totalSupply()\n                .mul(s.terms[_principleIndex].maxPayout)\n                .div(100000);\n    }\n\n    /**\n     *  @notice calculate interest due for new bond\n     *  @param _value uint\n     *  @return uint\n     */\n    function payoutFor(uint256 _value, address _principle)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            return\n                FixedPoint\n                    .fraction(_value, bondPrice(_principle))\n                    .decode112with18()\n                    .div(1e16);\n        } else if (_principle == s.ndol) {\n            return\n                FixedPoint\n                    .fraction(_value, bondPrice(_principle))\n                    .decode112with18()\n                    .div(1e16);\n        } else {\n            // Reserve token like WETH\n            return\n                FixedPoint\n                    .fraction(_value, bondPrice(_principle))\n                    .decode112with18()\n                    .div(1e14);\n        }\n    }\n\n    /**\n     *  @notice calculate current bond premium\n     *  @return price_ uint\n     */\n    function bondPrice(address _principle)\n        public\n        view\n        returns (uint256 price_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else if (_principle == s.ndol) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .div(1e5);\n        }\n\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\n            price_ = s.terms[_principleIndex].minimumPrice;\n        }\n    }\n\n    /**\n     *  @notice calculate current bond price and remove floor if above\n     *  @return price_ uint\n     */\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else if (_principle == s.ndol) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .div(1e5);\n        }\n\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\n            price_ = s.terms[_principleIndex].minimumPrice;\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\n            s.terms[_principleIndex].minimumPrice = 0;\n        }\n    }\n\n    /**\n     *  @notice converts bond price to DAI value\n     *  @return price_ uint\n     */\n    function bondPriceInUSD(address _principle)\n        public\n        view\n        returns (uint256 price_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = bondPrice(_principle)\n                .mul(IBondCalculator(address(this)).markdown(_principle))\n                .div(100);\n        } else {\n            if (_principle == s.ndol) {\n                price_ = bondPrice(_principle)\n                    .mul(10**IERC20Decimals(_principle).decimals())\n                    .div(100);\n            } else {\n                price_ = bondPrice(_principle)\n                    .mul(uint256(assetPrice(_principle)))\n                    .mul(1e6);\n            }\n        }\n    }\n\n    /**\n     *  @notice calculate current ratio of debt to Necc supply\n     *  @return debtRatio_ uint\n     */\n    function debtRatio(address _principle)\n        public\n        view\n        returns (uint256 debtRatio_)\n    {\n        uint256 supply = IERC20(s.Necc).totalSupply();\n        debtRatio_ = FixedPoint\n            .fraction(currentDebt(_principle).mul(1e9), supply)\n            .decode112with18()\n            .div(1e18);\n    }\n\n    /**\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\n     *  @return uint\n     */\n    function standardizedDebtRatio(address _principle)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            return\n                debtRatio(_principle)\n                    .mul(IBondCalculator(address(this)).markdown(_principle))\n                    .div(1e9);\n        } else {\n            if (_principle == s.ndol) {\n                return debtRatio(_principle);\n            } else {\n                return\n                    debtRatio(_principle)\n                        .mul(uint256(assetPrice(_principle)))\n                        .div(IOracle(s.priceFeeds[_principleIndex]).decimals());\n                // ETH Feed is 8 decimals\n            }\n        }\n    }\n\n    /**\n     *  @notice calculate debt factoring in decay\n     *  @return uint\n     */\n    function currentDebt(address _principle) public view returns (uint256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\n    }\n\n    /**\n     *  @notice amount to decay total debt by\n     *  @return decay_ uint\n     */\n    function debtDecay(address _principle)\n        public\n        view\n        returns (uint256 decay_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\n            s.lastDecay[_principleIndex]\n        );\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\n            s.terms[_principleIndex].vestingTerm\n        );\n        if (decay_ > s.totalDebt[_principleIndex]) {\n            decay_ = s.totalDebt[_principleIndex];\n        }\n    }\n\n    /**\n     *  @notice calculate how far into vesting a depositor is\n     *  @param _depositor address\n     *  @return percentVested_ uint\n     */\n    function percentVestedFor(address _depositor, address _principle)\n        public\n        view\n        returns (uint256 percentVested_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\n            _principleIndex\n        ];\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\n        uint256 vesting = bond.vesting;\n\n        if (vesting > 0) {\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\n        } else {\n            percentVested_ = 0;\n        }\n    }\n\n    /**\n     *  @notice calculate amount of Necc available for claim by depositor\n     *  @param _depositor address\n     *  @return pendingPayout_ uint\n     */\n    function pendingPayoutFor(address _depositor, address _principle)\n        external\n        view\n        returns (uint256 pendingPayout_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\n\n        if (percentVested >= 10000) {\n            pendingPayout_ = payout;\n        } else {\n            pendingPayout_ = payout.mul(percentVested).div(10000);\n        }\n    }\n\n    /**\n     *  @notice allow user to stake payout automatically\n     *  @param _stake bool\n     *  @param _amount uint\n     *  @return uint\n     */\n    function stakeOrSend(\n        address _recipient,\n        bool _stake,\n        uint256 _amount,\n        address\n    ) internal returns (uint256) {\n        if (!_stake) {\n            // if user does not want to stake\n            IERC20(s.Necc).transfer(_recipient, _amount); // send payout\n        } else {\n            // if user wants to stake\n            IERC20(s.Necc).approve(address(this), _amount);\n            IStaking(address(this)).stake(_amount, _recipient);\n        }\n\n        return _amount;\n    }\n\n    /**\n     *  @notice makes incremental adjustment to control variable\n     */\n    function adjust(address _principle) internal {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\n\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\n            uint256 initial = _bondTerms.controlVariable;\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\n            uint256 change = changeBy(_principle);\n\n            if (adjustment.delta >= change) {\n                adjustment.delta = adjustment.delta.sub(change);\n            } else {\n                adjustment.delta = 0;\n            }\n            if (adjustment.timeToTarget >= timeSinceLast) {\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\n                    timeSinceLast\n                );\n            } else {\n                adjustment.timeToTarget = 0;\n            }\n\n            if (adjustment.add) {\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\n                    change\n                );\n            } else {\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\n                    change\n                );\n            }\n\n            adjustment.lastTime = block.timestamp;\n\n            emit ControlVariableAdjustment(\n                initial,\n                _bondTerms.controlVariable,\n                change,\n                adjustment.add\n            );\n        }\n    }\n\n    function changeBy(address _principle)\n        internal\n        view\n        returns (uint256 changeBy_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\n\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\n            adjustment.timeToTarget\n        );\n\n        if (changeBy_ > adjustment.delta) {\n            changeBy_ = adjustment.delta;\n        }\n    }\n\n    function bondInfo(address _depositor, address _principle)\n        public\n        view\n        returns (LibBondStorage.Bond memory)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.bondInfo[_depositor][_principleIndex];\n    }\n\n    function BCV(address _principle) public view returns (uint256 BCV_) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n\n        uint256 change = changeBy(_principle);\n\n        if (_bondAdjustment.add) {\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\n        } else {\n            if (s.terms[_principleIndex].controlVariable > change) {\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\n            } else {\n                BCV_ = 1;\n            }\n        }\n    }\n\n    /**\n     *  @notice get asset price from chainlink\n     */\n    function assetPrice(address _principle) public view returns (int256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        (, int256 price, , , ) = IOracle(s.priceFeeds[_principleIndex])\n            .latestRoundData();\n\n        return price;\n    }\n\n    function terms(address _principle)\n        public\n        view\n        returns (LibBondStorage.Terms memory)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.terms[_principleIndex];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/lib/LibBondStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nenum PARAMETER {\n    VESTING,\n    PAYOUT,\n    FEE,\n    DEBT,\n    MINPRICE\n}\n\nenum CONTRACTS {\n    DISTRIBUTOR,\n    WARMUP,\n    LOCKER\n}\n\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\n\nlibrary LibBondStorage {\n    bytes32 constant STORAGE_POSITION = keccak256(\"necc.dao.bond.storage\");\n\n    struct Payout {\n        uint256 amount; // Necc paid\n        uint256 blockTimestamp; // block number occurred\n    }\n\n    struct Info {\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n\n    struct DistributorAdjustment {\n        bool add;\n        uint256 rate;\n        uint256 target;\n    }\n\n    struct Terms {\n        uint256 controlVariable; // scaling variable for price\n        uint256 minimumPrice; // vs principle value\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\n        uint256 vestingTerm; // in seconds\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\n    }\n\n    // Info for bond holder\n    struct Bond {\n        uint256 payout; // Necc remaining to be paid\n        uint256 pricePaid; // In DAI, for front end viewing\n        uint256 lastTime; // Last interaction\n        uint256 vesting; // Seconds left to vest\n    }\n\n    // Info for incremental adjustments to control variable\n    struct BondDepositoryAdjustment {\n        bool add; // addition or subtraction\n        uint256 delta; // increment\n        uint256 timeToTarget; // seconds till target\n        uint256 lastTime; // time when last adjustment made\n    }\n    struct Epoch {\n        uint256 number;\n        uint256 distribute;\n        uint256 length;\n        uint256 endTime;\n    }\n\n    struct Claim {\n        uint256 deposit;\n        uint256 gons;\n        uint256 expiry;\n        bool lock; // prevents malicious delays\n    }\n\n    // Single global store\n    struct Storage {\n        address Necc; // token given as payment for bond\n        address sNecc; // token given for staking\n        address nNecc; // wrapped staked token\n        address ndol; // principle token without price feed\n        address treasury; // mints Necc when receives principle\n        address DAO; // receives profit share from bond\n        address farmDistributor; // receives profit share from bond to distribute to minters\n        address staking; // to auto-stake payout\n        //\n        EnumerableSet.AddressSet principles;\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\n        //\n        Info[] info; // stores infof or distribution recipients\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\n        //\n        Epoch epoch;\n        uint256 epochLength;\n        address distributor;\n        address locker;\n        uint256 totalBonus;\n        uint256 warmupPeriod;\n        mapping(address => Claim) warmupInfo;\n        //\n        uint256 targetSum; // target total Necc as payouts during period\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\n        uint256 gonsInWarmup; // total gons in warmup period\n        //\n        // Always add new storage variable to the end of this struct\n    }\n}\n"
    },
    "contracts/facets/Bond/BondDepositoryLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\nimport \"../../lib/LibBondStorage.sol\";\n\nlibrary BondDepositoryLib {\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\n        internal\n        view\n        returns (uint256 _index)\n    {\n        uint256 _principleLength = EnumerableSet.length(s.principles);\n        for (uint256 i = 0; i < _principleLength; i++) {\n            if (EnumerableSet.at(s.principles, i) == _principle) {\n                return i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/facets/Bond/Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"../../lib/LibBondStorage.sol\";\nimport \"../../lib/LibDiamond.sol\";\n\ncontract Facet {\n    LibBondStorage.Storage internal s;\n\n    function onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n}\n"
    },
    "contracts/facets/Bond/StakingFacet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma abicoder v2;\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../lib/LibBondStorage.sol\";\nimport \"./Facet.sol\";\n\ninterface IDistributor {\n    function distribute() external returns (uint256);\n}\n\ninterface InNecc is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n\n    function migrate(address _staking, address _sOHM) external;\n}\n\ninterface IsNecc is IERC20 {\n    function rebase(uint256 neccProfit_, uint256 epoch_)\n        external\n        returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view override returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n}\n\ncontract StakingFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IsNecc;\n\n    /**\n        @notice stake Necc to enter warmup\n        @param _amount uint\n        @return bool\n     */\n    function stake(uint256 _amount, address _recipient)\n        external\n        returns (bool)\n    {\n        rebase();\n\n        IERC20(s.Necc).safeTransferFrom(msg.sender, address(this), _amount);\n\n        if (s.warmupPeriod == 0) {\n            _send(_recipient, _amount);\n        } else {\n            LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\n            require(!info.lock, \"Deposits for account are locked\");\n\n            s.warmupInfo[_recipient] = LibBondStorage.Claim({\n                deposit: info.deposit.add(_amount),\n                gons: info.gons.add(IsNecc(s.sNecc).gonsForBalance(_amount)),\n                expiry: s.epoch.number.add(s.warmupPeriod),\n                lock: false\n            });\n\n            s.gonsInWarmup = s.gonsInWarmup.add(\n                IsNecc(s.sNecc).gonsForBalance(_amount)\n            );\n        }\n        return true;\n    }\n\n    /**\n        @notice retrieve sNecc from warmup\n        @param _recipient address\n     */\n    function claim(address _recipient) public {\n        LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\n        if (!info.lock) {\n            require(\n                _recipient == msg.sender,\n                \"External claims for account are locked\"\n            );\n        }\n\n        if (s.epoch.number >= info.expiry && info.expiry != 0) {\n            delete s.warmupInfo[_recipient];\n            s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\n\n            _send(_recipient, IsNecc(s.sNecc).balanceForGons(info.gons));\n        }\n    }\n\n    /**\n        @notice forfeit sNecc in warmup and retrieve Necc\n     */\n    function forfeit() external {\n        LibBondStorage.Claim memory info = s.warmupInfo[msg.sender];\n        delete s.warmupInfo[msg.sender];\n        s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\n\n        IERC20(s.Necc).safeTransfer(msg.sender, info.deposit);\n    }\n\n    /**\n        @notice redeem sNecc for Necc\n        @param _amount uint\n        @param _trigger bool\n     */\n    function unstake(uint256 _amount, bool _trigger) external {\n        if (_trigger) {\n            rebase();\n        }\n\n        InNecc(s.nNecc).burn(msg.sender, _amount); // amount was given in nNecc terms\n        IERC20(s.Necc).safeTransfer(\n            msg.sender,\n            InNecc(s.nNecc).balanceFrom(_amount)\n        );\n    }\n\n    /**\n     * @notice send staker their amount as nNecc (non-rebasing)\n     * @param _recipient address\n     * @param _amount uint\n     */\n    function _send(address _recipient, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        InNecc(s.nNecc).mint(_recipient, InNecc(s.nNecc).balanceTo(_amount)); // send as nNecc (convert units from Necc)\n        return InNecc(s.nNecc).balanceTo(_amount);\n    }\n\n    /**\n        @notice returns the sNecc index, which tracks rebase growth\n        @return uint\n     */\n    function index() public view returns (uint256) {\n        return IsNecc(s.sNecc).index();\n    }\n\n    /**\n        @notice trigger rebase if epoch over\n     */\n    function rebase() public {\n        if (s.epoch.endTime <= uint256(block.timestamp)) {\n            IsNecc(s.sNecc).rebase(s.epoch.distribute, s.epoch.number);\n\n            s.epoch.endTime = s.epoch.endTime.add(s.epoch.length);\n            s.epoch.number++;\n\n            IDistributor(address(this)).distribute();\n\n            if (contractBalance() <= totalStaked()) {\n                s.epoch.distribute = 0;\n            } else {\n                s.epoch.distribute = contractBalance().sub(totalStaked());\n            }\n        }\n    }\n\n    /**\n        @notice returns contract Necc holdings, including bonuses provided\n        @return uint\n     */\n    function contractBalance() public view returns (uint256) {\n        return IERC20(s.Necc).balanceOf(address(this)).add(s.totalBonus);\n    }\n\n    function epoch() public view returns (LibBondStorage.Epoch memory) {\n        return s.epoch;\n    }\n\n    function warmupInfo(address _recipient)\n        public\n        view\n        returns (LibBondStorage.Claim memory)\n    {\n        return s.warmupInfo[_recipient];\n    }\n\n    function supplyInWarmup() public view returns (uint256) {\n        return IsNecc(s.sNecc).balanceForGons(s.gonsInWarmup);\n    }\n\n    function totalStaked() public view returns (uint256) {\n        return IsNecc(s.sNecc).circulatingSupply();\n    }\n}\n"
    },
    "contracts/facets/Bond/DistributorFacet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./Facet.sol\";\nimport \"../../lib/LibBondStorage.sol\";\nimport \"./BondDepositoryLib.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ninterface ITreasury {\n    function mintRewards(address _recipient, uint256 _amount) external;\n}\n\ncontract DistributorFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using BondDepositoryLib for LibBondStorage.Storage;\n\n    /* ====== PUBLIC FUNCTIONS ====== */\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function distribute() external returns (bool) {\n        uint256 _principleLength = EnumerableSet.length(s.principles);\n        bool _success = true;\n        for (\n            uint256 _principleIndex = 0;\n            _principleIndex < _principleLength;\n            _principleIndex++\n        ) {\n            if (s.nextEpochTimestamp[_principleIndex] <= block.timestamp) {\n                s.nextEpochTimestamp[_principleIndex] = s\n                    .nextEpochTimestamp[_principleIndex]\n                    .add(s.epochLength); // set next epoch timestamp\n\n                // distribute rewards to each recipient\n                for (uint256 i = 0; i < s.info.length; i++) {\n                    if (s.info[i].rate > 0) {\n                        ITreasury(s.treasury).mintRewards( // mint and send from treasury\n                            s.info[i].recipient,\n                            nextRewardAt(s.info[i].rate)\n                        );\n                        adjust(i); // check for adjustment\n                    }\n                }\n            } else {\n                _success = false;\n            }\n        }\n\n        return _success;\n    }\n\n    /* ====== INTERNAL FUNCTIONS ====== */\n\n    /**\n        @notice increment reward rate for collector\n     */\n    function adjust(uint256 _index) internal {\n        LibBondStorage.DistributorAdjustment storage distributorAdjustment = s\n            .distributorAdjustments[_index];\n\n        if (distributorAdjustment.rate != 0) {\n            if (distributorAdjustment.add) {\n                // if rate should increase\n                s.info[_index].rate = s.info[_index].rate.add(\n                    distributorAdjustment.rate\n                ); // raise rate\n                if (s.info[_index].rate >= distributorAdjustment.target) {\n                    // if target met\n                    s.distributorAdjustments[_index].rate = 0; // turn off distributorAdjustment\n                }\n            } else {\n                // if rate should decrease\n                s.info[_index].rate = s.info[_index].rate.sub(\n                    distributorAdjustment.rate\n                ); // lower rate\n                if (s.info[_index].rate <= distributorAdjustment.target) {\n                    // if target met\n                    s.distributorAdjustments[_index].rate = 0; // turn off adjustment\n                }\n            }\n        }\n    }\n\n    /* ====== VIEW FUNCTIONS ====== */\n\n    /**\n        @notice view function for next reward at given rate\n        @param _rate uint\n        @return uint\n     */\n    function nextRewardAt(uint256 _rate) public view returns (uint256) {\n        return IERC20(s.Necc).totalSupply().mul(_rate).div(1000000);\n    }\n\n    /**\n        @notice view function for next reward for specified address\n        @param _recipient address\n        @return uint\n     */\n    function nextRewardFor(address _recipient) public view returns (uint256) {\n        uint256 reward;\n        for (uint256 i = 0; i < s.info.length; i++) {\n            if (s.info[i].recipient == _recipient) {\n                reward = nextRewardAt(s.info[i].rate);\n            }\n        }\n        return reward;\n    }\n}\n"
    },
    "contracts/facets/Vault/VaultNdolFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Facet.sol\";\nimport \"./VaultLib.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface INDOL {\n    function mint(address _account, uint256 _amount) external;\n\n    function burn(address _account, uint256 _amount) external;\n}\n\ncontract VaultNdolFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event BuyNDOL(\n        address account,\n        address token,\n        uint256 tokenAmount,\n        uint256 ndolAmount\n    );\n    event SellNDOL(\n        address account,\n        address token,\n        uint256 ndolAmount,\n        uint256 tokenAmount\n    );\n    event Swap(\n        address account,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    function buyNDOL(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        contractEntered();\n        require(s.isInitialized, \"Vault: not initialized\");\n        VaultLib.isTokenWhitelisted(s, _token);\n        uint256 _price = VaultLib.getMinPrice(_token, s.includeAmmPrice);\n\n        uint256 _tokenAmount = VaultLib.transferIn(s, _token);\n        require(_tokenAmount > 0, \"Vault: invalid tokenAmount\");\n\n        VaultLib.updateCumulativeFundingRate(s, _token);\n\n        (, uint256 _amountAfterFees) = VaultLib._collectSwapFees(\n            s,\n            _token,\n            _tokenAmount,\n            true\n        );\n\n        uint256 _ndolAmount = VaultLib.adjustForDecimals(\n            s,\n            _amountAfterFees.mul(_price).div(PRICE_PRECISION),\n            _token,\n            s.ndol\n        );\n\n        require(_ndolAmount > 0, \"Vault: invalid ndolAmount\");\n\n        VaultLib._increasePoolAmount(s, _token, _amountAfterFees);\n        VaultLib._increaseNDOLAmount(s, _token, _ndolAmount);\n\n        emit BuyNDOL(_receiver, _token, _tokenAmount, _ndolAmount);\n\n        INDOL(s.ndol).mint(_receiver, _ndolAmount);\n\n        contractExited();\n\n        return _ndolAmount;\n    }\n\n    function sellNDOL(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        contractEntered();\n        VaultLib.isTokenWhitelisted(s, _token);\n\n        uint256 _ndolAmount = VaultLib.transferIn(s, s.ndol);\n        require(_ndolAmount > 0, \"Vault: invalid ndolAmount\");\n\n        VaultLib.updateCumulativeFundingRate(s, _token);\n\n        uint256 _redemptionAmount = getRedemptionAmount(_token, _ndolAmount);\n        require(_redemptionAmount > 0, \"Vault: invalid redemptionAmount\");\n\n        VaultLib._decreasePoolAmount(s, _token, _redemptionAmount);\n        VaultLib._decreaseNDOLAmount(s, _token, _ndolAmount);\n\n        INDOL(s.ndol).burn(address(this), _ndolAmount);\n\n        // the _transferIn call increased the value of tokenBalances[ndol]\n        // usually decreases in token balances are synced by calling _transferOut\n        // however, for ndol, the tokens are burnt, so updateTokenBalance should\n        // be manually called to record the decrease in tokens\n        VaultLib.updateTokenBalance(s, s.ndol);\n\n        (, uint256 _tokenAmount) = VaultLib._collectSwapFees(\n            s,\n            _token,\n            _redemptionAmount,\n            false\n        );\n        require(_tokenAmount > 0, \"Vault: invalid tokenAmount\");\n\n        emit SellNDOL(_receiver, _token, _ndolAmount, _tokenAmount);\n\n        VaultLib.transferOut(s, _token, _tokenAmount, _receiver);\n\n        contractExited();\n\n        return _tokenAmount;\n    }\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _receiver\n    ) external returns (uint256) {\n        contractEntered();\n        require(s.isInitialized, \"Vault: not initialized\");\n        require(_tokenIn != _tokenOut, \"Vault: invalid tokens\");\n        VaultLib.isTokenWhitelisted(s, _tokenIn);\n        VaultLib.isTokenWhitelisted(s, _tokenOut);\n\n        VaultLib.updateCumulativeFundingRate(s, _tokenIn);\n        VaultLib.updateCumulativeFundingRate(s, _tokenOut);\n\n        uint256 amountIn = VaultLib.transferIn(s, _tokenIn);\n        require(amountIn > 0, \"Vault: invalid amountIn\");\n\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\n        amountOut = VaultLib.adjustForDecimals(\n            s,\n            amountOut,\n            _tokenIn,\n            _tokenOut\n        );\n        (, uint256 amountOutAfterFees) = VaultLib._collectSwapFees(\n            s,\n            _tokenOut,\n            amountOut,\n            false\n        );\n\n        // adjust ndolAmounts by the same ndolAmount as debt is shifted between the assets\n        uint256 ndolAmount = amountIn.mul(priceIn).div(PRICE_PRECISION);\n        ndolAmount = VaultLib.adjustForDecimals(\n            s,\n            ndolAmount,\n            _tokenIn,\n            s.ndol\n        );\n\n        VaultLib._increaseNDOLAmount(s, _tokenIn, ndolAmount);\n        VaultLib._decreaseNDOLAmount(s, _tokenOut, ndolAmount);\n\n        VaultLib._increasePoolAmount(s, _tokenIn, amountIn);\n        VaultLib._decreasePoolAmount(s, _tokenOut, amountOut);\n\n        emit Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOutAfterFees);\n\n        VaultLib.transferOut(s, _tokenOut, amountOutAfterFees, _receiver);\n\n        contractExited();\n\n        return amountOutAfterFees;\n    }\n\n    function getRedemptionBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.redemptionBasisPoints[_token];\n    }\n\n    function poolAmounts(address _token) public view returns (uint256) {\n        return s.poolAmounts[_token];\n    }\n\n    function reservedAmounts(address _token) public view returns (uint256) {\n        return s.reservedAmounts[_token];\n    }\n\n    function ndolAmounts(address _token) public view returns (uint256) {\n        return s.ndolAmounts[_token];\n    }\n\n    function feeReserves(address _token) public view returns (uint256) {\n        return s.feeReserves[_token];\n    }\n\n    function guaranteedUsd(address _token) public view returns (uint256) {\n        return s.guaranteedUsd[_token];\n    }\n\n    function getRedemptionCollateral(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _collateral = VaultLib.usdToTokenMin(\n            s,\n            _token,\n            s.guaranteedUsd[_token]\n        );\n        return\n            _collateral.add(s.poolAmounts[_token]).sub(\n                s.reservedAmounts[_token]\n            );\n    }\n\n    function getRedemptionCollateralUsd(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            VaultLib.tokenToUsdMin(s, _token, getRedemptionCollateral(_token));\n    }\n\n    function availableReserve(address _token) public view returns (uint256) {\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\n        return _balance.sub(s.reservedAmounts[_token]);\n    }\n\n    function getRedemptionAmount(address _token, uint256 _ndolAmount)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _price = VaultLib.getMaxPrice(_token, s.includeAmmPrice);\n        return\n            VaultLib.adjustForDecimals(\n                s,\n                _ndolAmount.mul(PRICE_PRECISION).div(_price),\n                s.ndol,\n                _token\n            );\n    }\n\n    function getTargetAdjustedFee(address _token, uint256 _fee)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _initialAmount = s.ndolAmounts[_token];\n        uint256 _targetAmount = VaultLib._getTargetNDOLAmount(s, _token);\n\n        if (_targetAmount == 0 || _initialAmount == 0) {\n            return _fee;\n        } else if (_initialAmount > _targetAmount) {\n            return _fee;\n        }\n        return _fee.mul(_initialAmount).div(_targetAmount);\n    }\n\n    function ndol() public view returns (address) {\n        return s.ndol;\n    }\n\n    function swapFeeBasisPoints() public pure returns (uint256) {\n        return SWAP_FEE_BASIS_POINTS;\n    }\n}\n"
    },
    "contracts/facets/Vault/Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"../../lib/LibExchangeStorage.sol\";\nimport \"../../lib/LibDiamond.sol\";\n\ncontract Facet {\n    LibExchangeStorage.Storage internal s;\n\n    constructor() {\n        s.contractEntered = false;\n    }\n\n    function onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function _setGov(address _newGov) internal {\n        onlyGov();\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n\n    function contractEntered() internal {\n        require(!s.contractEntered, \"Contract already entered\");\n        s.contractEntered = true;\n    }\n\n    function contractExited() internal {\n        s.contractEntered = false;\n    }\n}\n"
    },
    "contracts/facets/Vault/VaultLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../../lib/LibExchangeStorage.sol\";\n\n// import \"hardhat/console.sol\";\n\nlibrary VaultLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event IncreaseNDOLAmount(address token, uint256 amount);\n    event DecreaseNDOLAmount(address token, uint256 amount);\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\n    event IncreasePoolAmount(address token, uint256 amount);\n    event DecreasePoolAmount(address token, uint256 amount);\n    event UpdateFundingRate(address token, uint256 fundingRate);\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\n    event IncreaseReservedAmount(address token, uint256 amount);\n    event DecreaseReservedAmount(address token, uint256 amount);\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\n\n    function _getNextFundingRate(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view returns (uint256) {\n        if (\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\n        ) {\n            return 0;\n        }\n\n        uint256 _intervals = block\n            .timestamp\n            .sub(s.lastFundingTimes[_token])\n            .div(FUNDING_INTERVAL);\n        uint256 _poolAmount = s.poolAmounts[_token];\n        if (_poolAmount == 0) {\n            return 0;\n        }\n\n        return\n            FUNDING_RATE_FACTOR\n                .mul(s.reservedAmounts[_token])\n                .mul(_intervals)\n                .div(_poolAmount);\n    }\n\n    function updateCumulativeFundingRate(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal {\n        if (s.lastFundingTimes[_token] == 0) {\n            s.lastFundingTimes[_token] = block\n                .timestamp\n                .div(FUNDING_INTERVAL)\n                .mul(FUNDING_INTERVAL);\n            return;\n        }\n\n        if (\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\n        ) {\n            return;\n        }\n\n        uint256 fundingRate = _getNextFundingRate(s, _token);\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\n            fundingRate\n        );\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\n            FUNDING_INTERVAL\n        );\n\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\n    }\n\n    function adjustForDecimals(\n        LibExchangeStorage.Storage storage s,\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 _decimalsDiv = _tokenDiv == s.ndol\n            ? NDOL_DECIMALS\n            : s.tokenDecimals[_tokenDiv];\n        uint256 _decimalsMul = _tokenMul == s.ndol\n            ? NDOL_DECIMALS\n            : s.tokenDecimals[_tokenMul];\n\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\n    }\n\n    function getMinPrice(address _token, bool includeAmmPrice)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            IVaultPriceFeed(address(this)).getPrice(\n                _token,\n                false,\n                includeAmmPrice\n            );\n    }\n\n    function getMaxPrice(address _token, bool includeAmmPrice)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            IVaultPriceFeed(address(this)).getPrice(\n                _token,\n                true,\n                includeAmmPrice\n            );\n    }\n\n    function isTokenWhitelisted(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        require(s.whitelistedTokens[_token], \"Vault: token not whitelisted\");\n    }\n\n    function isPoolAmountBelowBalance(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        require(s.poolAmounts[_token] <= balance, \"Vault: invalid increase\");\n    }\n\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\n        internal\n        returns (uint256)\n    {\n        uint256 prevBalance = s.tokenBalances[_token];\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\n        s.tokenBalances[_token] = nextBalance;\n\n        return nextBalance.sub(prevBalance);\n    }\n\n    function transferOut(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount,\n        address _receiver\n    ) internal {\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\n            _amount\n        );\n\n        IERC20(_token).safeTransfer(_receiver, _amount);\n    }\n\n    function tokenToUsdMin(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _tokenAmount\n    ) internal view returns (uint256) {\n        if (_tokenAmount == 0) {\n            return 0;\n        }\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\n        uint256 _decimals = s.tokenDecimals[_token];\n\n        return _tokenAmount.mul(_price).div(10**_decimals);\n    }\n\n    function usdToTokenMin(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        return\n            usdToToken(\n                s,\n                _token,\n                _usdAmount,\n                getMaxPrice(_token, s.includeAmmPrice)\n            );\n    }\n\n    function usdToToken(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount,\n        uint256 _price\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        uint256 _decimals = s.tokenDecimals[_token];\n\n        return _usdAmount.mul(10**_decimals).div(_price);\n    }\n\n    function tokenToUsdMax(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _tokenAmount,\n        bool includeAmmPrice\n    ) internal view returns (uint256) {\n        if (_tokenAmount == 0) {\n            return 0;\n        }\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\n        uint256 _decimals = s.tokenDecimals[_token];\n        return _tokenAmount.mul(_price).div(10**_decimals);\n    }\n\n    function usdToTokenMax(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount,\n        bool includeAmmPrice\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        return\n            usdToToken(\n                s,\n                _token,\n                _usdAmount,\n                getMinPrice(_token, includeAmmPrice)\n            );\n    }\n\n    function updateTokenBalance(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal {\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\n\n        s.tokenBalances[_token] = _nextBalance;\n    }\n\n    function validatePosition(uint256 _size, uint256 _collateral)\n        internal\n        pure\n    {\n        if (_size == 0) {\n            require(_collateral == 0, \"Vault: collateral should be withdrawn\");\n            return;\n        }\n        require(\n            _size >= _collateral,\n            \"Vault: _size must be more than _collateral\"\n        );\n    }\n\n    function _validateRouter(address _account) internal view {\n        if (msg.sender == _account) {\n            return;\n        }\n        if (msg.sender == address(this)) {\n            return;\n        }\n        revert(\"Vault: invalid msg.sender\");\n    }\n\n    function validateTokens(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken\n    ) internal view {\n        require(_collateralToken == _indexToken, \"Vault: mismatched tokens\");\n        isTokenWhitelisted(s, _collateralToken);\n        isTokenWhitelisted(s, _indexToken);\n    }\n\n    function getPositionKey(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _account,\n                    _collateralToken,\n                    _indexToken,\n                    _isLong\n                )\n            );\n    }\n\n    function _collectSwapFees(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount,\n        bool _isBuyingNDOL\n    ) internal returns (uint256, uint256) {\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\n            s,\n            _token,\n            SWAP_FEE_BASIS_POINTS\n        );\n        uint256 _afterFeeAmount = _amount\n            .mul(\n                BASIS_POINTS_DIVISOR.sub(\n                    _isBuyingNDOL ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\n                )\n            )\n            .div(BASIS_POINTS_DIVISOR);\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\n\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\n\n        emit CollectSwapFees(\n            _token,\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\n            _feeAmount\n        );\n        return (_feeAmount, _afterFeeAmount);\n    }\n\n    function _increasePoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal returns (uint256) {\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\n        isPoolAmountBelowBalance(s, _token);\n\n        emit IncreasePoolAmount(_token, _amount);\n\n        return s.poolAmounts[_token];\n    }\n\n    function _decreasePoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\n            _amount,\n            \"Vault: poolAmount exceeded\"\n        );\n        isReservedAmountBelowPoolAmount(s, _token);\n        isPoolAmountBelowBalance(s, _token);\n\n        emit DecreasePoolAmount(_token, _amount);\n    }\n\n    function isReservedAmountBelowPoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        require(\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\n            \"Vault: reserve exceeds pool\"\n        );\n    }\n\n    function _transferRemainingCollateral(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _receiver,\n        uint256 _usdOut,\n        uint256 _usdOutAfterFee\n    ) internal returns (uint256) {\n        if (_usdOut > 0) {\n            VaultLib._decreasePoolAmount(\n                s,\n                _collateralToken,\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\n            );\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\n                s,\n                _collateralToken,\n                _usdOutAfterFee\n            );\n            VaultLib.transferOut(\n                s,\n                _collateralToken,\n                _amountOutAfterFees,\n                _receiver\n            );\n\n            return _amountOutAfterFees;\n        } else {\n            return 0;\n        }\n    }\n\n    function _increaseNDOLAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.ndolAmounts[_token] = s.ndolAmounts[_token].add(_amount);\n\n        emit IncreaseNDOLAmount(_token, _amount);\n    }\n\n    function _decreaseNDOLAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        uint256 _value = s.ndolAmounts[_token];\n        // since NDOL can be minted using multiple assets\n        // it is possible for the NDOL debt for a single asset to be less than zero\n        // the NDOL debt is capped to zero for this case\n        if (_value <= _amount) {\n            s.ndolAmounts[_token] = 0;\n            emit DecreaseNDOLAmount(_token, _value);\n            return;\n        }\n        s.ndolAmounts[_token] = _value.sub(_amount);\n\n        emit DecreaseNDOLAmount(_token, _amount);\n    }\n\n    function _reduceCollateral(\n        LibExchangeStorage.Storage storage s,\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) internal returns (uint256, uint256) {\n        LibExchangeStorage.Position storage position = s.positions[\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\n        ];\n\n        uint256 fee = _collectMarginFees(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            position.size,\n            position.entryFundingRate\n        );\n        bool hasProfit;\n        uint256 adjustedDelta;\n\n        // scope variables to avoid stack too deep errors\n        {\n            (bool _hasProfit, uint256 delta) = _getDelta(\n                s,\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                position.lastIncreasedTime\n            );\n            hasProfit = _hasProfit;\n            // get the proportional change in pnl\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\n        }\n\n        uint256 usdOut;\n        // transfer profits out\n        if (hasProfit && adjustedDelta > 0) {\n            usdOut = adjustedDelta;\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\n        }\n\n        if (!hasProfit && adjustedDelta > 0) {\n            position.collateral = position.collateral.sub(adjustedDelta);\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\n        }\n\n        // reduce the position's collateral by _collateralDelta\n        // transfer _collateralDelta out\n        if (_collateralDelta > 0) {\n            usdOut = usdOut.add(_collateralDelta);\n            position.collateral = position.collateral.sub(_collateralDelta);\n        }\n\n        // if the position will be closed, then transfer the remaining collateral out\n        if (position.size == _sizeDelta) {\n            usdOut = usdOut.add(position.collateral);\n            position.collateral = 0;\n        }\n\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\n        // else deduct the fee from the position's collateral\n        if (usdOut < fee) {\n            position.collateral = position.collateral.sub(fee);\n            uint256 feeTokens = VaultLib.usdToTokenMin(\n                s,\n                _collateralToken,\n                fee\n            );\n            VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\n        }\n\n        emit UpdatePnl(\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\n            hasProfit,\n            adjustedDelta\n        );\n\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\n    }\n\n    function _collectMarginFees(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _sizeDelta,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) internal returns (uint256) {\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\n\n        uint256 fundingFee = _getFundingFee(\n            s,\n            _token,\n            _size,\n            _entryFundingRate\n        );\n        feeUsd = feeUsd.add(fundingFee);\n\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\n\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\n        return feeUsd;\n    }\n\n    function _increaseReservedAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\n        require(\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\n            \"Vault: reserve exceeds pool\"\n        );\n\n        emit IncreaseReservedAmount(_token, _amount);\n    }\n\n    function _decreaseReservedAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\n            _amount,\n            \"Vault: insufficient reserve\"\n        );\n\n        emit DecreaseReservedAmount(_token, _amount);\n    }\n\n    function _increaseGuaranteedUsd(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal {\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\n\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\n    }\n\n    function _decreaseGuaranteedUsd(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal {\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\n\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\n    }\n\n    function _getDelta(\n        LibExchangeStorage.Storage storage s,\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) internal view returns (bool, uint256) {\n        require(_averagePrice > 0, \"Vault: invalid _averagePrice\");\n        uint256 price = _isLong\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n        uint256 priceDelta = _averagePrice > price\n            ? _averagePrice.sub(price)\n            : price.sub(_averagePrice);\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\n\n        bool hasProfit;\n\n        if (_isLong) {\n            hasProfit = price > _averagePrice;\n        } else {\n            hasProfit = _averagePrice > price;\n        }\n\n        // if the minProfitTime has passed then there will be no min profit threshold\n        // the min profit threshold helps to prevent front-running issues\n        uint256 minBps = block.timestamp >\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\n            ? 0\n            : s.minProfitBasisPoints[_indexToken];\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\n            delta = 0;\n        }\n\n        return (hasProfit, delta);\n    }\n\n    function _getFundingFee(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) internal view returns (uint256) {\n        if (_size == 0) {\n            return 0;\n        }\n\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\n            _entryFundingRate\n        );\n        if (fundingRate == 0) {\n            return 0;\n        }\n\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\n    }\n\n    function _getPositionFee(uint256 _sizeDelta)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_sizeDelta == 0) {\n            return 0;\n        }\n        uint256 afterFeeUsd = _sizeDelta\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\n            .div(BASIS_POINTS_DIVISOR);\n        return _sizeDelta.sub(afterFeeUsd);\n    }\n\n    function _getTargetAdjustedFee(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _fee\n    ) internal view returns (uint256) {\n        uint256 _initialAmount = s.ndolAmounts[_token];\n        uint256 _targetAmount = _getTargetNDOLAmount(s, _token);\n\n        if (_targetAmount == 0 || _initialAmount == 0) {\n            return _fee;\n        } else if (_initialAmount > _targetAmount) {\n            return _fee;\n        }\n        return _fee.mul(_initialAmount).div(_targetAmount);\n    }\n\n    function _getTargetNDOLAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view returns (uint256) {\n        uint256 _ndolSupply = IERC20(s.ndol).totalSupply();\n        if (_ndolSupply == 0) {\n            return 0;\n        }\n        uint256 _tokenWeight = s.tokenWeights[_token];\n\n        return _ndolSupply.mul(_tokenWeight).div(s.totalTokenWeight);\n    }\n}\n"
    },
    "contracts/lib/LibExchangeStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n// import \"hardhat/console.sol\";\nuint256 constant _NOT_ENTERED = 1;\nuint256 constant _ENTERED = 2;\n\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\nuint256 constant PRICE_PRECISION = 10**30;\nuint256 constant NDOL_DECIMALS = 18;\nuint256 constant ONE_USD = PRICE_PRECISION;\nuint256 constant POSITION_PROPS_LENGTH = 9;\n\nuint256 constant PRICE_SAMPLE_SPACE = 1;\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\nuint256 constant FUNDING_INTERVAL = 8 hours;\n\nlibrary LibExchangeStorage {\n    bytes32 constant STORAGE_POSITION = keccak256(\"necc.dao.exchange.storage\");\n\n    struct Position {\n        uint256 size;\n        uint256 collateral;\n        uint256 averagePrice;\n        uint256 entryFundingRate;\n        uint256 reserveAmount;\n        int256 realisedPnl;\n        uint256 lastIncreasedTime;\n    }\n\n    // Single global store\n    struct Storage {\n        bool contractEntered;\n        address btc;\n        address weth;\n        address ndol;\n        bool includeAmmPrice;\n        bool isInitialized;\n        EnumerableSet.AddressSet tokens;\n        mapping(address => bool) whitelistedTokens;\n        mapping(bytes32 => Position) positions;\n        mapping(address => uint256) tokenDecimals;\n        mapping(address => uint256) redemptionBasisPoints;\n        mapping(address => uint256) minProfitBasisPoints;\n        mapping(address => uint256) tokenBalances;\n        mapping(address => uint256) ndolAmounts;\n        mapping(address => uint256) poolAmounts;\n        mapping(address => uint256) reservedAmounts;\n        mapping(address => uint256) guaranteedUsd;\n        mapping(address => uint256) cumulativeFundingRates;\n        mapping(address => uint256) lastFundingTimes;\n        mapping(address => uint256) feeReserves;\n        mapping(address => uint256) tokenWeights;\n        uint256 totalTokenWeight;\n        // Router\n        mapping(address => bool) plugins;\n        // PriceFeed\n        mapping(address => address) priceFeeds;\n        mapping(address => uint256) priceDecimals;\n        mapping(address => uint256) priceSpreadBasisPoints;\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\n        //\n        int256 answer;\n        uint80 roundId;\n        mapping(uint80 => int256) answers;\n        //\n        uint256 totalNDOLMinted;\n        mapping(address => mapping(address => int256)) ndolMinted; // [address][token] => amount\n        // Always add new storage variable to the end of this struct\n    }\n}\n"
    },
    "contracts/facets/interfaces/IVaultPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IVaultPriceFeed {\n    function setIsAmmEnabled(bool _isEnabled) external;\n\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\n\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\n\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\n        external;\n\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\n        external;\n\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\n\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\n        external;\n\n    function getPrice(\n        address _token,\n        bool _maximise,\n        bool _includeAmmPrice\n    ) external view returns (uint256);\n\n    function getAmmPrice(address _token) external view returns (uint256);\n}\n"
    },
    "contracts/facets/Vault/VaultFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./VaultLib.sol\";\nimport \"./Facet.sol\";\n\ncontract VaultFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event IncreasePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        uint256 collateralDelta,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 price,\n        uint256 fee\n    );\n    event DecreasePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        uint256 collateralDelta,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 price,\n        uint256 fee\n    );\n    event LiquidatePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        bool isLong,\n        uint256 size,\n        uint256 collateral,\n        uint256 reserveAmount,\n        int256 realisedPnl,\n        uint256 markPrice\n    );\n    event UpdatePosition(\n        bytes32 key,\n        uint256 size,\n        uint256 collateral,\n        uint256 averagePrice,\n        uint256 entryFundingRate,\n        uint256 reserveAmount,\n        int256 realisedPnl\n    );\n    event ClosePosition(\n        bytes32 key,\n        uint256 size,\n        uint256 collateral,\n        uint256 averagePrice,\n        uint256 entryFundingRate,\n        uint256 reserveAmount,\n        int256 realisedPnl\n    );\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external {\n        contractEntered();\n        VaultLib._validateRouter(_account);\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position storage position = s.positions[key];\n\n        uint256 price = _isLong\n            ? VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMinPrice(_indexToken, s.includeAmmPrice);\n\n        if (position.size == 0) {\n            position.averagePrice = price;\n        }\n\n        if (position.size > 0 && _sizeDelta > 0) {\n            position.averagePrice = getNextAveragePrice(\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                price,\n                _sizeDelta,\n                position.lastIncreasedTime\n            );\n        }\n\n        uint256 fee = VaultLib._collectMarginFees(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            position.size,\n            position.entryFundingRate\n        );\n        uint256 collateralDelta = VaultLib.transferIn(s, _collateralToken);\n        uint256 collateralDeltaUsd = VaultLib.tokenToUsdMin(\n            s,\n            _collateralToken,\n            collateralDelta\n        );\n\n        position.collateral = position.collateral.add(collateralDeltaUsd);\n        require(\n            position.collateral >= fee,\n            \"Vault: insufficient collateral for fees\"\n        );\n\n        position.collateral = position.collateral.sub(fee);\n        position.entryFundingRate = s.cumulativeFundingRates[_collateralToken];\n        position.size = position.size.add(_sizeDelta);\n        position.lastIncreasedTime = block.timestamp;\n\n        require(position.size > 0, \"Vault: invalid position.size\");\n        VaultLib.validatePosition(position.size, position.collateral);\n        validateLiquidation(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            true\n        );\n\n        // reserve tokens to pay profits on the position\n        uint256 reserveDelta = VaultLib.usdToTokenMax(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            s.includeAmmPrice\n        );\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\n        VaultLib._increaseReservedAmount(s, _collateralToken, reserveDelta);\n\n        // guaranteedUsd stores the sum of (position.size - position.collateral) for all positions\n        // if a fee is charged on the collateral then guaranteedUsd should be increased by that fee amount\n        // since (position.size - position.collateral) would have increased by `fee`\n        VaultLib._increaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            _sizeDelta.add(fee)\n        );\n        VaultLib._decreaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            collateralDeltaUsd\n        );\n        // treat the deposited collateral as part of the pool\n        VaultLib._increasePoolAmount(s, _collateralToken, collateralDelta);\n        // fees need to be deducted from the pool since fees are deducted from position.collateral\n        // and collateral is treated as part of the pool\n        VaultLib._decreasePoolAmount(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, fee)\n        );\n\n        emit IncreasePosition(\n            key,\n            _account,\n            _collateralToken,\n            _indexToken,\n            collateralDeltaUsd,\n            _sizeDelta,\n            _isLong,\n            price,\n            fee\n        );\n        emit UpdatePosition(\n            key,\n            position.size,\n            position.collateral,\n            position.averagePrice,\n            position.entryFundingRate,\n            position.reserveAmount,\n            position.realisedPnl\n        );\n\n        contractExited();\n    }\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256) {\n        contractEntered();\n        VaultLib._validateRouter(_account);\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n\n        uint256 _amountOutAfterFees = _decreasePosition(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver\n        );\n        contractExited();\n\n        return _amountOutAfterFees;\n    }\n\n    function _decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) private returns (uint256) {\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position storage position = s.positions[key];\n        require(position.size > 0, \"Vault: empty position\");\n        require(position.size >= _sizeDelta, \"Vault: position size exceeded\");\n        require(\n            position.collateral >= _collateralDelta,\n            \"Vault: position collateral exceeded\"\n        );\n\n        uint256 collateral = position.collateral;\n        // scope variables to avoid stack too deep errors\n        {\n            uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(\n                position.size\n            );\n            position.reserveAmount = position.reserveAmount.sub(reserveDelta);\n            VaultLib._decreaseReservedAmount(s, _collateralToken, reserveDelta);\n        }\n\n        (uint256 _usdOut, uint256 _usdOutAfterFee) = VaultLib._reduceCollateral(\n            s,\n            _account,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong\n        );\n\n        if (position.size != _sizeDelta) {\n            position.entryFundingRate = s.cumulativeFundingRates[\n                _collateralToken\n            ];\n            position.size = position.size.sub(_sizeDelta);\n\n            VaultLib.validatePosition(position.size, position.collateral);\n            validateLiquidation(\n                _account,\n                _collateralToken,\n                _indexToken,\n                _isLong,\n                true\n            );\n\n            VaultLib._increaseGuaranteedUsd(\n                s,\n                _collateralToken,\n                collateral.sub(position.collateral)\n            );\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\n\n            uint256 price = _isLong\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n            emit DecreasePosition(\n                key,\n                _account,\n                _collateralToken,\n                _indexToken,\n                _collateralDelta,\n                _sizeDelta,\n                _isLong,\n                price,\n                _usdOut.sub(_usdOutAfterFee)\n            );\n            emit UpdatePosition(\n                key,\n                position.size,\n                position.collateral,\n                position.averagePrice,\n                position.entryFundingRate,\n                position.reserveAmount,\n                position.realisedPnl\n            );\n        } else {\n            VaultLib._increaseGuaranteedUsd(s, _collateralToken, collateral);\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\n\n            uint256 price = _isLong\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n            emit DecreasePosition(\n                key,\n                _account,\n                _collateralToken,\n                _indexToken,\n                _collateralDelta,\n                _sizeDelta,\n                _isLong,\n                price,\n                _usdOut.sub(_usdOutAfterFee)\n            );\n            emit ClosePosition(\n                key,\n                position.size,\n                position.collateral,\n                position.averagePrice,\n                position.entryFundingRate,\n                position.reserveAmount,\n                position.realisedPnl\n            );\n\n            delete s.positions[key];\n        }\n\n        return\n            VaultLib._transferRemainingCollateral(\n                s,\n                _collateralToken,\n                _receiver,\n                _usdOut,\n                _usdOutAfterFee\n            );\n    }\n\n    function liquidatePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong,\n        address _feeReceiver\n    ) external {\n        contractEntered();\n        // set INCLUDE_AMM_PRICE to false prevent manipulated liquidations\n        s.includeAmmPrice = false;\n\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        require(position.size > 0, \"Vault: empty position\");\n\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            false\n        );\n        require(liquidationState != 0, \"Vault: position cannot be liquidated\");\n        // max leverage exceeded but there is collateral remaining after deducting losses\n        // so decreasePosition instead by a half to keep alive\n        if (liquidationState == 2) {\n            _decreasePosition(\n                _account,\n                _collateralToken,\n                _indexToken,\n                0,\n                position.size.mul(5).div(10), // div by 2\n                _isLong,\n                _account\n            );\n            return;\n        }\n\n        s.feeReserves[_collateralToken] = s.feeReserves[_collateralToken].add(\n            VaultLib.usdToTokenMin(s, _collateralToken, marginFees)\n        );\n\n        VaultLib._decreaseReservedAmount(\n            s,\n            _collateralToken,\n            position.reserveAmount\n        );\n        VaultLib._decreaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            position.size.sub(position.collateral)\n        );\n\n        uint256 markPrice = _isLong\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n\n        emit LiquidatePosition(\n            key,\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            position.size,\n            position.collateral,\n            position.reserveAmount,\n            position.realisedPnl,\n            markPrice\n        );\n\n        delete s.positions[key];\n\n        // pay the fee receiver using the pool,\n        // we assume that in general the liquidated amount should be sufficient to cover\n        // the liquidation fees\n        VaultLib._decreasePoolAmount(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD)\n        );\n\n        s.includeAmmPrice = true;\n\n        VaultLib.transferOut(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD),\n            _feeReceiver\n        );\n\n        contractExited();\n    }\n\n    function validateLiquidation(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong,\n        bool _raise\n    )\n        public\n        view\n        returns (\n            // returns (state, fees)\n            uint256,\n            uint256\n        )\n    {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n\n        (bool hasProfit, uint256 delta) = getDelta(\n            _indexToken,\n            position.size,\n            position.averagePrice,\n            _isLong,\n            position.lastIncreasedTime\n        );\n        uint256 marginFees = getFundingFee(\n            _collateralToken,\n            position.size,\n            position.entryFundingRate\n        );\n        marginFees = marginFees.add(getPositionFee(position.size));\n\n        if (!hasProfit && position.collateral < delta) {\n            if (_raise) {\n                revert(\"Vault: losses exceed collateral\");\n            }\n            return (1, marginFees);\n        }\n\n        uint256 remainingCollateral = position.collateral;\n        if (!hasProfit) {\n            remainingCollateral = position.collateral.sub(delta);\n        }\n\n        if (remainingCollateral < marginFees) {\n            if (_raise) {\n                revert(\"Vault: fees exceed collateral\");\n            }\n            // cap the fees to the remainingCollateral\n            return (1, remainingCollateral);\n        }\n\n        if (remainingCollateral < marginFees.add(LIQUIDATION_FEE_USD)) {\n            if (_raise) {\n                revert(\"Vault: liquidation fees exceed collateral\");\n            }\n            return (1, marginFees);\n        }\n\n        if (\n            remainingCollateral.mul(MAX_LEVERAGE) <\n            position.size.mul(BASIS_POINTS_DIVISOR)\n        ) {\n            if (_raise) {\n                revert(\"Vault: max leverage exceeded\");\n            }\n            return (2, marginFees);\n        }\n\n        return (0, marginFees);\n    }\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        )\n    {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        uint256 realisedPnl = position.realisedPnl > 0\n            ? uint256(position.realisedPnl)\n            : uint256(-position.realisedPnl);\n        return (\n            position.size, // 0\n            position.collateral, // 1\n            position.averagePrice, // 2\n            position.entryFundingRate, // 3\n            position.reserveAmount, // 4\n            realisedPnl, // 5\n            position.realisedPnl >= 0, // 6\n            position.lastIncreasedTime // 7\n        );\n    }\n\n    function getNextFundingRate(address _token) public view returns (uint256) {\n        return VaultLib._getNextFundingRate(s, _token);\n    }\n\n    function getUtilisation(address _token) public view returns (uint256) {\n        uint256 poolAmount = s.poolAmounts[_token];\n        if (poolAmount == 0) {\n            return 0;\n        }\n\n        return\n            s.reservedAmounts[_token].mul(FUNDING_RATE_PRECISION).div(\n                poolAmount\n            );\n    }\n\n    function getPositionLeverage(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) public view returns (uint256) {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        require(position.collateral > 0, \"Vault: invalid position\");\n        return position.size.mul(BASIS_POINTS_DIVISOR).div(position.collateral);\n    }\n\n    // // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\n    // // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\n    function getNextAveragePrice(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _nextPrice,\n        uint256 _sizeDelta,\n        uint256 _lastIncreasedTime\n    ) public view returns (uint256) {\n        (bool hasProfit, uint256 delta) = getDelta(\n            _indexToken,\n            _size,\n            _averagePrice,\n            _isLong,\n            _lastIncreasedTime\n        );\n        uint256 nextSize = _size.add(_sizeDelta);\n        uint256 divisor;\n        if (_isLong) {\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\n        } else {\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\n        }\n        return _nextPrice.mul(nextSize).div(divisor);\n    }\n\n    function getPositionDelta(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) public view returns (bool, uint256) {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        return\n            getDelta(\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                position.lastIncreasedTime\n            );\n    }\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) public view returns (bool, uint256) {\n        return\n            VaultLib._getDelta(\n                s,\n                _indexToken,\n                _size,\n                _averagePrice,\n                _isLong,\n                _lastIncreasedTime\n            );\n    }\n\n    function getFundingFee(\n        address _token,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) public view returns (uint256) {\n        return VaultLib._getFundingFee(s, _token, _size, _entryFundingRate);\n    }\n\n    function getPositionFee(uint256 _sizeDelta) public pure returns (uint256) {\n        return VaultLib._getPositionFee(_sizeDelta);\n    }\n\n    function liquidationFeeUsd() public pure returns (uint256) {\n        return LIQUIDATION_FEE_USD;\n    }\n\n    function fundingRateFactor() public pure returns (uint256) {\n        return FUNDING_RATE_FACTOR;\n    }\n\n    function fundingInterval() public pure returns (uint256) {\n        return FUNDING_INTERVAL;\n    }\n\n    function marginFeeBasisPoints() public pure returns (uint256) {\n        return MARGIN_FEE_BASIS_POINTS;\n    }\n\n    function cumulativeFundingRates(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.cumulativeFundingRates[_token];\n    }\n\n    function lastFundingTimes(address _token) public view returns (uint256) {\n        return s.lastFundingTimes[_token];\n    }\n}\n"
    },
    "contracts/facets/VaultPriceFeed/VaultPriceFeedFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract VaultPriceFeedFacet is Facet {\n    using SafeMath for uint256;\n\n    function getPrimaryPrice(address _token, bool _maximise)\n        public\n        view\n        returns (uint256)\n    {\n        address priceFeedAddress = s.priceFeeds[_token];\n        require(\n            priceFeedAddress != address(0),\n            \"PriceFeed: invalid price feed\"\n        );\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\n\n        uint256 price = 0;\n        uint80 roundId = priceFeed.latestRound();\n\n        for (uint80 i = 0; i < PRICE_SAMPLE_SPACE; i++) {\n            if (roundId <= i) {\n                break;\n            }\n            uint256 p;\n\n            if (i == 0) {\n                int256 _p = priceFeed.latestAnswer();\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            } else {\n                (, int256 _p, , , ) = priceFeed.getRoundData(roundId - i);\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            }\n\n            if (price == 0) {\n                price = p;\n                continue;\n            }\n\n            if (_maximise && p > price) {\n                price = p;\n                continue;\n            }\n\n            if (!_maximise && p < price) {\n                price = p;\n            }\n        }\n\n        require(price > 0, \"PriceFeed: could not fetch price\");\n        // normalise price precision\n        uint256 _priceDecimals = s.priceDecimals[_token];\n        return price.mul(PRICE_PRECISION).div(10**_priceDecimals);\n    }\n\n    // if divByReserve0: calculate price as reserve1 / reserve0\n    // if !divByReserve1: calculate price as reserve0 / reserve1\n    function getPairPrice(address _pair, bool _divByReserve0)\n        public\n        view\n        returns (uint256)\n    {\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\n            .getReserves();\n        if (_divByReserve0) {\n            if (reserve0 == 0) {\n                return 0;\n            }\n            return reserve1.mul(PRICE_PRECISION).div(reserve0);\n        }\n        if (reserve1 == 0) {\n            return 0;\n        }\n        return reserve0.mul(PRICE_PRECISION).div(reserve1);\n    }\n\n    function getAmmPrice(address _token, uint256 _primaryPrice)\n        public\n        view\n        returns (uint256)\n    {\n        // Usually wXUSDC\n        address _basePair = s.baseTokenPairs[_token];\n        // Usually xETHwX\n        address _tokenPair = s.tokenPairs[_token];\n\n        uint256 _price0 = getPairPrice(_basePair, false);\n        uint256 _price1 = getPairPrice(_tokenPair, false);\n\n        if (_basePair == _tokenPair) {\n            return _price0.mul(10**(s.priceDecimals[_token]));\n        } else if (_price0 == 0 || _price1 == 0) {\n            return _primaryPrice;\n        }\n\n        // this calculation could overflow if (price0 / 10**30) * (price1 / 10**30) is more than 10**17\n        return\n            _price0.mul(_price1).mul(10**(s.priceDecimals[_token])).div(\n                PRICE_PRECISION\n            );\n    }\n\n    function getPrice(\n        address _token,\n        bool _maximise,\n        bool _includeAmmPrice\n    ) public view returns (uint256) {\n        address _priceFeed = s.priceFeeds[_token];\n        uint256 _priceSpreadBasisPoints = s.priceSpreadBasisPoints[_token];\n        uint256 _price = 0;\n\n        if (_priceFeed != address(0)) {\n            _price = getPrimaryPrice(_token, _maximise);\n        } else if (\n            _includeAmmPrice &&\n            s.baseTokenPairs[_token] != address(0) &&\n            s.tokenPairs[_token] != address(0)\n        ) {\n            _price = getAmmPrice(_token, _price);\n        }\n\n        if (_price == 0) {\n            return _price;\n        }\n\n        if (_maximise) {\n            return\n                _price\n                    .mul(BASIS_POINTS_DIVISOR.add(_priceSpreadBasisPoints))\n                    .div(BASIS_POINTS_DIVISOR);\n        }\n\n        return\n            _price.mul(BASIS_POINTS_DIVISOR.sub(_priceSpreadBasisPoints)).div(\n                BASIS_POINTS_DIVISOR\n            );\n    }\n}\n"
    },
    "contracts/facets/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IPriceFeed {\n    function description() external view returns (string memory);\n\n    function aggregator() external view returns (address);\n\n    function latestAnswer() external view returns (int256);\n\n    function latestRound() external view returns (uint80);\n\n    function getRoundData(uint80 roundId)\n        external\n        view\n        returns (\n            uint80,\n            int256,\n            uint256,\n            uint256,\n            uint80\n        );\n}\n"
    },
    "contracts/facets/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/tokens/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract Token is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() {\n        _name = \"Token\";\n        _symbol = \"TOKEN\";\n        _decimals = 18;\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function withdrawToken(\n        address token,\n        address account,\n        uint256 amount\n    ) public {\n        IERC20(token).transfer(account, amount);\n    }\n\n    function deposit() public payable {\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_balances[msg.sender] >= amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        _msgSender().transfer(amount);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(address(msg.sender));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/core/Farm/MintFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IDistributor {\n    function rewardToken() external view returns (IERC20);\n\n    function beneficiary() external view returns (address);\n\n    function distribute() external;\n\n    function nextDistribution() external view returns (uint256);\n\n    function empty() external;\n}\n\ncontract MintFarm is Ownable {\n    using SafeMath for uint256;\n    uint256 constant PRECISION = 1e30;\n\n    IERC20 public stakingToken;\n    IERC20 public rewardToken;\n    IDistributor public rewardDistributor;\n\n    // track stakes\n    uint256 public totalStaked;\n    mapping(address => uint256) public staked;\n\n    // track overall cumulative rewards\n    uint256 public cumulativeRewardPerToken;\n    // track previous cumulate rewards for accounts\n    mapping(address => uint256) public previousCumulatedRewardPerToken;\n    // track claimable rewards for accounts\n    mapping(address => uint256) public claimableReward;\n\n    // track total rewards\n    uint256 public totalClaimedRewards;\n    uint256 public totalFarmRewards;\n\n    // ======= STORAGE DECLARATION END ============\n\n    /**\n     * @dev Emitted when an account stakes\n     * @param who Account staking\n     * @param amountStaked Amount of tokens staked\n     */\n    event Stake(address indexed who, uint256 amountStaked);\n\n    /**\n     * @dev Emitted when an account unstakes\n     * @param who Account unstaking\n     * @param amountUnstaked Amount of tokens unstaked\n     */\n    event Unstake(address indexed who, uint256 amountUnstaked);\n\n    /**\n     * @dev Emitted when an account claims TRU rewards\n     * @param who Account claiming\n     * @param amountClaimed Amount of TRU claimed\n     */\n    event Claim(address indexed who, uint256 amountClaimed);\n\n    function initialize(IDistributor _rewardDistributor, IERC20 _stakingToken)\n        public\n        onlyOwner\n    {\n        stakingToken = _stakingToken;\n        rewardDistributor = _rewardDistributor;\n        rewardToken = _rewardDistributor.rewardToken();\n        require(\n            rewardDistributor.beneficiary() == address(this),\n            \"MintFarm: Distributor beneficiary is not set\"\n        );\n    }\n\n    function stake(uint256 amount) external update {\n        if (claimableReward[msg.sender] > 0) {\n            _claim();\n        }\n        staked[msg.sender] = staked[msg.sender].add(amount);\n        totalStaked = totalStaked.add(amount);\n        require(stakingToken.transferFrom(msg.sender, address(this), amount));\n        emit Stake(msg.sender, amount);\n    }\n\n    function _unstake(uint256 amount) internal {\n        require(\n            amount <= staked[msg.sender],\n            \"MintFarm: Cannot withdraw amount bigger than available balance\"\n        );\n        staked[msg.sender] = staked[msg.sender].sub(amount);\n        totalStaked = totalStaked.sub(amount);\n        require(stakingToken.transfer(msg.sender, amount));\n        emit Unstake(msg.sender, amount);\n    }\n\n    function _claim() internal {\n        totalClaimedRewards = totalClaimedRewards.add(\n            claimableReward[msg.sender]\n        );\n        uint256 rewardToClaim = claimableReward[msg.sender];\n        claimableReward[msg.sender] = 0;\n        require(rewardToken.transfer(msg.sender, rewardToClaim));\n        emit Claim(msg.sender, rewardToClaim);\n    }\n\n    function unstake(uint256 amount) external update {\n        _unstake(amount);\n    }\n\n    function claim() external update {\n        _claim();\n    }\n\n    function exit(uint256 amount) external update {\n        _unstake(amount);\n        _claim();\n    }\n\n    function claimable(address account) external view returns (uint256) {\n        if (staked[account] == 0) {\n            return claimableReward[account];\n        }\n        // calculate total rewards (including pending)\n        uint256 newTotalFarmRewards = rewardToken\n            .balanceOf(address(this))\n            .add(totalClaimedRewards)\n            .mul(PRECISION);\n        // calculate block reward\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\n        // calculate next cumulative reward per token\n        uint256 nextcumulativeRewardPerToken = cumulativeRewardPerToken.add(\n            totalBlockReward.div(totalStaked)\n        );\n        // return claimable reward for this account\n        // prettier-ignore\n        return claimableReward[account].add(\n            staked[account].mul(nextcumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[account])).div(PRECISION));\n    }\n\n    modifier update() {\n        // pull TRU from distributor\n        // only pull if there is distribution and distributor farm is set to this farm\n        if (\n            IERC20(rewardToken).balanceOf(address(rewardDistributor)) > 0 &&\n            rewardDistributor.beneficiary() == address(this)\n        ) {\n            rewardDistributor.distribute();\n        }\n        // calculate total rewards\n        uint256 newTotalFarmRewards = rewardToken\n            .balanceOf(address(this))\n            .add(totalClaimedRewards)\n            .mul(PRECISION);\n        // calculate block reward\n        uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);\n        // update farm rewards\n        totalFarmRewards = newTotalFarmRewards;\n        // if there are stakers\n        if (totalStaked > 0) {\n            cumulativeRewardPerToken = cumulativeRewardPerToken.add(\n                totalBlockReward.div(totalStaked)\n            );\n        }\n        // update claimable reward for sender\n        claimableReward[msg.sender] = claimableReward[msg.sender].add(\n            staked[msg.sender]\n                .mul(\n                    cumulativeRewardPerToken.sub(\n                        previousCumulatedRewardPerToken[msg.sender]\n                    )\n                )\n                .div(PRECISION)\n        );\n        // update previous cumulative for sender\n        previousCumulatedRewardPerToken[msg.sender] = cumulativeRewardPerToken;\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/core/Farm/MintDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MintDistributor is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public rewardToken;\n    address public beneficiary;\n    uint256 public amount;\n    bool public halted;\n\n    event Distributed(uint256 amount);\n\n    function initialize(address _beneficiary, IERC20 _rewardToken)\n        public\n        onlyOwner\n    {\n        beneficiary = _beneficiary;\n        rewardToken = _rewardToken;\n        amount = IERC20(_rewardToken).balanceOf(address(this));\n    }\n\n    function onlyBeneficiary() internal view {\n        require(\n            msg.sender == beneficiary,\n            \"ArbitraryDistributor: Only beneficiary can receive tokens\"\n        );\n    }\n\n    function checkHalted() internal view {\n        if (halted == true) {\n            return;\n        }\n    }\n\n    function distribute() public {\n        onlyBeneficiary();\n        checkHalted();\n\n        uint256 _amount = IERC20(rewardToken).balanceOf(address(this));\n        IERC20(rewardToken).transfer(beneficiary, _amount);\n\n        emit Distributed(_amount);\n    }\n\n    function empty() public onlyOwner {\n        rewardToken.safeTransfer(\n            msg.sender,\n            rewardToken.balanceOf(address(this))\n        );\n\n        halt();\n    }\n\n    function halt() public onlyOwner {\n        halted = true;\n    }\n\n    function unHalt() public onlyOwner {\n        halted = false;\n    }\n}\n"
    },
    "contracts/facets/Vault/VaultConfigFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./VaultLib.sol\";\nimport \"./Facet.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract VaultConfigFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event DirectPoolDeposit(address token, uint256 amount);\n    event WithdrawFees(address _token, address _receiver, uint256 _amount);\n    event SetTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _minProfitBasisPoints,\n        address _priceFeed,\n        uint256 _priceDecimals,\n        uint256 _priceSpreadBasisPoints,\n        uint256 _tokenWeight,\n        address _baseTokenPair,\n        address _tokenPair\n    );\n    event ClearTokenConfig(address _token);\n    event SetRedemptionBasisPoints(address _token, uint256 _basisPoints);\n    event SetPriceSpreadBasisPoints(\n        address _token,\n        uint256 _priceSpreadBasisPoints\n    );\n\n    function initialize(address _weth, address _ndol) external {\n        onlyGov();\n        require(!s.isInitialized, \"Vault: already initialized\");\n        require(_weth != address(0), \"Vault: invalid WETH address\");\n        require(_ndol != address(0), \"Vault: invalid _ndol address\");\n\n        s.isInitialized = true;\n        s.includeAmmPrice = true;\n\n        s.weth = _weth;\n        s.ndol = _ndol;\n    }\n\n    function isInitialized() public view returns (bool) {\n        return s.isInitialized;\n    }\n\n    function setTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _minProfitBasisPoints,\n        address _priceFeed,\n        uint256 _priceDecimals,\n        uint256 _priceSpreadBasisPoints,\n        uint256 _tokenWeight,\n        address _baseTokenPair,\n        address _tokenPair\n    ) external {\n        onlyGov();\n        EnumerableSet.add(s.tokens, _token);\n        s.whitelistedTokens[_token] = true;\n        s.tokenDecimals[_token] = _tokenDecimals;\n        s.minProfitBasisPoints[_token] = _minProfitBasisPoints;\n        s.priceFeeds[_token] = _priceFeed;\n        s.priceDecimals[_token] = _priceDecimals;\n        s.priceSpreadBasisPoints[_token] = _priceSpreadBasisPoints;\n\n        if (s.tokenWeights[_token] == 0) {\n            s.totalTokenWeight = s.totalTokenWeight.add(_tokenWeight);\n        } else {\n            s.totalTokenWeight = s.totalTokenWeight.sub(s.tokenWeights[_token]);\n            s.totalTokenWeight = s.totalTokenWeight.add(_tokenWeight);\n        }\n        s.tokenWeights[_token] = _tokenWeight;\n        s.redemptionBasisPoints[_token] = BASIS_POINTS_DIVISOR;\n\n        if (_baseTokenPair != address(0)) {\n            s.baseTokenPairs[_token] = _baseTokenPair;\n            s.tokenPairs[_token] = _tokenPair;\n        }\n\n        // validate price feed\n        VaultLib.getMaxPrice(_token, s.includeAmmPrice);\n        emit SetTokenConfig(\n            _token,\n            _tokenDecimals,\n            _minProfitBasisPoints,\n            _priceFeed,\n            _priceDecimals,\n            _priceSpreadBasisPoints,\n            _tokenWeight,\n            _baseTokenPair,\n            _tokenPair\n        );\n    }\n\n    function clearTokenConfig(address _token) external {\n        onlyGov();\n        VaultLib.isTokenWhitelisted(s, _token);\n\n        EnumerableSet.remove(s.tokens, _token);\n        delete s.whitelistedTokens[_token];\n        delete s.tokenDecimals[_token];\n        delete s.redemptionBasisPoints[_token];\n        delete s.minProfitBasisPoints[_token];\n        delete s.priceFeeds[_token];\n        delete s.priceDecimals[_token];\n        delete s.priceSpreadBasisPoints[_token];\n\n        if (s.tokenWeights[_token] != 0) {\n            s.totalTokenWeight = s.totalTokenWeight.sub(s.tokenWeights[_token]);\n            delete s.tokenWeights[_token];\n        }\n\n        delete s.redemptionBasisPoints[_token];\n        delete s.baseTokenPairs[_token];\n        delete s.tokenPairs[_token];\n\n        emit ClearTokenConfig(_token);\n    }\n\n    function withdrawFees(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        onlyGov();\n        uint256 _amount = s.feeReserves[_token];\n        if (_amount == 0) {\n            return 0;\n        }\n        s.feeReserves[_token] = 0;\n        VaultLib.transferOut(s, _token, _amount, _receiver);\n\n        emit WithdrawFees(_token, _receiver, _amount);\n        return _amount;\n    }\n\n    function directPoolDeposit(address _token) external {\n        contractEntered();\n        VaultLib.isTokenWhitelisted(s, _token);\n        uint256 _tokenAmount = VaultLib.transferIn(s, _token);\n        require(_tokenAmount > 0, \"Vault: invalid _tokenAmount\");\n        VaultLib._increasePoolAmount(s, _token, _tokenAmount);\n\n        emit DirectPoolDeposit(_token, _tokenAmount);\n        contractExited();\n    }\n\n    /**\n        @notice\n        Uses:\n        - Balance out pool weights backing NDOL\n        - NDOL is below peg so we set -ve interest rates\n        - Give out free monies\n\n        s.redemptionBasisPoints[_token] defaults to BASIS_POINTS_DIVISOR === 10000\n        redemptionAmount.mul(\n            _redemptionBasisPoints.div(BASIS_POINTS_DIVISOR)\n        );\n    */\n    function setRedemptionBasisPoints(\n        address _token,\n        uint256 _redemptionBasisPoints\n    ) external {\n        onlyGov();\n        s.redemptionBasisPoints[_token] = _redemptionBasisPoints;\n\n        emit SetRedemptionBasisPoints(_token, _redemptionBasisPoints);\n    }\n\n    /**\n        @notice\n        Uses:\n        - Tweak capital efficiency\n        - Increase monies via fees\n\n        s.priceSpreadBasisPoints[_token] defaults to 5\n        if maximise price, \n            price.mul(\n                BASIS_POINTS_DIVISOR.add(_priceSpreadBasisPoints)\n            ).div(BASIS_POINTS_DIVISOR);\n        else,\n            price.mul(\n                BASIS_POINTS_DIVISOR.sub(_priceSpreadBasisPoints)\n            ).div(BASIS_POINTS_DIVISOR);\n    */\n    function setPriceSpreadBasisPoints(\n        address _token,\n        uint256 _priceSpreadBasisPoints\n    ) external {\n        require(\n            _priceSpreadBasisPoints < BASIS_POINTS_DIVISOR,\n            \"Vault: price spread too large\"\n        );\n        onlyGov();\n        s.priceSpreadBasisPoints[_token] = _priceSpreadBasisPoints;\n\n        emit SetPriceSpreadBasisPoints(_token, _priceSpreadBasisPoints);\n    }\n\n    function setGov(address _newGov) public {\n        _setGov(_newGov);\n    }\n\n    function whitelistedTokenCount() public view returns (uint256) {\n        return EnumerableSet.length(s.tokens);\n    }\n\n    function whitelistedTokens(address _token) public view returns (bool) {\n        return EnumerableSet.contains(s.tokens, _token);\n    }\n\n    function gov() public view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function tokenDecimals(address _token) public view returns (uint256) {\n        return s.tokenDecimals[_token];\n    }\n\n    function tokenWeights(address _token) public view returns (uint256) {\n        return s.tokenWeights[_token];\n    }\n\n    function totalTokenWeight() public view returns (uint256) {\n        return s.totalTokenWeight;\n    }\n\n    function minProfitBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.minProfitBasisPoints[_token];\n    }\n\n    function redemptionBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.redemptionBasisPoints[_token];\n    }\n}\n"
    },
    "contracts/facets/Treasury/TreasuryFacet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./Facet.sol\";\n\ninterface IBondCalculator {\n    function valuation(address pair_, uint256 amount_)\n        external\n        view\n        returns (uint256 _value);\n}\n\ninterface IERC20Mintable {\n    function decimals() external view returns (uint256);\n\n    function mint(uint256 amount_) external;\n\n    function mint(address account_, uint256 ammount_) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\ncontract TreasuryFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Deposit(address indexed token, uint256 amount, uint256 value);\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\n    event CreateDebt(\n        address indexed debtor,\n        address indexed token,\n        uint256 amount,\n        uint256 value\n    );\n    event RepayDebt(\n        address indexed debtor,\n        address indexed token,\n        uint256 amount,\n        uint256 value\n    );\n    event ReservesManaged(address indexed token, uint256 amount);\n    event ReservesUpdated(uint256 indexed totalReserves);\n    event ReservesAudited(uint256 indexed totalReserves);\n    event RewardsMinted(\n        address indexed caller,\n        address indexed recipient,\n        uint256 amount\n    );\n    event ChangeQueued(MANAGING indexed managing, address queued);\n    event ChangeActivated(\n        MANAGING indexed managing,\n        address activated,\n        bool result\n    );\n\n    enum MANAGING {\n        RESERVEDEPOSITOR,\n        RESERVESPENDER,\n        RESERVETOKEN,\n        RESERVEMANAGER,\n        LIQUIDITYDEPOSITOR,\n        LIQUIDITYTOKEN,\n        LIQUIDITYMANAGER,\n        DEBTOR,\n        REWARDMANAGER,\n        NNECC\n    }\n\n    function initializeTreasury(\n        address _Necc,\n        address _NDOL,\n        uint256 _blocksNeededForQueue\n    ) external {\n        onlyGov();\n        require(_Necc != address(0));\n        s.Necc = _Necc;\n\n        s.isReserveToken[_NDOL] = true;\n        s.reserveTokens.push(_NDOL);\n\n        s.blocksNeededForQueue = _blocksNeededForQueue;\n    }\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function mintRewards(address _recipient, uint256 _amount) external {\n        require(s.isRewardManager[msg.sender], \"Treasury: Not approved\");\n        require(_amount <= excessReserves(), \"Treasury: Insufficient reserves\");\n\n        IERC20Mintable(s.Necc).mint(_recipient, _amount);\n\n        emit RewardsMinted(msg.sender, _recipient, _amount);\n    }\n\n    /**\n        @notice allow approved address to deposit an asset for Necc\n        @param _amount uint\n        @param _token address\n        @param _profit uint\n        @return send_ uint\n     */\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256 send_) {\n        require(\n            s.isReserveToken[_token] || s.isLiquidityToken[_token],\n            \"Treasury: Not accepted\"\n        );\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        if (s.isReserveToken[_token]) {\n            require(s.isReserveDepositor[msg.sender], \"Treasury: Not approved\");\n        } else {\n            require(\n                s.isLiquidityDepositor[msg.sender],\n                \"Treasury: Not approved\"\n            );\n        }\n\n        uint256 value = valueOfToken(_token, _amount);\n        // mint Necc needed and store amount of rewards for distribution\n        send_ = value.sub(_profit);\n        IERC20Mintable(s.Necc).mint(msg.sender, send_);\n\n        s.totalReserves = s.totalReserves.add(value);\n        emit ReservesUpdated(s.totalReserves);\n\n        emit Deposit(_token, _amount, value);\n\n        return send_;\n    }\n\n    /**\n        @notice allow approved address to burn Necc for reserves\n        @param _amount uint\n        @param _token address\n     */\n    function withdraw(uint256 _amount, address _token) external {\n        require(s.isReserveToken[_token], \"Treasury: Not accepted\"); // Only reserves can be used for redemptions\n        require(\n            s.isReserveSpender[msg.sender] == true,\n            \"Treasury: Not approved\"\n        );\n\n        uint256 _value = valueOfToken(_token, _amount);\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _value);\n\n        s.totalReserves = s.totalReserves.sub(_value);\n        emit ReservesUpdated(s.totalReserves);\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit Withdrawal(_token, _amount, _value);\n    }\n\n    /**\n        @notice allow approved address to borrow reserves\n        @param _amount uint\n        @param _token address\n     */\n    function incurDebt(uint256 _amount, address _token) external {\n        require(s.isDebtor[msg.sender], \"Treasury: Not approved\");\n        require(s.isReserveToken[_token], \"Treasury: Not accepted\");\n\n        uint256 _value = valueOfToken(_token, _amount);\n\n        uint256 maximumDebt = IERC20(s.sNecc).balanceOf(msg.sender); // Can only borrow against sNecc held\n        uint256 availableDebt = maximumDebt.sub(s.debtorBalance[msg.sender]);\n        require(_value <= availableDebt, \"Exceeds debt limit\");\n\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].add(_value);\n        s.totalDebt = s.totalDebt.add(_value);\n\n        s.totalReserves = s.totalReserves.sub(_value);\n        emit ReservesUpdated(s.totalReserves);\n\n        IERC20(_token).transfer(msg.sender, _amount);\n\n        emit CreateDebt(msg.sender, _token, _amount, _value);\n    }\n\n    /**\n        @notice allow approved address to repay borrowed reserves with reserves\n        @param _amount uint\n        @param _token address\n     */\n    function repayDebtWithReserve(uint256 _amount, address _token) external {\n        require(s.isDebtor[msg.sender], \"Treasury: Not approved\");\n        require(s.isReserveToken[_token], \"Treasury: Not accepted\");\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 _value = valueOfToken(_token, _amount);\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_value);\n        s.totalDebt = s.totalDebt.sub(_value);\n\n        s.totalReserves = s.totalReserves.add(_value);\n        emit ReservesUpdated(s.totalReserves);\n\n        emit RepayDebt(msg.sender, _token, _amount, _value);\n    }\n\n    /**\n        @notice allow approved address to repay borrowed reserves with Necc\n        @param _amount uint\n     */\n    function repayDebtWithNecc(uint256 _amount) external {\n        require(s.isDebtor[msg.sender], \"Treasury: Not approved\");\n\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _amount);\n\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_amount);\n        s.totalDebt = s.totalDebt.sub(_amount);\n\n        emit RepayDebt(msg.sender, s.Necc, _amount, _amount);\n    }\n\n    /**\n        @notice allow approved address to withdraw assets\n        @param _token address\n        @param _amount uint\n     */\n    function manage(address _token, uint256 _amount) external {\n        if (s.isLiquidityToken[_token]) {\n            require(s.isLiquidityManager[msg.sender], \"Treasury: Not approved\");\n        } else {\n            require(s.isReserveManager[msg.sender], \"Treasury: Not approved\");\n        }\n\n        uint256 _value = valueOfToken(_token, _amount);\n        (_token, _amount);\n        require(_value <= excessReserves(), \"Treasury: Insufficient reserves\");\n\n        s.totalReserves = s.totalReserves.sub(_value);\n        emit ReservesUpdated(s.totalReserves);\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit ReservesManaged(_token, _amount);\n    }\n\n    /**\n        @notice returns excess reserves not backing tokens\n        @return uint\n     */\n    function excessReserves() public view returns (uint256) {\n        return\n            s.totalReserves.sub(IERC20(s.Necc).totalSupply().sub(s.totalDebt));\n    }\n\n    /**\n        @notice takes inventory of all tracked assets\n        @notice always consolidate to recognized reserves before audit\n     */\n    function auditReserves() external {\n        onlyGov();\n        uint256 reserves;\n        for (uint256 i = 0; i < s.reserveTokens.length; i++) {\n            reserves = reserves.add(\n                valueOfToken(\n                    s.reserveTokens[i],\n                    IERC20(s.reserveTokens[i]).balanceOf(address(this))\n                )\n            );\n        }\n        for (uint256 i = 0; i < s.liquidityTokens.length; i++) {\n            reserves = reserves.add(\n                valueOfToken(\n                    s.liquidityTokens[i],\n                    IERC20(s.liquidityTokens[i]).balanceOf(address(this))\n                )\n            );\n        }\n        s.totalReserves = reserves;\n        emit ReservesUpdated(reserves);\n        emit ReservesAudited(reserves);\n    }\n\n    /**\n        @notice returns Necc valuation of asset\n        @param _token address\n        @param _amount uint\n        @return _value uint\n     */\n    function valueOfToken(address _token, uint256 _amount)\n        public\n        view\n        returns (uint256 _value)\n    {\n        if (s.isReserveToken[_token]) {\n            // convert amount to match Necc decimals\n            _value = _amount.mul(10**IERC20Mintable(s.Necc).decimals()).div(\n                10**IERC20Mintable(_token).decimals()\n            );\n        } else if (s.isLiquidityToken[_token]) {\n            _value = IBondCalculator(address(this)).valuation(_token, _amount);\n        }\n    }\n\n    /**\n        @notice queue address to change boolean in mapping\n        @param _managing MANAGING\n        @param _address address\n        @return bool\n     */\n    function queue(MANAGING _managing, address _address)\n        external\n        returns (bool)\n    {\n        onlyGov();\n        require(_address != address(0));\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\n            // 0\n            s.reserveDepositorQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.RESERVESPENDER) {\n            // 1\n            s.reserveSpenderQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.RESERVETOKEN) {\n            // 2\n            s.reserveTokenQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\n            // 3\n            s.ReserveManagerQueue[_address] = block.number.add(\n                s.blocksNeededForQueue.mul(2)\n            );\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\n            // 4\n            s.LiquidityDepositorQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\n            // 5\n            s.LiquidityTokenQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\n            // 6\n            s.LiquidityManagerQueue[_address] = block.number.add(\n                s.blocksNeededForQueue.mul(2)\n            );\n        } else if (_managing == MANAGING.DEBTOR) {\n            // 7\n            s.debtorQueue[_address] = block.number.add(s.blocksNeededForQueue);\n        } else if (_managing == MANAGING.REWARDMANAGER) {\n            // 8\n            s.rewardManagerQueue[_address] = block.number.add(\n                s.blocksNeededForQueue\n            );\n        } else if (_managing == MANAGING.NNECC) {\n            // 9\n            s.sNeccQueue = block.number.add(s.blocksNeededForQueue);\n        } else return false;\n\n        emit ChangeQueued(_managing, _address);\n        return true;\n    }\n\n    /**\n        @notice verify queue then set boolean in mapping\n        @param _managing MANAGING\n        @param _address address\n        @return bool\n     */\n    function toggle(MANAGING _managing, address _address)\n        external\n        returns (bool)\n    {\n        onlyGov();\n        require(_address != address(0));\n        bool _result;\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\n            // 0\n            if (\n                requirements(\n                    s.reserveDepositorQueue,\n                    s.isReserveDepositor,\n                    _address\n                )\n            ) {\n                s.reserveDepositorQueue[_address] = 0;\n                if (!listContains(s.reserveDepositors, _address)) {\n                    s.reserveDepositors.push(_address);\n                }\n            }\n            _result = !s.isReserveDepositor[_address];\n            s.isReserveDepositor[_address] = _result;\n        } else if (_managing == MANAGING.RESERVESPENDER) {\n            // 1\n            if (\n                requirements(\n                    s.reserveSpenderQueue,\n                    s.isReserveSpender,\n                    _address\n                )\n            ) {\n                s.reserveSpenderQueue[_address] = 0;\n                if (!listContains(s.reserveSpenders, _address)) {\n                    s.reserveSpenders.push(_address);\n                }\n            }\n            _result = !s.isReserveSpender[_address];\n            s.isReserveSpender[_address] = _result;\n        } else if (_managing == MANAGING.RESERVETOKEN) {\n            // 2\n            if (requirements(s.reserveTokenQueue, s.isReserveToken, _address)) {\n                s.reserveTokenQueue[_address] = 0;\n                if (!listContains(s.reserveTokens, _address)) {\n                    s.reserveTokens.push(_address);\n                }\n            }\n            _result = !s.isReserveToken[_address];\n            s.isReserveToken[_address] = _result;\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\n            // 3\n            if (\n                requirements(\n                    s.ReserveManagerQueue,\n                    s.isReserveManager,\n                    _address\n                )\n            ) {\n                s.reserveManagers.push(_address);\n                s.ReserveManagerQueue[_address] = 0;\n                if (!listContains(s.reserveManagers, _address)) {\n                    s.reserveManagers.push(_address);\n                }\n            }\n            _result = !s.isReserveManager[_address];\n            s.isReserveManager[_address] = _result;\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\n            // 4\n            if (\n                requirements(\n                    s.LiquidityDepositorQueue,\n                    s.isLiquidityDepositor,\n                    _address\n                )\n            ) {\n                s.liquidityDepositors.push(_address);\n                s.LiquidityDepositorQueue[_address] = 0;\n                if (!listContains(s.liquidityDepositors, _address)) {\n                    s.liquidityDepositors.push(_address);\n                }\n            }\n            _result = !s.isLiquidityDepositor[_address];\n            s.isLiquidityDepositor[_address] = _result;\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\n            // 5\n            if (\n                requirements(\n                    s.LiquidityTokenQueue,\n                    s.isLiquidityToken,\n                    _address\n                )\n            ) {\n                s.LiquidityTokenQueue[_address] = 0;\n                if (!listContains(s.liquidityTokens, _address)) {\n                    s.liquidityTokens.push(_address);\n                }\n            }\n            _result = !s.isLiquidityToken[_address];\n            s.isLiquidityToken[_address] = _result;\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\n            // 6\n            if (\n                requirements(\n                    s.LiquidityManagerQueue,\n                    s.isLiquidityManager,\n                    _address\n                )\n            ) {\n                s.LiquidityManagerQueue[_address] = 0;\n                if (!listContains(s.liquidityManagers, _address)) {\n                    s.liquidityManagers.push(_address);\n                }\n            }\n            _result = !s.isLiquidityManager[_address];\n            s.isLiquidityManager[_address] = _result;\n        } else if (_managing == MANAGING.DEBTOR) {\n            // 7\n            if (requirements(s.debtorQueue, s.isDebtor, _address)) {\n                s.debtorQueue[_address] = 0;\n                if (!listContains(s.debtors, _address)) {\n                    s.debtors.push(_address);\n                }\n            }\n            _result = !s.isDebtor[_address];\n            s.isDebtor[_address] = _result;\n        } else if (_managing == MANAGING.REWARDMANAGER) {\n            // 8\n            if (\n                requirements(s.rewardManagerQueue, s.isRewardManager, _address)\n            ) {\n                s.rewardManagerQueue[_address] = 0;\n                if (!listContains(s.rewardManagers, _address)) {\n                    s.rewardManagers.push(_address);\n                }\n            }\n            _result = !s.isRewardManager[_address];\n            s.isRewardManager[_address] = _result;\n        } else if (_managing == MANAGING.NNECC) {\n            // 9\n            s.sNeccQueue = 0;\n            s.sNecc = _address;\n            _result = true;\n        } else return false;\n\n        emit ChangeActivated(_managing, _address, _result);\n        return true;\n    }\n\n    /**\n        @notice checks requirements and returns altered structs\n        @param queue_ mapping( address => uint )\n        @param status_ mapping( address => bool )\n        @param _address address\n        @return bool \n     */\n    function requirements(\n        mapping(address => uint256) storage queue_,\n        mapping(address => bool) storage status_,\n        address _address\n    ) internal view returns (bool) {\n        if (!status_[_address]) {\n            require(queue_[_address] != 0, \"Must queue\");\n            require(queue_[_address] <= block.number, \"Queue not expired\");\n            return true;\n        }\n        return false;\n    }\n\n    /**\n        @notice checks array to ensure against duplicate\n        @param _list address[]\n        @param _token address\n        @return bool\n     */\n    function listContains(address[] storage _list, address _token)\n        internal\n        view\n        returns (bool)\n    {\n        for (uint256 i = 0; i < _list.length; i++) {\n            if (_list[i] == _token) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/lib/LibsNeccStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./LibDiamond.sol\";\n\ninterface IOracle {\n    function getPrice(address _pool) external returns (uint256);\n}\n\nuint256 constant MAX_UINT256 = ~uint256(0);\nuint256 constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\n// TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n// Use the highest value that fits in a uint256 for max granularity.\nuint256 constant TOTAL_GONS = MAX_UINT256 -\n    (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n// MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\nuint256 constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\nlibrary LibsNeccStorage {\n    using SafeMath for uint256;\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n\n    struct Layout {\n        uint256 INDEX; // Index Gons - tracks rebase growth\n        address stakingContract; // balance used to calc rebase\n        IOracle oracle; // pulls price from pool\n        address pool;\n        Rebase[] rebases; // past rebase data\n        uint256 _gonsPerFragment;\n        mapping(address => uint256) _gonBalances;\n        mapping(address => mapping(address => uint256)) _allowedValue;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256(\"necc.dao.sNecc.storage\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function _onlyStakingContract(Layout storage n) internal view {\n        require(msg.sender == n.stakingContract, \"NDOL: only stakingContract\");\n    }\n\n    function _onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function _gov() internal view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function _setGov(address _newGov) internal {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n}\n"
    },
    "contracts/facets/sNecc/sNeccFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {ERC20, ERC20Extended} from \"@solidstate/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\";\nimport {ERC20MetadataStorage} from \"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\";\nimport {ERC20BaseStorage} from \"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\";\nimport \"../../lib/LibsNeccStorage.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract sNeccFacet is ERC20, ERC20Permit {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using LibsNeccStorage for LibsNeccStorage.Layout;\n    using SafeMath for uint256;\n\n    event LogSupply(\n        uint256 indexed epoch,\n        uint256 timestamp,\n        uint256 totalSupply\n    );\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    function initialize(address _stakingContract) external {\n        LibsNeccStorage._onlyGov();\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n\n        s.setName(\"Staked Necc\");\n        s.setSymbol(\"sNECC\");\n        s.setDecimals(9);\n        b.totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        n._gonsPerFragment = TOTAL_GONS.div(b.totalSupply);\n        n.stakingContract = _stakingContract;\n        n._gonBalances[n.stakingContract] = TOTAL_GONS;\n\n        emit Transfer(address(0x0), _stakingContract, b.totalSupply);\n        emit LogStakingContractUpdated(_stakingContract);\n    }\n\n    function setGov(address _newOwner) public {\n        LibsNeccStorage._setGov(_newOwner);\n    }\n\n    function gov() public view returns (address) {\n        return LibsNeccStorage._gov();\n    }\n\n    function stakingContract() public view returns (address) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n\n        return n.stakingContract;\n    }\n\n    /**\n        @notice increases sNecc supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\n        n._onlyStakingContract();\n\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, block.timestamp, b.totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return b.totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = profit_.mul(b.totalSupply).div(circulatingSupply_);\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        b.totalSupply = b.totalSupply.add(rebaseAmount);\n\n        if (b.totalSupply > MAX_SUPPLY) {\n            b.totalSupply = MAX_SUPPLY;\n        }\n        n._gonsPerFragment = TOTAL_GONS.div(b.totalSupply);\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return b.totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n        @return bool\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal returns (bool) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\n\n        n.rebases.push(\n            LibsNeccStorage.Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, block.timestamp, b.totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        override\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            allowance(msg.sender, spender).add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        override\n        returns (bool)\n    {\n        uint256 oldValue = allowance(msg.sender, spender);\n        if (subtractedValue >= oldValue) {\n            _approve(msg.sender, spender, 0);\n        } else {\n            _approve(msg.sender, spender, oldValue.sub(subtractedValue));\n        }\n        return true;\n    }\n\n    function transfer(address to, uint256 value)\n        public\n        override\n        returns (bool)\n    {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        uint256 gonValue = value.mul(n._gonsPerFragment);\n\n        n._gonBalances[msg.sender] = n._gonBalances[msg.sender].sub(gonValue);\n        n._gonBalances[to] = n._gonBalances[to].add(gonValue);\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override returns (bool) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        decreaseAllowance(to, value);\n        emit Approval(from, msg.sender, allowance(msg.sender, to));\n\n        uint256 gonValue = gonsForBalance(value);\n        n._gonBalances[from] = n._gonBalances[from].sub(gonValue);\n        n._gonBalances[to] = n._gonBalances[to].add(gonValue);\n\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function balanceOf(address who) public view override returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        return n._gonBalances[who].div(n._gonsPerFragment);\n    }\n\n    function gonsForBalance(uint256 amount) public view returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        return amount.mul(n._gonsPerFragment);\n    }\n\n    function balanceForGons(uint256 gons) public view returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        return gons.div(n._gonsPerFragment);\n    }\n\n    // Staking contract holds excess sNecc\n    function circulatingSupply() public view returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        ERC20BaseStorage.Layout storage b = ERC20BaseStorage.layout();\n\n        return b.totalSupply.sub(balanceOf(n.stakingContract));\n    }\n\n    function index() public view returns (uint256) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        return balanceForGons(n.INDEX);\n    }\n\n    function setIndex(uint256 _INDEX) external returns (bool) {\n        LibsNeccStorage.Layout storage n = LibsNeccStorage.layout();\n        require(n.INDEX == 0, \"Index already set\");\n        n.INDEX = gonsForBalance(_INDEX);\n        return true;\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ERC20Base } from './base/ERC20Base.sol';\nimport { ERC20Extended } from './extended/ERC20Extended.sol';\nimport { ERC20Metadata } from './metadata/ERC20Metadata.sol';\n\n/**\n * @title SolidState ERC20 implementation, including recommended extensions\n */\nabstract contract ERC20 is ERC20Base, ERC20Extended, ERC20Metadata {\n\n}\n"
    },
    "@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { ECDSA } from '../../../cryptography/ECDSA.sol';\nimport { ERC20Base } from '../base/ERC20Base.sol';\nimport { ERC20Metadata } from '../metadata/ERC20Metadata.sol';\nimport { ERC20PermitStorage } from './ERC20PermitStorage.sol';\nimport { IERC2612 } from './IERC2612.sol';\n\n/**\n * @title ERC20 extension with support for ERC2612 permits\n * @dev derived from https://github.com/soliditylabs/ERC20-Permit (MIT license)\n */\nabstract contract ERC20Permit is IERC2612, ERC20Base, ERC20Metadata {\n    using ECDSA for bytes32;\n\n    /**\n     * @inheritdoc IERC2612\n     * @dev If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\n     * EIP712 Domain Separator is automatically recalculated.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, 'ERC20Permit: expired deadline');\n\n        // Assembly for more efficiently computing:\n        // bytes32 hashStruct = keccak256(\n        //   abi.encode(\n        //     _PERMIT_TYPEHASH,\n        //     owner,\n        //     spender,\n        //     amount,\n        //     _nonces[owner].current(),\n        //     deadline\n        //   )\n        // );\n\n        bytes32 hashStruct;\n        uint256 nonce = ERC20PermitStorage.layout().nonces[owner];\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n            mstore(\n                memPtr,\n                0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n            )\n            mstore(add(memPtr, 32), owner)\n            mstore(add(memPtr, 64), spender)\n            mstore(add(memPtr, 96), amount)\n            mstore(add(memPtr, 128), nonce)\n            mstore(add(memPtr, 160), deadline)\n\n            hashStruct := keccak256(memPtr, 192)\n        }\n\n        bytes32 eip712DomainHash = _domainSeparator();\n\n        // Assembly for more efficient computing:\n        // bytes32 hash = keccak256(\n        //   abi.encodePacked(uint16(0x1901), eip712DomainHash, hashStruct)\n        // );\n\n        bytes32 hash;\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(\n                memPtr,\n                0x1901000000000000000000000000000000000000000000000000000000000000\n            ) // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash) // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\n\n            hash := keccak256(memPtr, 66)\n        }\n\n        address signer = hash.recover(v, r, s);\n\n        require(signer == owner, 'ERC20Permit: invalid signature');\n\n        ERC20PermitStorage.layout().nonces[owner]++;\n        _approve(owner, spender, amount);\n    }\n\n    /**\n     * @dev inhertidoc IERC2612\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return ERC20PermitStorage.layout().nonces[owner];\n    }\n\n    /**\n     * @notice update domain separator for new chain ID\n     * @return new domain separator\n     */\n    function _updateDomainSeparator() private returns (bytes32) {\n        uint256 chainId = _chainId();\n\n        // no need for assembly, running very rarely\n        bytes32 newDomainSeparator = keccak256(\n            abi.encode(\n                keccak256(\n                    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\n                ),\n                keccak256(bytes(name())), // ERC-20 Name\n                keccak256(bytes('1')), // Version\n                chainId,\n                address(this)\n            )\n        );\n\n        ERC20PermitStorage.layout().domainSeparators[\n            chainId\n        ] = newDomainSeparator;\n\n        return newDomainSeparator;\n    }\n\n    /**\n     * @notice update chain ID if changed and return domain separator\n     * @return domain separator\n     */\n    function _domainSeparator() private returns (bytes32) {\n        bytes32 domainSeparator = ERC20PermitStorage.layout().domainSeparators[\n            _chainId()\n        ];\n\n        if (domainSeparator != 0x00) {\n            return domainSeparator;\n        }\n\n        return _updateDomainSeparator();\n    }\n\n    /**\n     * @notice get the current chain ID\n     * @return chainId chain ID\n     */\n    function _chainId() private view returns (uint256 chainId) {\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary ERC20MetadataStorage {\n    struct Layout {\n        string name;\n        string symbol;\n        uint8 decimals;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('solidstate.contracts.storage.ERC20Metadata');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setName(Layout storage l, string memory name) internal {\n        l.name = name;\n    }\n\n    function setSymbol(Layout storage l, string memory symbol) internal {\n        l.symbol = symbol;\n    }\n\n    function setDecimals(Layout storage l, uint8 decimals) internal {\n        l.decimals = decimals;\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary ERC20BaseStorage {\n    struct Layout {\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        uint256 totalSupply;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('solidstate.contracts.storage.ERC20Base');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/base/ERC20Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '../IERC20.sol';\nimport { ERC20BaseInternal } from './ERC20BaseInternal.sol';\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\n\n/**\n * @title Base ERC20 implementation, excluding optional extensions\n */\nabstract contract ERC20Base is IERC20, ERC20BaseInternal {\n    /**\n     * @inheritdoc IERC20\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply();\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balanceOf(account);\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function allowance(address holder, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return ERC20BaseStorage.layout().allowances[holder][spender];\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function transferFrom(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = ERC20BaseStorage.layout().allowances[holder][\n            msg.sender\n        ];\n        require(\n            currentAllowance >= amount,\n            'ERC20: transfer amount exceeds allowance'\n        );\n        unchecked {\n            _approve(holder, msg.sender, currentAllowance - amount);\n        }\n        _transfer(holder, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/extended/ERC20Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ERC20Base, ERC20BaseStorage } from '../base/ERC20Base.sol';\n\n/**\n * @title ERC20 safe approval extensions\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\n */\nabstract contract ERC20Extended is ERC20Base {\n    /**\n     * @notice increase spend amount granted to spender\n     * @param spender address whose allowance to increase\n     * @param amount quantity by which to increase allowance\n     * @return success status (always true; otherwise function will revert)\n     */\n    function increaseAllowance(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        unchecked {\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\n                .layout()\n                .allowances[msg.sender];\n\n            uint256 allowance = allowances[spender];\n            require(\n                allowance + amount >= allowance,\n                'ERC20Extended: excessive allowance'\n            );\n\n            _approve(\n                msg.sender,\n                spender,\n                allowances[spender] = allowance + amount\n            );\n\n            return true;\n        }\n    }\n\n    /**\n     * @notice decrease spend amount granted to spender\n     * @param spender address whose allowance to decrease\n     * @param amount quantity by which to decrease allowance\n     * @return success status (always true; otherwise function will revert)\n     */\n    function decreaseAllowance(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        unchecked {\n            mapping(address => uint256) storage allowances = ERC20BaseStorage\n                .layout()\n                .allowances[msg.sender];\n\n            uint256 allowance = allowances[spender];\n            require(\n                amount <= allowance,\n                'ERC20Extended: insufficient allowance'\n            );\n\n            _approve(\n                msg.sender,\n                spender,\n                allowances[spender] = allowance - amount\n            );\n\n            return true;\n        }\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/metadata/ERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ERC20MetadataStorage } from './ERC20MetadataStorage.sol';\nimport { IERC20Metadata } from './IERC20Metadata.sol';\n\n/**\n * @title ERC20 metadata extensions\n */\nabstract contract ERC20Metadata is IERC20Metadata {\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function name() public view virtual override returns (string memory) {\n        return ERC20MetadataStorage.layout().name;\n    }\n\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return ERC20MetadataStorage.layout().symbol;\n    }\n\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return ERC20MetadataStorage.layout().decimals;\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20Internal } from './IERC20Internal.sol';\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 is IERC20Internal {\n    /**\n     * @notice query the total minted token supply\n     * @return token supply\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice query the token balance of given account\n     * @param account address to query\n     * @return token balance\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @notice query the allowance granted from given holder to given spender\n     * @param holder approver of allowance\n     * @param spender recipient of allowance\n     * @return token allowance\n     */\n    function allowance(address holder, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice grant approval to spender to spend tokens\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\n     * @param spender recipient of allowance\n     * @param amount quantity of tokens approved for spending\n     * @return success status (always true; otherwise function should revert)\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice transfer tokens to given recipient\n     * @param recipient beneficiary of token transfer\n     * @param amount quantity of tokens to transfer\n     * @return success status (always true; otherwise function should revert)\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @notice transfer tokens to given recipient on behalf of given holder\n     * @param holder holder of tokens prior to transfer\n     * @param recipient beneficiary of token transfer\n     * @param amount quantity of tokens to transfer\n     * @return success status (always true; otherwise function should revert)\n     */\n    function transferFrom(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@solidstate/contracts/token/ERC20/base/ERC20BaseInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20Internal } from '../IERC20Internal.sol';\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\n\n/**\n * @title Base ERC20 implementation, excluding optional extensions\n */\nabstract contract ERC20BaseInternal is IERC20Internal {\n    /**\n     * @notice query the total minted token supply\n     * @return token supply\n     */\n    function _totalSupply() internal view virtual returns (uint256) {\n        return ERC20BaseStorage.layout().totalSupply;\n    }\n\n    /**\n     * @notice query the token balance of given account\n     * @param account address to query\n     * @return token balance\n     */\n    function _balanceOf(address account)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        return ERC20BaseStorage.layout().balances[account];\n    }\n\n    /**\n     * @notice enable spender to spend tokens on behalf of holder\n     * @param holder address on whose behalf tokens may be spent\n     * @param spender recipient of allowance\n     * @param amount quantity of tokens approved for spending\n     */\n    function _approve(\n        address holder,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(holder != address(0), 'ERC20: approve from the zero address');\n        require(spender != address(0), 'ERC20: approve to the zero address');\n\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\n\n        emit Approval(holder, spender, amount);\n    }\n\n    /**\n     * @notice mint tokens for given account\n     * @param account recipient of minted tokens\n     * @param amount quantity of tokens minted\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\n        l.totalSupply += amount;\n        l.balances[account] += amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @notice burn tokens held by given account\n     * @param account holder of burned tokens\n     * @param amount quantity of tokens burned\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: burn from the zero address');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\n        uint256 balance = l.balances[account];\n        require(balance >= amount, 'ERC20: burn amount exceeds balance');\n        unchecked {\n            l.balances[account] = balance - amount;\n        }\n        l.totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @notice transfer tokens from holder to recipient\n     * @param holder owner of tokens to be transferred\n     * @param recipient beneficiary of transfer\n     * @param amount quantity of tokens transferred\n     */\n    function _transfer(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(holder != address(0), 'ERC20: transfer from the zero address');\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\n\n        _beforeTokenTransfer(holder, recipient, amount);\n\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\n        uint256 holderBalance = l.balances[holder];\n        require(\n            holderBalance >= amount,\n            'ERC20: transfer amount exceeds balance'\n        );\n        unchecked {\n            l.balances[holder] = holderBalance - amount;\n        }\n        l.balances[recipient] += amount;\n\n        emit Transfer(holder, recipient, amount);\n    }\n\n    /**\n     * @notice ERC20 hook, called before all transfers including mint and burn\n     * @dev function should be overridden and new implementation must call super\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param amount quantity of tokens transferred\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@solidstate/contracts/token/ERC20/IERC20Internal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Partial ERC20 interface needed by internal functions\n */\ninterface IERC20Internal {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 metadata interface\n */\ninterface IERC20Metadata {\n    /**\n     * @notice return token name\n     * @return token name\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice return token symbol\n     * @return token symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice return token decimals, generally used only for display purposes\n     * @return token decimals\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@solidstate/contracts/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Elliptic Curve Digital Signature Algorithm (ECDSA) operations\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\n */\nlibrary ECDSA {\n    /**\n     * @notice recover signer of hashed message from signature\n     * @param hash hashed data payload\n     * @param signature signed data payload\n     * @return recovered message signer\n     */\n    function recover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address)\n    {\n        require(signature.length == 65, 'ECDSA: invalid signature length');\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @notice recover signer of hashed message from signature v, r, and s values\n     * @param hash hashed data payload\n     * @param v signature \"v\" value\n     * @param r signature \"r\" value\n     * @param s signature \"s\" value\n     * @return recovered message signer\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <=\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), 'ECDSA: invalid signature');\n\n        return signer;\n    }\n\n    /**\n     * @notice generate an \"Ethereum Signed Message\" in the format returned by the eth_sign JSON-RPC method\n     * @param hash hashed data payload\n     * @return signed message hash\n     */\n    function toEthSignedMessageHash(bytes32 hash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked('\\x19Ethereum Signed Message:\\n32', hash)\n            );\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/permit/ERC20PermitStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary ERC20PermitStorage {\n    struct Layout {\n        mapping(address => uint256) nonces;\n        // Mapping of ChainID to domain separators. This is a very gas efficient way\n        // to not recalculate the domain separator on every call, while still\n        // automatically detecting ChainID changes.\n        mapping(uint256 => bytes32) domainSeparators;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('solidstate.contracts.storage.ERC20Permit');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@solidstate/contracts/token/ERC20/permit/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @notice ERC2612 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    /**\n     * @notice approve spender to transfer tokens held by owner via signature\n     * @dev this function may be vulnerable to approval replay attacks\n     * @param owner holder of tokens and signer of permit\n     * @param spender beneficiary of approval\n     * @param amount quantity of tokens to approve\n     * @param v secp256k1 'v' value\n     * @param r secp256k1 'r' value\n     * @param s secp256k1 's' value\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @notice get the current ERC2612 nonce for the given address\n     * @return current nonce\n     */\n    function nonces(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/facets/nNecc/nNeccFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {ERC20, ERC20Extended} from \"@solidstate/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\";\nimport {ERC20MetadataStorage} from \"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\";\nimport {ERC20BaseStorage} from \"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\";\nimport \"../../lib/LibnNeccStorage.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface InNecc is IERC20 {\n    function rebase(uint256 neccProfit_, uint256 epoch_)\n        external\n        returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view override returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n}\n\ncontract nNeccFacet is ERC20, ERC20Permit {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using LibnNeccStorage for LibnNeccStorage.Layout;\n    using SafeMath for uint256;\n\n    function initialize(address _stakingContract, address _sNecc) external {\n        LibnNeccStorage._onlyGov();\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\n        LibnNeccStorage.Layout storage n = LibnNeccStorage.layout();\n\n        s.setName(\"Wrapped Staked Necc\");\n        s.setSymbol(\"nNecc\");\n        s.setDecimals(18);\n        n.stakingContract = _stakingContract;\n        n.sNecc = _sNecc;\n    }\n\n    function setGov(address _newOwner) public {\n        LibnNeccStorage._setGov(_newOwner);\n    }\n\n    function gov() public view returns (address) {\n        return LibnNeccStorage._gov();\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        LibnNeccStorage.Layout storage n = LibnNeccStorage.layout();\n        n._onlyStakingContract();\n\n        _mint(_to, _amount);\n    }\n\n    /**\n        @notice burn nNecc\n        @param _from address\n        @param _amount uint\n     */\n    function burn(address _from, uint256 _amount) external {\n        LibnNeccStorage.Layout storage n = LibnNeccStorage.layout();\n        n._onlyStakingContract();\n\n        _burn(_from, _amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice pull index from sNecc token\n     */\n    function index() public view returns (uint256) {\n        LibnNeccStorage.Layout storage n = LibnNeccStorage.layout();\n        return InNecc(n.sNecc).index();\n    }\n\n    /**\n        @notice converts nNecc amount to OHM\n        @param _amount uint\n        @return uint\n     */\n    function balanceFrom(uint256 _amount) public view returns (uint256) {\n        return _amount.mul(index()).div(10**decimals());\n    }\n\n    /**\n        @notice converts OHM amount to nNecc\n        @param _amount uint\n        @return uint\n     */\n    function balanceTo(uint256 _amount) public view returns (uint256) {\n        return _amount.mul(10**decimals()).div(index());\n    }\n\n    function stakingContract() public view returns (address) {\n        LibnNeccStorage.Layout storage n = LibnNeccStorage.layout();\n\n        return n.stakingContract;\n    }\n}\n"
    },
    "contracts/lib/LibnNeccStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./LibDiamond.sol\";\n\nlibrary LibnNeccStorage {\n    using SafeMath for uint256;\n\n    struct Layout {\n        address sNecc; // staked necc\n        address stakingContract; // staked necc\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256(\"necc.dao.nNecc.storage\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function _onlyStakingContract(Layout storage n) internal view {\n        require(msg.sender == n.stakingContract, \"NDOL: only stakingContract\");\n    }\n\n    function _onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function _gov() internal view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function _setGov(address _newGov) internal {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n}\n"
    },
    "contracts/facets/Necc/NeccFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {ERC20, ERC20Extended} from \"@solidstate/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\";\nimport {ERC20MetadataStorage} from \"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\";\nimport {ERC20BaseStorage} from \"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\";\nimport {LibNeccStorage} from \"../../lib/LibNeccStorage.sol\";\n\ncontract NeccFacet is ERC20, ERC20Permit {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using LibNeccStorage for LibNeccStorage.Layout;\n\n    function initialize(address _vault) external {\n        LibNeccStorage._onlyGov();\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\n\n        s.setName(\"Necc\");\n        s.setSymbol(\"NECC\");\n        s.setDecimals(9);\n        n._addVault(_vault);\n    }\n\n    function setGov(address _newOwner) public {\n        LibNeccStorage._setGov(_newOwner);\n    }\n\n    function gov() public view returns (address) {\n        return LibNeccStorage._gov();\n    }\n\n    function vaults(address vault) public view returns (bool) {\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\n        return n._vaults(vault);\n    }\n\n    function addVault(address _vault) external {\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\n        n._addVault(_vault);\n    }\n\n    function removeVault(address _vault) external {\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\n        n._removeVault(_vault);\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        LibNeccStorage.Layout storage n = LibNeccStorage.layout();\n        n._onlyVaults(msg.sender);\n        _mint(_account, _amount);\n    }\n\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address _account, uint256 _amount) public virtual {\n        _burnFrom(_account, _amount);\n    }\n\n    function _burnFrom(address _account, uint256 _amount) internal {\n        decreaseAllowance(_account, _amount);\n        _burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/lib/LibNeccStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./LibDiamond.sol\";\n\nlibrary LibNeccStorage {\n    struct Layout {\n        mapping(address => bool) vaults;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"necc.dao.necc.storage\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function _onlyVaults(Layout storage n, address _vault) internal view {\n        require(n.vaults[_vault], \"NDOL: only vaults\");\n    }\n\n    function _onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function _gov() internal view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function _addVault(Layout storage n, address _vault) internal {\n        _onlyGov();\n        n.vaults[_vault] = true;\n    }\n\n    function _removeVault(Layout storage n, address _vault) internal {\n        _onlyGov();\n        n.vaults[_vault] = false;\n    }\n\n    function _setGov(address _newGov) internal {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n\n    function _vaults(Layout storage n, address vault)\n        internal\n        view\n        returns (bool)\n    {\n        return n.vaults[vault];\n    }\n}\n"
    },
    "contracts/facets/Ndol/NdolFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"@solidstate/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\";\nimport {ERC20MetadataStorage} from \"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\";\nimport {LibNdolStorage} from \"../../lib/LibNdolStorage.sol\";\n\ncontract NdolFacet is ERC20, ERC20Permit {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using LibNdolStorage for LibNdolStorage.Layout;\n\n    function initialize(address _vault) external {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        ERC20MetadataStorage.Layout storage s = ERC20MetadataStorage.layout();\n        LibNdolStorage._onlyGov();\n\n        s.setName(\"Necc Dollars\");\n        s.setSymbol(\"NDOL\");\n        s.setDecimals(18);\n        n._addVault(_vault);\n    }\n\n    function addVault(address _vault) external {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        n._addVault(_vault);\n    }\n\n    function removeVault(address _vault) external {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        n._removeVault(_vault);\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        n._onlyVaults(msg.sender);\n        _mint(_account, _amount);\n    }\n\n    function burn(address _account, uint256 _amount) external {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        n._onlyVaults(msg.sender);\n        _burn(_account, _amount);\n    }\n\n    function setGov(address _newOwner) public {\n        LibNdolStorage._setGov(_newOwner);\n    }\n\n    function gov() public view returns (address) {\n        return LibNdolStorage._gov();\n    }\n\n    function vaults(address vault) public view returns (bool) {\n        LibNdolStorage.Layout storage n = LibNdolStorage.layout();\n        return n._vaults(vault);\n    }\n}\n"
    },
    "contracts/lib/LibNdolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./LibDiamond.sol\";\n\nlibrary LibNdolStorage {\n    struct Layout {\n        mapping(address => bool) vaults;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"necc.dao.ndol.storage\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function _onlyVaults(Layout storage n, address _vault) internal view {\n        require(n.vaults[_vault], \"NDOL: only vaults\");\n    }\n\n    function _onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function _gov() internal view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function _addVault(Layout storage n, address _vault) internal {\n        _onlyGov();\n        n.vaults[_vault] = true;\n    }\n\n    function _removeVault(Layout storage n, address _vault) internal {\n        _onlyGov();\n        n.vaults[_vault] = false;\n    }\n\n    function _setGov(address _newGov) internal {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n\n    function _vaults(Layout storage n, address vault)\n        internal\n        view\n        returns (bool)\n    {\n        return n.vaults[vault];\n    }\n}\n"
    },
    "contracts/facets/Router/RouterLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../tokens/interfaces/IWETH.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../Vault/VaultLib.sol\";\n\nlibrary RouterLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using RouterLib for LibExchangeStorage.Storage;\n\n    function _transferETHToVault(LibExchangeStorage.Storage storage s)\n        internal\n    {\n        IWETH(s.weth).deposit{value: msg.value}();\n        IERC20(s.weth).safeTransfer(address(this), msg.value);\n    }\n\n    function _transferOutETH(\n        LibExchangeStorage.Storage storage s,\n        uint256 _amountOut,\n        address payable _receiver\n    ) internal {\n        IWETH(s.weth).withdraw(_amountOut);\n\n        _sendValue(s, _receiver, _amountOut);\n    }\n\n    function _sendValue(\n        LibExchangeStorage.Storage storage,\n        address payable _recipient,\n        uint256 amount\n    ) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = _recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, _crecipient may have reverted\"\n        );\n    }\n\n    function _swap(\n        LibExchangeStorage.Storage storage s,\n        address[] memory _path,\n        uint256 _minOut,\n        address _receiver\n    ) internal returns (uint256) {\n        if (_path.length == 2) {\n            return s._vaultSwap(_path[0], _path[1], _minOut, _receiver);\n        }\n\n        revert(\"Router: invalid _path.length\");\n    }\n\n    function _vaultSwap(\n        LibExchangeStorage.Storage storage s,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _minOut,\n        address _receiver\n    )\n        internal\n        returns (\n            // uint256 _amountIn\n            uint256\n        )\n    {\n        uint256 _amountOut;\n\n        if (_tokenOut == s.ndol) {\n            // buyNDOL\n            _amountOut = IVault(address(this)).buyNDOL(_tokenIn, _receiver);\n        } else if (_tokenIn == s.ndol) {\n            // sellNDOL\n            _amountOut = IVault(address(this)).sellNDOL(_tokenOut, _receiver);\n        } else {\n            // swap\n            _amountOut = IVault(address(this)).swap(\n                _tokenIn,\n                _tokenOut,\n                _receiver\n            );\n        }\n\n        require(_amountOut >= _minOut, \"Router: insufficient amountOut\");\n\n        return _amountOut;\n    }\n\n    function _sender() private view returns (address) {\n        return msg.sender;\n    }\n\n    function _increasePosition(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) internal {\n        if (_isLong) {\n            require(\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\n                \"Router: mark price higher than limit\"\n            );\n        } else {\n            require(\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\n                \"Router: mark price lower than limit\"\n            );\n        }\n\n        IVault(address(this)).increasePosition(\n            _sender(),\n            _collateralToken,\n            _indexToken,\n            _sizeDelta,\n            _isLong\n        );\n    }\n\n    function _decreasePosition(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver,\n        uint256 _price\n    ) internal returns (uint256) {\n        if (_isLong) {\n            require(\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\n                \"Router: mark price lower than limit\"\n            );\n        } else {\n            require(\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\n                \"Router: mark price higher than limit\"\n            );\n        }\n\n        uint256 _amountOut = IVault(address(this)).decreasePosition(\n            _sender(),\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver\n        );\n\n        return _amountOut;\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IWETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/facets/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IVault {\n    function getRedemptionCollateralUsd(address _token)\n        external\n        view\n        returns (uint256);\n\n    function setIsMintingEnabled(bool _isMintingEnabled) external;\n\n    function setFees(\n        uint256 _swapFeeBasisPoints,\n        uint256 _marginFeeBasisPoints,\n        uint256 _liquidationFeeUsd\n    ) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function setMaxNDOL(uint256 _maxNDOLBatchSize, uint256 _maxNDOLBuffer)\n        external;\n\n    function directPoolDeposit(address _token) external;\n\n    function buyNDOL(address _token, address _receiver)\n        external\n        returns (uint256);\n\n    function sellNDOL(address _token, address _receiver)\n        external\n        returns (uint256);\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external;\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256);\n\n    function priceFeed() external view returns (address);\n\n    function fundingRateFactor() external view returns (uint256);\n\n    function cumulativeFundingRates(address _token)\n        external\n        view\n        returns (uint256);\n\n    function getNextFundingRate(address _token) external view returns (uint256);\n\n    function BASIS_POINTS_DIVISOR() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function feeReserves(address _token) external view returns (uint256);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function guaranteedUsd(address _token) external view returns (uint256);\n\n    function poolAmounts(address _token) external view returns (uint256);\n\n    function reservedAmounts(address _token) external view returns (uint256);\n\n    function ndolAmounts(address _token) external view returns (uint256);\n\n    function getRedemptionAmount(address _token, uint256 _ndolAmount)\n        external\n        view\n        returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function getUtilisation(address _token) external view returns (uint256);\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) external view returns (bool, uint256);\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        );\n\n    function adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) external view returns (uint256);\n\n    function withdrawFees(address _token, address _receiver)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/facets/Reader/ReaderFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../../amm/interfaces/IUniswapV2Factory.sol\";\nimport \"../Vault/VaultLib.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract ReaderFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function getMaxAmountIn(\n        IVault,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint256) {\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n        uint256 poolAmount = s.poolAmounts[_tokenOut];\n        uint256 reservedAmount = s.reservedAmounts[_tokenOut];\n        uint256 availableAmount = poolAmount.sub(reservedAmount);\n        uint256 _amountIn = availableAmount.mul(priceOut).div(priceIn);\n\n        return VaultLib.adjustForDecimals(s, _amountIn, _tokenOut, _tokenIn);\n    }\n\n    function getAmountOut(\n        IVault,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) public view returns (uint256, uint256) {\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\n        uint256 amountOutAfterFees = amountOut\n            .mul(BASIS_POINTS_DIVISOR.sub(SWAP_FEE_BASIS_POINTS))\n            .div(BASIS_POINTS_DIVISOR);\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\n\n        return (amountOutAfterFees, feeAmount);\n    }\n\n    function getFees(address, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory amounts = new uint256[](_tokens.length);\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            amounts[i] = s.feeReserves[_tokens[i]];\n        }\n\n        return amounts;\n    }\n\n    // TODO: getTotalContributedCollateral()\n\n    function getPairInfo(address _factory, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 inputLength = 2;\n        uint256 propsLength = 2;\n        uint256[] memory amounts = new uint256[](\n            (_tokens.length / inputLength) * propsLength\n        );\n\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\n            address token0 = _tokens[i * inputLength];\n            address token1 = _tokens[i * inputLength + 1];\n            address pair = IUniswapV2Factory(_factory).getPair(token0, token1);\n\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\n        }\n\n        return amounts;\n    }\n\n    function getFundingRates(\n        address,\n        address _weth,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 2;\n        uint256[] memory fundingRates = new uint256[](\n            _tokens.length * propsLength\n        );\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                token = _weth;\n            }\n\n            uint256 reservedAmount = s.reservedAmounts[token];\n            uint256 poolAmount = s.poolAmounts[token];\n\n            if (poolAmount > 0) {\n                fundingRates[i * propsLength] = FUNDING_RATE_FACTOR\n                    .mul(reservedAmount)\n                    .div(poolAmount);\n            }\n\n            if (s.cumulativeFundingRates[token] > 0) {\n                uint256 nextRate = VaultLib._getNextFundingRate(s, token);\n                uint256 baseRate = s.cumulativeFundingRates[token];\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\n            }\n        }\n\n        return fundingRates;\n    }\n\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 supply = _token.totalSupply();\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\n            address account = _excludedAccounts[i];\n            uint256 balance = _token.balanceOf(account);\n            supply = supply.sub(balance);\n        }\n\n        return supply;\n    }\n\n    function getTokenBalances(address _account, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory balances = new uint256[](_tokens.length);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                balances[i] = _account.balance;\n                continue;\n            }\n            balances[i] = IERC20(token).balanceOf(_account);\n        }\n        return balances;\n    }\n\n    function getTokenBalancesWithSupplies(\n        address _account,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 2;\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                balances[i * propsLength] = _account.balance;\n                balances[i * propsLength + 1] = 0;\n                continue;\n            }\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\n        }\n        return balances;\n    }\n\n    function getVaultTokenInfo(\n        address,\n        address _weth,\n        uint256 _ndolAmount,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 9;\n\n        IVault vault = IVault(address(this));\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(address(this));\n\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                token = _weth;\n            }\n            if (token != s.ndol) {\n                amounts[i * propsLength] = s.poolAmounts[token];\n                amounts[i * propsLength + 1] = s.reservedAmounts[token];\n                amounts[i * propsLength + 2] = s.ndolAmounts[token];\n                amounts[i * propsLength + 3] = vault.getRedemptionAmount(\n                    token,\n                    _ndolAmount\n                );\n                amounts[i * propsLength + 4] = VaultLib.getMinPrice(\n                    token,\n                    s.includeAmmPrice\n                );\n                amounts[i * propsLength + 5] = VaultLib.getMaxPrice(\n                    token,\n                    s.includeAmmPrice\n                );\n                amounts[i * propsLength + 6] = s.guaranteedUsd[token];\n                amounts[i * propsLength + 7] = priceFeed.getPrice(\n                    token,\n                    false,\n                    false\n                );\n                amounts[i * propsLength + 8] = priceFeed.getPrice(\n                    token,\n                    true,\n                    false\n                );\n            }\n        }\n\n        return amounts;\n    }\n\n    function getPositions(\n        address,\n        address _account,\n        address[] memory _collateralTokens,\n        address[] memory _indexTokens,\n        bool[] memory _isLong\n    ) public view returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](\n            _collateralTokens.length * POSITION_PROPS_LENGTH\n        );\n\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\n            {\n                (\n                    uint256 size,\n                    uint256 collateral,\n                    uint256 averagePrice,\n                    uint256 entryFundingRate,\n                    ,\n                    /* reserveAmount */\n                    uint256 realisedPnl,\n                    bool hasRealisedProfit,\n                    uint256 lastIncreasedTime\n                ) = IVault(address(this)).getPosition(\n                        _account,\n                        _collateralTokens[i],\n                        _indexTokens[i],\n                        _isLong[i]\n                    );\n\n                amounts[i * POSITION_PROPS_LENGTH] = size;\n                amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\n                amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\n                amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\n                amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit\n                    ? 1\n                    : 0;\n                amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\n                amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\n            }\n\n            uint256 _size = amounts[i * POSITION_PROPS_LENGTH];\n            uint256 _averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\n            uint256 _lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\n            if (_averagePrice > 0) {\n                (bool hasProfit, uint256 delta) = IVault(address(this))\n                    .getDelta(\n                        _indexTokens[i],\n                        _size,\n                        _averagePrice,\n                        _isLong[i],\n                        _lastIncreasedTime\n                    );\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\n            }\n        }\n\n        return amounts;\n    }\n}\n"
    },
    "contracts/amm/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/facets/Router/RouterFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../Vault/VaultLib.sol\";\nimport \"./RouterLib.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract RouterFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Swap(\n        address account,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    receive() external payable {\n        require(msg.sender == s.weth, \"Router: invalid sender\");\n    }\n\n    function _sender() private view returns (address) {\n        return msg.sender;\n    }\n\n    function directPoolDeposit(address _token, uint256 _amount) external {\n        IERC20(_token).safeTransferFrom(_sender(), address(this), _amount);\n        IVault(address(this)).directPoolDeposit(_token);\n    }\n\n    function swap(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minOut,\n        address _receiver\n    ) external {\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\n        uint256 _amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\n\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            _amountIn,\n            _amountOut\n        );\n    }\n\n    function swapETHToTokens(\n        address[] memory _path,\n        uint256 _minOut,\n        address _receiver\n    ) external payable {\n        require(_path[0] == s.weth, \"Router: weth not first in _path\");\n        RouterLib._transferETHToVault(s);\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\n\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            msg.value,\n            amountOut\n        );\n    }\n\n    function swapTokensToETH(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minOut,\n        address payable _receiver\n    ) external {\n        require(_path[_path.length - 1] == s.weth, \"Router: invalid _path\");\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, address(this));\n        RouterLib._transferOutETH(s, amountOut, _receiver);\n\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            _amountIn,\n            amountOut\n        );\n    }\n\n    function increasePosition(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _amountIn,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) external {\n        if (_amountIn > 0) {\n            IERC20(_path[0]).safeTransferFrom(\n                _sender(),\n                address(this),\n                _amountIn\n            );\n        }\n        if (_path.length > 1 && _amountIn > 0) {\n            uint256 _amountOut = RouterLib._swap(\n                s,\n                _path,\n                _minOut,\n                address(this)\n            );\n            IERC20(_path[_path.length - 1]).safeTransfer(\n                address(this),\n                _amountOut\n            );\n        }\n        RouterLib._increasePosition(\n            s,\n            _path[_path.length - 1],\n            _indexToken,\n            _sizeDelta,\n            _isLong,\n            _price\n        );\n    }\n\n    function increasePositionETH(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) external payable {\n        require(_path[0] == s.weth, \"Router: invalid _path\");\n        if (msg.value > 0) {\n            RouterLib._transferETHToVault(s);\n        }\n        if (_path.length > 1 && msg.value > 0) {\n            uint256 _amountOut = RouterLib._swap(\n                s,\n                _path,\n                _minOut,\n                address(this)\n            );\n            IERC20(_path[_path.length - 1]).safeTransfer(\n                address(this),\n                _amountOut\n            );\n        }\n\n        RouterLib._increasePosition(\n            s,\n            _path[_path.length - 1],\n            _indexToken,\n            _sizeDelta,\n            _isLong,\n            _price\n        );\n    }\n\n    function decreasePosition(\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver,\n        uint256 _price\n    ) external {\n        RouterLib._decreasePosition(\n            s,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver,\n            _price\n        );\n    }\n\n    function decreasePositionETH(\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address payable _receiver,\n        uint256 _price\n    ) external {\n        uint256 _amountOut = RouterLib._decreasePosition(\n            s,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            address(this),\n            _price\n        );\n\n        RouterLib._transferOutETH(s, _amountOut, _receiver);\n    }\n}\n"
    },
    "contracts/facets/Bond/BondConfigFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./BondDepositoryLib.sol\";\nimport \"./Facet.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract BondConfigFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using BondDepositoryLib for LibBondStorage.Storage;\n\n    /**\n     *  @notice allow anyone to send lost tokens (excluding principle or Necc) to the DAO\n     *  @return bool\n     */\n    function recoverLostToken(address _token) external returns (bool) {\n        require(_token != s.Necc);\n        require(!EnumerableSet.contains(s.principles, _token));\n        IERC20(_token).safeTransfer(\n            s.DAO,\n            IERC20(_token).balanceOf(address(this))\n        );\n\n        return true;\n    }\n\n    /* ======== BondDepository ======== */\n    function initializeBondDepository(\n        address _ndol,\n        address _Necc,\n        address _treasury,\n        address _DAO\n    ) external {\n        onlyGov();\n        require(_Necc != address(0));\n        s.Necc = _Necc;\n        require(_treasury != address(0));\n        s.treasury = _treasury;\n        require(_DAO != address(0));\n        s.DAO = _DAO;\n        require(_ndol != address(0));\n        s.ndol = _ndol;\n    }\n\n    /**\n     *  @notice initializes bond parameters\n     *  @param _controlVariable uint\n     *  @param _vestingTerm uint256\n     *  @param _minimumPrice uint\n     *  @param _maxPayout uint\n     *  @param _fee uint\n     *  @param _maxDebt uint\n     *  @param _initialDebt uint\n     */\n    function initializeBondTerms(\n        uint256 _controlVariable,\n        uint256 _minimumPrice,\n        uint256 _maxPayout,\n        uint256 _fee,\n        uint256 _maxDebt,\n        uint256 _initialDebt,\n        uint256 _vestingTerm,\n        bool _isLiquidityBond,\n        address _priceFeed,\n        address _principle\n    ) external {\n        onlyGov();\n        EnumerableSet.add(s.principles, _principle);\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        require(\n            // TODO: Remove >= into ==\n            s.terms[_principleIndex].controlVariable >= 0,\n            \"Bonds must be initialized from 0\"\n        );\n        s.terms[_principleIndex] = LibBondStorage.Terms({\n            controlVariable: _controlVariable,\n            minimumPrice: _minimumPrice,\n            maxPayout: _maxPayout,\n            fee: _fee,\n            maxDebt: _maxDebt,\n            vestingTerm: _vestingTerm,\n            isLiquidityBond: _isLiquidityBond\n        });\n        s.totalDebt[_principleIndex] = _initialDebt;\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\n        if (_priceFeed != address(0)) {\n            s.priceFeeds[_principleIndex] = _priceFeed;\n        }\n    }\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    /**\n     *  @notice set parameters for new bonds\n     *  @param _parameter PARAMETER\n     *  @param _input uint\n     */\n    function setBondTerms(\n        PARAMETER _parameter,\n        uint256 _input,\n        address _principle\n    ) external {\n        onlyGov();\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (_parameter == PARAMETER.VESTING) {\n            // 0\n            require(_input >= 129600, \"Vesting must be longer than 36 hours\");\n            s.terms[_principleIndex].vestingTerm = uint256(_input);\n        } else if (_parameter == PARAMETER.PAYOUT) {\n            // 1\n            require(_input <= 1000, \"Payout cannot be above 1 percent\");\n            s.terms[_principleIndex].maxPayout = _input;\n        } else if (_parameter == PARAMETER.FEE) {\n            // 2\n            require(_input <= 10000, \"DAO fee cannot exceed payout\");\n            s.terms[_principleIndex].fee = _input;\n        } else if (_parameter == PARAMETER.DEBT) {\n            // 3\n            s.terms[_principleIndex].maxDebt = _input;\n        } else if (_parameter == PARAMETER.MINPRICE) {\n            // 4\n            s.terms[_principleIndex].minimumPrice = _input;\n        }\n    }\n\n    function setAdjustment(\n        bool _addition,\n        uint256 _delta,\n        uint256 _timeToTargetInSeconds,\n        address _principle\n    ) public {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        require(\n            (msg.sender == address(this)) || (msg.sender == ds.contractOwner),\n            \"BondDepository: Invalid contract owner\"\n        );\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        require(\n            _timeToTargetInSeconds >= s.terms[0].vestingTerm,\n            \"Adjustment: Change too fast\"\n        );\n\n        s.bondDepositoryAdjustment[_principleIndex] = LibBondStorage\n            .BondDepositoryAdjustment({\n                add: _addition,\n                delta: _delta,\n                timeToTarget: _timeToTargetInSeconds,\n                lastTime: uint256(block.timestamp)\n            });\n    }\n\n    /* ======== Distributor ======== */\n    function initializeDistributor(\n        uint256 _epochLength,\n        uint256 _nextEpochTimestamp,\n        address _principle\n    ) public {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        s.epochLength = _epochLength;\n        s.nextEpochTimestamp[_principleIndex] = _nextEpochTimestamp;\n    }\n\n    /* ====== POLICY FUNCTIONS ====== */\n\n    /**\n        @notice adds recipient for distributions\n        @param _recipient address\n        @param _rewardRate uint\n     */\n    function addRecipient(address _recipient, uint256 _rewardRate) external {\n        onlyGov();\n        require(_recipient != address(0));\n        s.info.push(\n            LibBondStorage.Info({recipient: _recipient, rate: _rewardRate})\n        );\n    }\n\n    /**\n        @notice removes recipient for distributions\n        @param _index uint\n        @param _recipient address\n     */\n    function removeRecipient(uint256 _index, address _recipient) external {\n        onlyGov();\n        require(_recipient == s.info[_index].recipient);\n        s.info[_index].recipient = address(0);\n        s.info[_index].rate = 0;\n    }\n\n    /**\n        @notice set adjustment info for a collector's reward rate\n        @param _index uint\n        @param _add bool\n        @param _rate uint\n        @param _target uint\n     */\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external {\n        onlyGov();\n        s.distributorAdjustments[_index] = LibBondStorage\n            .DistributorAdjustment({add: _add, rate: _rate, target: _target});\n    }\n\n    /* ======== Staking ======== */\n\n    function initializeStaking(\n        uint256 _firstEpochNumber,\n        uint32 _firstEpochTime,\n        address _sNecc,\n        address _nNecc\n    ) public {\n        require(_sNecc != address(0));\n        require(_nNecc != address(0));\n        s.sNecc = _sNecc;\n        s.nNecc = _nNecc;\n        s.epoch = LibBondStorage.Epoch({\n            length: s.epochLength,\n            number: _firstEpochNumber,\n            endTime: _firstEpochTime,\n            distribute: 0\n        });\n    }\n\n    /**\n        @notice prevent new deposits to address (protection from malicious activity)\n     */\n    function toggleDepositLock(address _maliciousDepositor) external {\n        onlyGov();\n        s.warmupInfo[_maliciousDepositor].lock = !s\n            .warmupInfo[_maliciousDepositor]\n            .lock;\n    }\n\n    /**\n        @notice sets the contract address for LP staking\n        @param _contract address\n     */\n    function setContract(CONTRACTS _contract, address _address) external {\n        onlyGov();\n        if (_contract == CONTRACTS.LOCKER) {\n            // 2\n            require(\n                s.locker == address(0),\n                \"Locker cannot be set more than once\"\n            );\n            s.locker = _address;\n        }\n    }\n\n    /**\n     * @notice set warmup period in epoch's numbers for new stakers\n     * @param _warmupPeriod uint\n     */\n    function setWarmup(uint256 _warmupPeriod) external {\n        onlyGov();\n        s.warmupPeriod = _warmupPeriod;\n    }\n\n    function setFarmDistributor(address _farmDistributor) external {\n        onlyGov();\n        s.farmDistributor = _farmDistributor;\n    }\n}\n"
    },
    "contracts/amm/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/facets/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IRouter {\n    function addPlugin(address _plugin) external;\n\n    function ndol() external view returns (address);\n\n    function swap(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minOut,\n        address _receiver\n    ) external;\n\n    function vault() external view returns (address);\n}\n"
    },
    "contracts/peripherals/PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ncontract PriceFeed {\n    int256 public answer;\n    uint80 public roundId;\n    string public description = \"PriceFeed\";\n    address public aggregator;\n\n    uint256 public decimals;\n\n    address public gov;\n\n    mapping(uint80 => int256) public answers;\n    mapping(address => bool) public isAdmin;\n\n    constructor() {\n        gov = msg.sender;\n        isAdmin[msg.sender] = true;\n    }\n\n    function setAdmin(address _account, bool _isAdmin) public {\n        require(msg.sender == gov, \"PriceFeed: forbidden\");\n        isAdmin[_account] = _isAdmin;\n    }\n\n    function latestAnswer() public view returns (int256) {\n        return answer;\n    }\n\n    function latestRound() public view returns (uint80) {\n        return roundId;\n    }\n\n    function setLatestAnswer(int256 _answer) public {\n        require(isAdmin[gov], \"PriceFeed: forbidden\");\n        roundId = roundId + 1;\n        answer = _answer;\n        answers[roundId] = _answer;\n    }\n\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\n    function getRoundData(uint80 _roundId)\n        public\n        view\n        returns (\n            uint80,\n            int256,\n            uint256,\n            uint256,\n            uint80\n        )\n    {\n        return (_roundId, answers[_roundId], 0, 0, 0);\n    }\n}\n"
    },
    "contracts/weiroll/CommandBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nuint256 constant IDX_VARIABLE_LENGTH = 0x80;\nuint256 constant IDX_VALUE_MASK = 0x7f;\nuint256 constant IDX_END_OF_ARGS = 0xff;\nuint256 constant IDX_USE_STATE = 0xfe;\n\nlibrary CommandBuilder {\n    function buildInputs(\n        bytes[] memory state,\n        bytes4 selector,\n        bytes32 indices\n    ) internal view returns (bytes memory ret) {\n        uint256 count = 0; // Number of bytes in whole ABI encoded message\n        uint256 free = 0; // Pointer to first free byte in tail part of message\n        bytes memory stateData; // Optionally encode the current state if the call requires it\n\n        uint256 idx;\n\n        // Determine the length of the encoded data\n        for (uint256 i = 0; i < 32; i++) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    if (stateData.length == 0) {\n                        stateData = abi.encode(state);\n                    }\n                    count += stateData.length;\n                    free += 32;\n                } else {\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\n                    require(\n                        arglen % 32 == 0,\n                        \"Dynamic state variables must be a multiple of 32 bytes\"\n                    );\n                    count += arglen + 32;\n                    free += 32;\n                }\n            } else {\n                require(\n                    state[idx & IDX_VALUE_MASK].length == 32,\n                    \"Static state variables must be 32 bytes\"\n                );\n                count += 32;\n                free += 32;\n            }\n        }\n\n        // Encode it\n        ret = new bytes(count + 4);\n        assembly {\n            mstore(add(ret, 32), selector)\n        }\n        count = 0;\n        for (uint256 i = 0; i < 32; i++) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\n                    free += stateData.length - 32;\n                    count += 32;\n                } else {\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\n\n                    // Variable length data; put a pointer in the slot and write the data at the end\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    memcpy(\n                        state[idx & IDX_VALUE_MASK],\n                        0,\n                        ret,\n                        free + 4,\n                        arglen\n                    );\n                    free += arglen;\n                    count += 32;\n                }\n            } else {\n                // Fixed length data; write it directly\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\n                assembly {\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\n                }\n                count += 32;\n            }\n        }\n    }\n\n    function writeOutputs(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal pure returns (bytes[] memory) {\n        uint256 idx = uint8(index);\n        if (idx == IDX_END_OF_ARGS) return state;\n\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\n            if (idx == IDX_USE_STATE) {\n                state = abi.decode(output, (bytes[]));\n            } else {\n                // Check the first field is 0x20 (because we have only a single return value)\n                uint256 argptr;\n                assembly {\n                    argptr := mload(add(output, 32))\n                }\n                require(\n                    argptr == 32,\n                    \"Only one return value permitted (variable)\"\n                );\n\n                assembly {\n                    // Overwrite the first word of the return data with the length - 32\n                    mstore(add(output, 32), sub(mload(output), 32))\n                    // Insert a pointer to the return data, starting at the second word, into state\n                    mstore(\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\n                        add(output, 32)\n                    )\n                }\n            }\n        } else {\n            // Single word\n            require(\n                output.length == 32,\n                \"Only one return value permitted (static)\"\n            );\n\n            state[idx & IDX_VALUE_MASK] = output;\n        }\n\n        return state;\n    }\n\n    function writeTuple(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal view {\n        uint8 idx = uint8(index);\n        if (idx == IDX_END_OF_ARGS) return;\n\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\n        memcpy(output, 0, entry, 32, output.length);\n        assembly {\n            let l := mload(output)\n            mstore(add(entry, 32), l)\n        }\n    }\n\n    function memcpy(\n        bytes memory src,\n        uint256 srcidx,\n        bytes memory dest,\n        uint256 destidx,\n        uint256 len\n    ) internal view {\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    4,\n                    add(add(src, 32), srcidx),\n                    len,\n                    add(add(dest, 32), destidx),\n                    len\n                )\n            )\n        }\n    }\n}\n"
    },
    "contracts/weiroll/VM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./CommandBuilder.sol\";\n\nuint8 constant FLAG_CT_DELEGATECALL = 0x00;\nuint8 constant FLAG_CT_CALL = 0x01;\nuint8 constant FLAG_CT_STATICCALL = 0x02;\nuint8 constant FLAG_CT_VALUECALL = 0x03;\nuint8 constant FLAG_CT_MASK = 0x03;\nuint8 constant FLAG_EXTENDED_COMMAND = 0x80;\nuint8 constant FLAG_TUPLE_RETURN = 0x40;\n\nuint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\ncontract VM {\n    using CommandBuilder for bytes[];\n\n    address immutable self;\n\n    modifier ensureDelegateCall() {\n        require(address(this) != self);\n        _;\n    }\n\n    constructor() {\n        self = address(this);\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] memory state)\n        public\n        ensureDelegateCall\n        returns (bytes[] memory)\n    {\n        bytes32 command;\n        uint256 flags;\n        bytes32 indices;\n\n        bool success;\n        bytes memory outdata;\n\n        for (uint256 i = 0; i < commands.length; i++) {\n            command = commands[i];\n            flags = uint8(bytes1(command << 32));\n\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\n                indices = commands[i++];\n            } else {\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\n            }\n\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\n                (success, outdata) = address(uint160(uint256(command))) // target\n                    .delegatecall(\n                        // inputs\n                        state.buildInputs(\n                            //selector\n                            bytes4(command),\n                            indices\n                        )\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\n                (success, outdata) = address(uint160(uint256(command))).call( // target\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        indices\n                    )\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\n                (success, outdata) = address(uint160(uint256(command))) // target\n                    .staticcall(\n                        // inputs\n                        state.buildInputs(\n                            //selector\n                            bytes4(command),\n                            indices\n                        )\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\n                uint256 calleth;\n                bytes memory v = state[uint8(bytes1(indices))];\n                assembly {\n                    mstore(calleth, add(v, 0x20))\n                }\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\n                    value: calleth\n                }(\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        bytes32(uint256(indices << 8) | IDX_END_OF_ARGS)\n                    )\n                );\n            } else {\n                revert(\"Invalid calltype\");\n            }\n\n            require(success, \"Call failed\");\n\n            if (flags & FLAG_TUPLE_RETURN != 0) {\n                state.writeTuple(bytes1(command << 88), outdata);\n            } else {\n                state = state.writeOutputs(bytes1(command << 88), outdata);\n            }\n        }\n        return state;\n    }\n}\n"
    },
    "contracts/weiroll/TestableVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./VM.sol\";\n\ncontract TestableVM {\n    VM public vm;\n\n    constructor(VM _vm) {\n        vm = _vm;\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] memory state)\n        public\n        returns (bytes[] memory)\n    {\n        (bool success, bytes memory data) = address(vm).delegatecall(\n            abi.encodeWithSelector(VM.execute.selector, commands, state)\n        );\n        require(success, \"TestableVM: execution failed\");\n\n        return abi.decode(data, (bytes[]));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}