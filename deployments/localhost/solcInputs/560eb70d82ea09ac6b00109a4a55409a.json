{
  "language": "Solidity",
  "sources": {
    "contracts/facets/Bond/BondDepositoryFacet.sol": {
      "content": "pragma abicoder v2;\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../lib/FixedPoint.sol\";\nimport \"../../lib/FullMath.sol\";\nimport \"../../lib/LibBondStorage.sol\";\nimport \"./BondDepositoryLib.sol\";\nimport \"./Facet.sol\";\n\n// Chainlink price feed\ninterface IOracle {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface ITreasury {\n    function mintRewards(address _recipient, uint256 _amount) external;\n\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256 send_);\n\n    function valueOfToken(address _token, uint256 _amount)\n        external\n        view\n        returns (uint256 value_);\n}\n\ninterface IBondCalculator {\n    function valuation(address _LP, uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function markdown(address _LP) external view returns (uint256);\n}\n\ninterface IStaking {\n    function stake(uint256 _amount, address _recipient) external returns (bool);\n}\n\ninterface IERC20Decimals {\n    function decimals() external view returns (uint8);\n}\n\ncontract BondDepositoryFacet is Facet {\n    using FixedPoint for *;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using BondDepositoryLib for LibBondStorage.Storage;\n\n    /* ======== EVENTS ======== */\n\n    event BondCreated(\n        uint256 deposit,\n        uint256 indexed payout,\n        uint256 indexed expires,\n        uint256 indexed priceInUSD\n    );\n    event BondRedeemed(\n        address indexed recipient,\n        uint256 payout,\n        uint256 remaining\n    );\n    event BondPriceChanged(\n        uint256 indexed priceInUSD,\n        uint256 indexed internalPrice,\n        uint256 indexed debtRatio\n    );\n    event ControlVariableAdjustment(\n        uint256 initialBCV,\n        uint256 newBCV,\n        uint256 adjustment,\n        bool addition\n    );\n\n    /* ======== ERRORS ======== */\n    error InvalidPrinciple(address _principle);\n\n    /* ======== USER FUNCTIONS ======== */\n\n    /**\n     *  @notice deposit bond\n     *  @param _amount uint\n     *  @param _maxPrice uint\n     *  @param _depositor address\n     *  @return uint\n     */\n    function deposit(\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor,\n        address _principle\n    ) external returns (uint256) {\n        require(_depositor != address(0), \"Invalid address\");\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        decayDebt(_principle);\n        require(\n            s.totalDebt[_principleIndex] <= s.terms[_principleIndex].maxDebt,\n            \"Max capacity reached\"\n        );\n\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\n        uint256 nativePrice = _bondPrice(_principle);\n\n        require(\n            _maxPrice >= nativePrice,\n            \"Slippage limit: more than max price\"\n        ); // slippage protection\n\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\n        require(payout >= 10000000, \"Bond too small\"); // must be > 0.01 Necc ( underflow protection )\n        require(payout <= maxPayout(_principle), \"Bond too large\"); // size protection because there is no slippage\n        // profits are calculated\n        uint256 fee = payout.mul(s.terms[_principleIndex].fee).div(10000);\n        uint256 profit = value.sub(payout);\n        if (profit > 0) {\n            profit = profit.sub(fee);\n            /**\n            principle is transferred in\n            approved and\n            deposited into the treasury, returning (_amount - profit) Necc\n         */\n            if (s.terms[_principleIndex].isLiquidityBond) {\n                IERC20(_principle).safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    _amount\n                );\n                IERC20(_principle).approve(address(s.treasury), _amount);\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\n            } else if (_principle == s.ndol) {\n                IERC20(_principle).safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    _amount\n                );\n                IERC20(_principle).approve(address(s.treasury), _amount);\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\n            } else {\n                revert InvalidPrinciple(_principle);\n            }\n\n            if (fee != 0) {\n                // fee is transferred to dao\n                if (s.DAO != address(0)) {\n                    IERC20(s.Necc).safeTransfer(s.DAO, fee);\n                }\n                if (s.farmDistributor != address(0)) {\n                    IERC20(s.Necc).safeTransfer(\n                        s.farmDistributor,\n                        payout.mul(100).div(10000) // 1% farm distributor fee for minters\n                    );\n                }\n            }\n        }\n\n        // total debt is increased\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\n\n        // depositor info is stored\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\n            vesting: s.terms[_principleIndex].vestingTerm,\n            lastTime: uint256(block.timestamp),\n            pricePaid: priceInUSD\n        });\n\n        // indexed events are emitted\n        emit BondCreated(\n            _amount,\n            payout,\n            block.timestamp.add(s.terms[_principleIndex].vestingTerm),\n            priceInUSD\n        );\n        emit BondPriceChanged(\n            bondPriceInUSD(_principle),\n            _bondPrice(_principle),\n            debtRatio(_principle)\n        );\n\n        adjust(_principle); // control variable is adjusted\n        return payout;\n    }\n\n    /**\n     *  @notice redeem bond for user\n     *  @param _recipient address\n     *  @param _principle address\n     *  @return uint\n     */\n    function redeem(address _recipient, address _principle)\n        external\n        returns (uint256)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\n            _principleIndex\n        ];\n        // (seconds since last interaction / vesting term remaining)\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\n\n        if (percentVested >= 10000) {\n            // if fully vested\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\n            return stake(_recipient, info.payout); // pay user everything due\n        } else {\n            // if unfinished\n            // calculate payout vested\n            uint256 payout = info.payout.mul(percentVested).div(10000);\n            // store updated deposit info\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\n                payout: info.payout.sub(payout),\n                vesting: info.vesting.sub(\n                    uint256(block.timestamp).sub(info.lastTime)\n                ),\n                lastTime: uint256(block.timestamp),\n                pricePaid: info.pricePaid\n            });\n\n            emit BondRedeemed(\n                _recipient,\n                payout,\n                s.bondInfo[_recipient][_principleIndex].payout\n            );\n            return stake(_recipient, payout);\n        }\n    }\n\n    /**\n     *  @notice reduce total debt\n     */\n    function decayDebt(address _principle) internal {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\n            debtDecay(_principle)\n        );\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     *  @notice determine maximum bond size\n     *  @return uint\n     */\n    function maxPayout(address _principle) public view returns (uint256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return\n            IERC20(s.Necc)\n                .totalSupply()\n                .mul(s.terms[_principleIndex].maxPayout)\n                .div(100000);\n    }\n\n    /**\n     *  @notice calculate interest due for new bond\n     *  @param _value uint\n     *  @return uint\n     */\n    function payoutFor(uint256 _value, address _principle)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            return\n                FixedPoint\n                    .fraction(_value, bondPrice(_principle))\n                    .decode112with18()\n                    .div(1e16);\n        } else if (_principle == s.ndol) {\n            return\n                FixedPoint\n                    .fraction(_value, bondPrice(_principle))\n                    .decode112with18()\n                    .div(1e16);\n        } else {\n            revert InvalidPrinciple(_principle);\n        }\n    }\n\n    /**\n     *  @notice calculate current bond premium\n     *  @return price_ uint\n     */\n    function bondPrice(address _principle)\n        public\n        view\n        returns (uint256 price_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else if (_principle == s.ndol) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        }\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\n            price_ = s.terms[_principleIndex].minimumPrice;\n        }\n    }\n\n    /**\n     *  @notice calculate current bond price and remove floor if above\n     *  @return price_ uint\n     */\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        } else if (_principle == s.ndol) {\n            price_ = s\n                .terms[_principleIndex]\n                .controlVariable\n                .mul(debtRatio(_principle))\n                .add(1000000000)\n                .div(1e7);\n        }\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\n            price_ = s.terms[_principleIndex].minimumPrice;\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\n            s.terms[_principleIndex].minimumPrice = 0;\n        }\n    }\n\n    /**\n     *  @notice converts bond price to DAI value\n     *  @return price_ uint\n     */\n    function bondPriceInUSD(address _principle)\n        public\n        view\n        returns (uint256 price_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            price_ = bondPrice(_principle)\n                .mul(IBondCalculator(address(this)).markdown(_principle))\n                .div(100);\n        } else if (_principle == s.ndol) {\n            price_ = bondPrice(_principle)\n                .mul(10**IERC20Decimals(_principle).decimals())\n                .div(100);\n        } else {\n            revert InvalidPrinciple(_principle);\n        }\n    }\n\n    /**\n     *  @notice calculate current ratio of debt to Necc supply\n     *  @return debtRatio_ uint\n     */\n    function debtRatio(address _principle)\n        public\n        view\n        returns (uint256 debtRatio_)\n    {\n        uint256 supply = IERC20(s.Necc).totalSupply();\n        debtRatio_ = FixedPoint\n            .fraction(currentDebt(_principle).mul(1e9), supply)\n            .decode112with18()\n            .div(1e18);\n    }\n\n    /**\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\n     *  @return uint\n     */\n    function standardizedDebtRatio(address _principle)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        if (s.terms[_principleIndex].isLiquidityBond) {\n            return\n                debtRatio(_principle)\n                    .mul(IBondCalculator(address(this)).markdown(_principle))\n                    .div(1e9);\n        } else if (_principle == s.ndol) {\n            return debtRatio(_principle);\n        } else {\n            revert InvalidPrinciple(_principle);\n        }\n    }\n\n    /**\n     *  @notice calculate debt factoring in decay\n     *  @return uint\n     */\n    function currentDebt(address _principle) public view returns (uint256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\n    }\n\n    /**\n     *  @notice amount to decay total debt by\n     *  @return decay_ uint\n     */\n    function debtDecay(address _principle)\n        public\n        view\n        returns (uint256 decay_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\n            s.lastDecay[_principleIndex]\n        );\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\n            s.terms[_principleIndex].vestingTerm\n        );\n        if (decay_ > s.totalDebt[_principleIndex]) {\n            decay_ = s.totalDebt[_principleIndex];\n        }\n    }\n\n    /**\n     *  @notice calculate how far into vesting a depositor is\n     *  @param _depositor address\n     *  @return percentVested_ uint\n     */\n    function percentVestedFor(address _depositor, address _principle)\n        public\n        view\n        returns (uint256 percentVested_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\n            _principleIndex\n        ];\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\n        uint256 vesting = bond.vesting;\n\n        if (vesting > 0) {\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\n        } else {\n            percentVested_ = 0;\n        }\n    }\n\n    /**\n     *  @notice calculate amount of Necc available for claim by depositor\n     *  @param _depositor address\n     *  @return pendingPayout_ uint\n     */\n    function pendingPayoutFor(address _depositor, address _principle)\n        external\n        view\n        returns (uint256 pendingPayout_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\n\n        if (percentVested >= 10000) {\n            pendingPayout_ = payout;\n        } else {\n            pendingPayout_ = payout.mul(percentVested).div(10000);\n        }\n    }\n\n    /**\n     *  @notice allow user to stake payout automatically\n     *  @param _recipient address\n     *  @param _amount uint\n     *  @return uint\n     */\n    function stake(address _recipient, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        IERC20(s.Necc).approve(address(this), _amount);\n        IStaking(address(this)).stake(_amount, _recipient);\n\n        return _amount;\n    }\n\n    /**\n     *  @notice makes incremental adjustment to control variable\n     */\n    function adjust(address _principle) internal {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\n\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\n            uint256 initial = _bondTerms.controlVariable;\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\n            uint256 change = changeBy(_principle);\n\n            if (adjustment.delta >= change) {\n                adjustment.delta = adjustment.delta.sub(change);\n            } else {\n                adjustment.delta = 0;\n            }\n            if (adjustment.timeToTarget >= timeSinceLast) {\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\n                    timeSinceLast\n                );\n            } else {\n                adjustment.timeToTarget = 0;\n            }\n\n            if (adjustment.add) {\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\n                    change\n                );\n            } else {\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\n                    change\n                );\n            }\n\n            adjustment.lastTime = block.timestamp;\n\n            emit ControlVariableAdjustment(\n                initial,\n                _bondTerms.controlVariable,\n                change,\n                adjustment.add\n            );\n        }\n    }\n\n    function changeBy(address _principle)\n        internal\n        view\n        returns (uint256 changeBy_)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\n\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\n            adjustment.timeToTarget\n        );\n\n        if (changeBy_ > adjustment.delta) {\n            changeBy_ = adjustment.delta;\n        }\n    }\n\n    function bondInfo(address _depositor, address _principle)\n        public\n        view\n        returns (LibBondStorage.Bond memory)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.bondInfo[_depositor][_principleIndex];\n    }\n\n    function BCV(address _principle) public view returns (uint256 BCV_) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\n            .bondDepositoryAdjustment[_principleIndex];\n\n        uint256 change = changeBy(_principle);\n\n        if (_bondAdjustment.add) {\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\n        } else {\n            if (s.terms[_principleIndex].controlVariable > change) {\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\n            } else {\n                BCV_ = 1;\n            }\n        }\n    }\n\n    /**\n     *  @notice get asset price from chainlink\n     */\n    function assetPrice(address _principle) public view returns (int256) {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        (, int256 price, , , ) = IOracle(s.priceFeeds[_principleIndex])\n            .latestRoundData();\n\n        return price;\n    }\n\n    function terms(address _principle)\n        public\n        view\n        returns (LibBondStorage.Terms memory)\n    {\n        uint256 _principleIndex = s.getIndexAt(_principle);\n        return s.terms[_principleIndex];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/lib/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nimport \"./FullMath.sol\";\n\nlibrary Babylonian {\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\nlibrary BitMath {\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, \"BitMath::mostSignificantBit: zero\");\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n}\n\nlibrary FixedPoint {\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 =\n        0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return uint256(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        require(denominator > 0, \"FixedPoint::fraction: division by zero\");\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= type(uint144).max) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(\n                result <= type(uint224).max,\n                \"FixedPoint::fraction: overflow\"\n            );\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(\n                result <= type(uint224).max,\n                \"FixedPoint::fraction: overflow\"\n            );\n            return uq112x112(uint224(result));\n        }\n    }\n\n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self)\n        internal\n        pure\n        returns (uq112x112 memory)\n    {\n        if (self._x <= type(uint144).max) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return\n            uq112x112(\n                uint224(\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\n                        ((112 - safeShiftBits) / 2)\n                )\n            );\n    }\n}\n"
    },
    "contracts/lib/FullMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.10;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y)\n        private\n        pure\n        returns (uint256 l, uint256 h)\n    {\n        uint256 mm = mulmod(x, y, type(uint256).max);\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & (~d + 1);\n        d /= pow2;\n        l /= pow2;\n        l += h * ((~pow2 + 1) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n        require(h < d, \"FullMath::mulDiv: overflow\");\n        return fullDiv(l, h, d);\n    }\n}\n"
    },
    "contracts/lib/LibBondStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nenum PARAMETER {\n    VESTING,\n    PAYOUT,\n    FEE,\n    DEBT,\n    MINPRICE\n}\n\nenum CONTRACTS {\n    DISTRIBUTOR,\n    WARMUP,\n    LOCKER\n}\n\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\n\nlibrary LibBondStorage {\n    bytes32 constant STORAGE_POSITION = keccak256(\"necc.dao.bond.storage\");\n\n    struct Payout {\n        uint256 amount; // Necc paid\n        uint256 blockTimestamp; // block number occurred\n    }\n\n    struct Info {\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n\n    struct DistributorAdjustment {\n        bool add;\n        uint256 rate;\n        uint256 target;\n    }\n\n    struct Terms {\n        uint256 controlVariable; // scaling variable for price\n        uint256 minimumPrice; // vs principle value\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\n        uint256 vestingTerm; // in seconds\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\n    }\n\n    // Info for bond holder\n    struct Bond {\n        uint256 payout; // Necc remaining to be paid\n        uint256 pricePaid; // In DAI, for front end viewing\n        uint256 lastTime; // Last interaction\n        uint256 vesting; // Seconds left to vest\n    }\n\n    // Info for incremental adjustments to control variable\n    struct BondDepositoryAdjustment {\n        bool add; // addition or subtraction\n        uint256 delta; // increment\n        uint256 timeToTarget; // seconds till target\n        uint256 lastTime; // time when last adjustment made\n    }\n    struct Epoch {\n        uint256 number;\n        uint256 distribute;\n        uint256 length;\n        uint256 endTime;\n    }\n\n    struct Claim {\n        uint256 deposit;\n        uint256 gons;\n        uint256 expiry;\n        bool lock; // prevents malicious delays\n    }\n\n    // Single global store\n    struct Storage {\n        address Necc; // token given as payment for bond\n        address sNecc; // token given for staking\n        address nNecc; // wrapped staked token\n        address ndol; // principle token without price feed\n        address treasury; // mints Necc when receives principle\n        address DAO; // receives profit share from bond\n        address farmDistributor; // receives profit share from bond to distribute to minters\n        address staking; // to auto-stake payout\n        //\n        EnumerableSet.AddressSet principles;\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\n        //\n        Info[] info; // stores infof or distribution recipients\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\n        //\n        Epoch epoch;\n        uint256 epochLength;\n        address distributor;\n        address locker;\n        uint256 warmupPeriod;\n        mapping(address => Claim) warmupInfo;\n        //\n        uint256 targetSum; // target total Necc as payouts during period\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\n        uint256 gonsInWarmup; // total gons in warmup period\n        //\n        // Always add new storage variable to the end of this struct\n    }\n}\n"
    },
    "contracts/facets/Bond/BondDepositoryLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\nimport \"../../lib/LibBondStorage.sol\";\n\nlibrary BondDepositoryLib {\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\n        internal\n        view\n        returns (uint256 _index)\n    {\n        uint256 _principleLength = EnumerableSet.length(s.principles);\n        for (uint256 i = 0; i < _principleLength; i++) {\n            if (EnumerableSet.at(s.principles, i) == _principle) {\n                return i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/facets/Bond/Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"../../lib/LibBondStorage.sol\";\nimport \"../../lib/LibDiamond.sol\";\n\ncontract Facet {\n    LibBondStorage.Storage internal s;\n\n    function onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/lib/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nlibrary LibDiamond {\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(\n            msg.sender == diamondStorage().contractOwner,\n            \"LibDiamond: invalid contract owner\"\n        );\n    }\n}\n"
    },
    "contracts/facets/Bond/StakingFacet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma abicoder v2;\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../lib/LibBondStorage.sol\";\nimport \"./Facet.sol\";\n\ninterface IDistributor {\n    function distribute() external returns (uint256);\n}\n\ninterface InNecc is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n}\n\ninterface IsNecc is IERC20 {\n    function rebase(uint256 neccProfit_, uint256 epoch_)\n        external\n        returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view override returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n}\n\ncontract StakingFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IsNecc;\n\n    /**\n        @notice stake Necc to enter warmup or for nNecc\n        @param _amount uint\n        @return bool\n     */\n    function stake(uint256 _amount, address _recipient)\n        external\n        returns (bool)\n    {\n        rebase();\n\n        IERC20(s.Necc).safeTransferFrom(msg.sender, address(this), _amount);\n\n        if (s.warmupPeriod == 0) {\n            _send(_recipient, _amount);\n        } else {\n            LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\n            require(!info.lock, \"Deposits for account are locked\");\n\n            s.warmupInfo[_recipient] = LibBondStorage.Claim({\n                deposit: info.deposit.add(_amount),\n                gons: info.gons.add(IsNecc(s.sNecc).gonsForBalance(_amount)),\n                expiry: s.epoch.number.add(s.warmupPeriod),\n                lock: false\n            });\n\n            s.gonsInWarmup = s.gonsInWarmup.add(\n                IsNecc(s.sNecc).gonsForBalance(_amount)\n            );\n        }\n        return true;\n    }\n\n    /**\n        @notice retrieve sNecc from warmup\n        @param _recipient address\n     */\n    function claim(address _recipient) public {\n        LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\n        if (!info.lock) {\n            require(\n                _recipient == msg.sender,\n                \"External claims for account are locked\"\n            );\n        }\n\n        if (s.epoch.number >= info.expiry && info.expiry != 0) {\n            delete s.warmupInfo[_recipient];\n            s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\n\n            _send(_recipient, IsNecc(s.sNecc).balanceForGons(info.gons));\n        }\n    }\n\n    /**\n        @notice forfeit sNecc in warmup and retrieve Necc\n     */\n    function forfeit() external {\n        LibBondStorage.Claim memory info = s.warmupInfo[msg.sender];\n        delete s.warmupInfo[msg.sender];\n        s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\n\n        IERC20(s.Necc).safeTransfer(msg.sender, info.deposit);\n    }\n\n    /**\n        @notice redeem nNecc for Necc\n        @param _amount uint\n        @param _trigger bool\n     */\n    function unstake(uint256 _amount, bool _trigger)\n        external\n        returns (uint256 amount_)\n    {\n        if (_trigger) {\n            rebase();\n        }\n\n        InNecc(s.nNecc).burn(msg.sender, _amount); // amount was given in nNecc terms\n        amount_ = InNecc(s.nNecc).balanceFrom(_amount); // convert amount to Necc terms\n\n        IERC20(s.Necc).safeTransfer(msg.sender, amount_);\n    }\n\n    /**\n     * @notice send staker their amount as nNecc (non-rebasing)\n     * @param _recipient address\n     * @param _amount uint\n     */\n    function _send(address _recipient, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        InNecc(s.nNecc).mint(_recipient, InNecc(s.nNecc).balanceTo(_amount)); // send as nNecc (convert units from Necc)\n        return InNecc(s.nNecc).balanceTo(_amount);\n    }\n\n    /**\n        @notice returns the sNecc index, which tracks rebase growth\n        @return uint\n     */\n    function index() public view returns (uint256) {\n        return IsNecc(s.sNecc).index();\n    }\n\n    /**\n        @notice trigger rebase if epoch over\n     */\n    function rebase() public {\n        if (s.epoch.endTime <= uint256(block.timestamp)) {\n            IsNecc(s.sNecc).rebase(s.epoch.distribute, s.epoch.number);\n\n            s.epoch.endTime = s.epoch.endTime.add(s.epoch.length);\n            s.epoch.number++;\n\n            IDistributor(address(this)).distribute();\n\n            if (contractBalance() <= totalStaked()) {\n                s.epoch.distribute = 0;\n            } else {\n                s.epoch.distribute = contractBalance().sub(totalStaked());\n            }\n        }\n    }\n\n    /**\n        @notice returns contract Necc holdings, including bonuses provided\n        @return uint\n     */\n    function contractBalance() public view returns (uint256) {\n        return IERC20(s.Necc).balanceOf(address(this));\n    }\n\n    function epoch() public view returns (LibBondStorage.Epoch memory) {\n        return s.epoch;\n    }\n\n    function warmupInfo(address _recipient)\n        public\n        view\n        returns (LibBondStorage.Claim memory)\n    {\n        return s.warmupInfo[_recipient];\n    }\n\n    function supplyInWarmup() public view returns (uint256) {\n        return IsNecc(s.sNecc).balanceForGons(s.gonsInWarmup);\n    }\n\n    function totalStaked() public view returns (uint256) {\n        return IsNecc(s.sNecc).circulatingSupply();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}