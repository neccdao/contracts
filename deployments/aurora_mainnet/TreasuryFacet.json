{
  "address": "0x2264B05caa162308FA4938dbf6aaC4220a319580",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "activated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "ChangeActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "ChangeQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "depositLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excessReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Necc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sNecc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nNecc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_NDOL",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksNeededForQueue",
          "type": "uint256"
        }
      ],
      "name": "initializeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "isReserveDepositor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "isReserveToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithNecc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "toggle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "valueOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6006eb9d0791e67ce2bdba841be586565010c5a86d407aba5133886a594351a",
  "receipt": {
    "to": null,
    "from": "0xdF1d35b28dadeC2fFe56f72614e62B08A757CA31",
    "contractAddress": "0x2264B05caa162308FA4938dbf6aaC4220a319580",
    "transactionIndex": 1,
    "gasUsed": "2625472",
    "logsBloom": "0x
    "blockHash": "0x136440a0b7e975e68c4e6a863f087599ab85d63d510cbf5224aae6ad23f9ea1e",
    "transactionHash": "0xe6006eb9d0791e67ce2bdba841be586565010c5a86d407aba5133886a594351a",
    "logs": [],
    "blockNumber": 56262099,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d5dfcdabb4ff70ae37f8e06cae8c7a24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"depositLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Necc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sNecc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nNecc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NDOL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"name\":\"initializeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithNecc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"baseSupply()\":{\"details\":\"use this any time you need to query supply\"},\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint\"}},\"depositLP(uint256,address,uint256,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\",\"_value\":\"uint\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"queue(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"repayDebtWithNecc(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"toggle(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"valueOfToken(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"},\"returns\":{\"_value\":\"uint\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"baseSupply()\":{\"notice\":\"returns supply metric that cannot be manipulated by debt\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for Necc\"},\"depositLP(uint256,address,uint256,uint256)\":{\"notice\":\"allow approved address to deposit an asset for Necc\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mintRewards(address,uint256)\":{\"notice\":\"send epoch reward to staking contract\"},\"queue(uint8,address)\":{\"notice\":\"queue address to change boolean in mapping\"},\"repayDebtWithNecc(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with Necc\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"toggle(uint8,address)\":{\"notice\":\"verify queue then set boolean in mapping\"},\"valueOfToken(address,uint256)\":{\"notice\":\"returns Necc valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn Necc for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Treasury/TreasuryFacet.sol\":\"TreasuryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Treasury/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibTreasuryStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibTreasuryStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x32610d078fcc64bc25544d91162acadfaca346cdf9a8814df81394686d170d32\",\"license\":\"MIT\"},\"contracts/facets/Treasury/TreasuryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface IBondCalculator {\\n    function valuation(address pair_, uint256 amount_)\\n        external\\n        view\\n        returns (uint256 _value);\\n}\\n\\ninterface IERC20Mintable {\\n    function decimals() external view returns (uint256);\\n\\n    function mint(uint256 amount_) external;\\n\\n    function mint(address account_, uint256 ammount_) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IsNecc {\\n    function changeDebt(\\n        uint256 _amount,\\n        address _debtor,\\n        bool _add\\n    ) external;\\n}\\n\\ncontract TreasuryFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit(address indexed token, uint256 amount, uint256 value);\\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n    event CreateDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event RepayDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event ReservesManaged(address indexed token, uint256 amount);\\n    event ReservesUpdated(uint256 indexed totalReserves);\\n    event ReservesAudited(uint256 indexed totalReserves);\\n    event RewardsMinted(\\n        address indexed caller,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    event ChangeQueued(MANAGING indexed managing, address queued);\\n    event ChangeActivated(\\n        MANAGING indexed managing,\\n        address activated,\\n        bool result\\n    );\\n\\n    // Do not change the order of the following constants\\n    enum MANAGING {\\n        RESERVEDEPOSITOR,\\n        RESERVESPENDER,\\n        RESERVETOKEN,\\n        RESERVEMANAGER,\\n        LIQUIDITYDEPOSITOR,\\n        LIQUIDITYTOKEN,\\n        LIQUIDITYMANAGER,\\n        DEBTOR,\\n        REWARDMANAGER,\\n        SNECC\\n    }\\n\\n    error InvalidToken(address _token);\\n\\n    function initializeTreasury(\\n        address _Necc,\\n        address _sNecc,\\n        address _nNecc,\\n        address _NDOL,\\n        uint256 _blocksNeededForQueue\\n    ) external {\\n        onlyGov();\\n        require(_Necc != address(0));\\n        require(_sNecc != address(0));\\n        require(_nNecc != address(0));\\n        s.Necc = _Necc;\\n        s.sNecc = _sNecc;\\n        s.nNecc = _nNecc;\\n\\n        s.isReserveToken[_NDOL] = true;\\n        s.reserveTokens.push(_NDOL);\\n\\n        s.blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards(address _recipient, uint256 _amount) external {\\n        require(\\n            s.isRewardManager[msg.sender],\\n            \\\"Treasury: Reward Manager Not approved\\\"\\n        );\\n        require(_amount <= excessReserves(), \\\"Treasury: Insufficient reserves\\\");\\n\\n        IERC20Mintable(s.Necc).mint(_recipient, _amount);\\n\\n        emit RewardsMinted(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for Necc\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_) {\\n        if (s.isReserveToken[_token]) {\\n            require(s.isReserveDepositor[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else if (s.isLiquidityToken[_token]) {\\n            require(\\n                s.isLiquidityDepositor[msg.sender],\\n                \\\"Treasury: Not approved\\\"\\n            );\\n        } else {\\n            revert InvalidToken(_token);\\n        }\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 value = valueOfToken(_token, _amount);\\n        // mint Necc needed and store amount of rewards for distribution\\n        send_ = value.sub(_profit);\\n        IERC20Mintable(s.Necc).mint(msg.sender, send_);\\n\\n        s.totalReserves = s.totalReserves.add(value);\\n\\n        emit ReservesUpdated(s.totalReserves);\\n        emit Deposit(_token, _amount, value);\\n\\n        return send_;\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for Necc\\n        @param _amount uint\\n        @param _token address\\n        @param _value uint\\n        @param _profit uint\\n     */\\n    function depositLP(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _value,\\n        uint256 _profit\\n    ) external {\\n        if (s.isLiquidityToken[_token]) {\\n            require(\\n                s.isLiquidityDepositor[msg.sender],\\n                \\\"Treasury: Not approved\\\"\\n            );\\n        } else {\\n            revert InvalidToken(_token);\\n        }\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // mint Necc needed and store amount of rewards for distribution\\n        IERC20Mintable(s.Necc).mint(msg.sender, _value.sub(_profit));\\n\\n        s.totalReserves = s.totalReserves.add(_value);\\n\\n        emit ReservesUpdated(s.totalReserves);\\n        emit Deposit(_token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to burn Necc for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw(uint256 _amount, address _token) external {\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\"); // Only reserves can be used for redemptions\\n        require(\\n            s.isReserveSpender[msg.sender] == true,\\n            \\\"Treasury: Not approved\\\"\\n        );\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _value);\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdrawal(_token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt(uint256 _amount, address _token) external {\\n        uint256 _value;\\n        if (_token == address(s.Necc)) {\\n            require(\\n                s.isReserveDepositor[msg.sender],\\n                \\\"Treasury: Debtor Not approved\\\"\\n            );\\n            _value = _amount;\\n        } else {\\n            require(\\n                s.isReserveDepositor[msg.sender],\\n                \\\"Treasury: Debtor Not approved\\\"\\n            );\\n            require(\\n                s.isReserveToken[_token],\\n                \\\"Treasury: Reserve Token Not approved\\\"\\n            );\\n            _value = valueOfToken(_token, _amount);\\n        }\\n        require(_value != 0, \\\"Treasury: Invalid token\\\");\\n\\n        IsNecc(s.sNecc).changeDebt(_value, msg.sender, true);\\n        s.totalDebt = s.totalDebt.add(_value);\\n\\n        if (_token == address(s.Necc)) {\\n            IERC20Mintable(s.Necc).mint(msg.sender, _value);\\n            s.neccDebt = s.neccDebt.add(_value);\\n        } else {\\n            s.totalReserves = s.totalReserves.sub(_value);\\n            IERC20(_token).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        emit CreateDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve(uint256 _amount, address _token) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        IsNecc(s.sNecc).changeDebt(_value, msg.sender, false);\\n        s.totalDebt = s.totalDebt.sub(_value);\\n        s.totalReserves = s.totalReserves.add(_value);\\n\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        emit RepayDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with Necc\\n        @param _amount uint\\n     */\\n    function repayDebtWithNecc(uint256 _amount) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _amount);\\n        IsNecc(s.sNecc).changeDebt(_amount, msg.sender, false);\\n\\n        s.totalDebt = s.totalDebt.sub(_amount);\\n        s.neccDebt = s.neccDebt.sub(_amount);\\n        emit RepayDebt(msg.sender, s.Necc, _amount, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage(address _token, uint256 _amount) external {\\n        if (s.isLiquidityToken[_token]) {\\n            require(s.isLiquidityManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else {\\n            require(s.isReserveManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        }\\n\\n        if (s.isLiquidityToken[_token] || s.isReserveToken[_token]) {\\n            uint256 _value = valueOfToken(_token, _amount);\\n            require(\\n                _value <= excessReserves(),\\n                \\\"Treasury: Insufficient reserves\\\"\\n            );\\n            s.totalReserves = s.totalReserves.sub(_value);\\n        }\\n\\n        emit ReservesUpdated(s.totalReserves);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit ReservesManaged(_token, _amount);\\n    }\\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns (uint256) {\\n        return\\n            s.totalReserves.sub(IERC20(s.Necc).totalSupply().sub(s.totalDebt));\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external {\\n        onlyGov();\\n        uint256 reserves;\\n        for (uint256 i = 0; i < s.reserveTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.reserveTokens[i],\\n                    IERC20(s.reserveTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        for (uint256 i = 0; i < s.liquidityTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.liquidityTokens[i],\\n                    IERC20(s.liquidityTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        s.totalReserves = reserves;\\n        emit ReservesUpdated(reserves);\\n        emit ReservesAudited(reserves);\\n    }\\n\\n    /**\\n        @notice returns Necc valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return _value uint\\n     */\\n    function valueOfToken(address _token, uint256 _amount)\\n        public\\n        view\\n        returns (uint256 _value)\\n    {\\n        if (s.isReserveToken[_token]) {\\n            // convert amount to match Necc decimals\\n            _value = _amount.mul(10**IERC20Mintable(s.Necc).decimals()).div(\\n                10**IERC20Mintable(_token).decimals()\\n            );\\n        } else if (s.isLiquidityToken[_token]) {\\n            _value = IBondCalculator(address(this)).valuation(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            s.reserveDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            s.reserveSpenderQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            s.reserveTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            s.ReserveManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            s.LiquidityDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            s.LiquidityTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            s.LiquidityManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            s.debtorQueue[_address] = block.number.add(s.blocksNeededForQueue);\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            s.rewardManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.SNECC) {\\n            // 9\\n            s.sNeccQueue = block.number.add(s.blocksNeededForQueue);\\n        } else return false;\\n\\n        emit ChangeQueued(_managing, _address);\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function toggle(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        bool _result;\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            if (\\n                requirements(\\n                    s.reserveDepositorQueue,\\n                    s.isReserveDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.reserveDepositorQueue[_address] = 0;\\n                if (!listContains(s.reserveDepositors, _address)) {\\n                    s.reserveDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveDepositor[_address];\\n            s.isReserveDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            if (\\n                requirements(\\n                    s.reserveSpenderQueue,\\n                    s.isReserveSpender,\\n                    _address\\n                )\\n            ) {\\n                s.reserveSpenderQueue[_address] = 0;\\n                if (!listContains(s.reserveSpenders, _address)) {\\n                    s.reserveSpenders.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveSpender[_address];\\n            s.isReserveSpender[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            if (requirements(s.reserveTokenQueue, s.isReserveToken, _address)) {\\n                s.reserveTokenQueue[_address] = 0;\\n                if (!listContains(s.reserveTokens, _address)) {\\n                    s.reserveTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveToken[_address];\\n            s.isReserveToken[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            if (\\n                requirements(\\n                    s.ReserveManagerQueue,\\n                    s.isReserveManager,\\n                    _address\\n                )\\n            ) {\\n                s.reserveManagers.push(_address);\\n                s.ReserveManagerQueue[_address] = 0;\\n                if (!listContains(s.reserveManagers, _address)) {\\n                    s.reserveManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveManager[_address];\\n            s.isReserveManager[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            if (\\n                requirements(\\n                    s.LiquidityDepositorQueue,\\n                    s.isLiquidityDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.liquidityDepositors.push(_address);\\n                s.LiquidityDepositorQueue[_address] = 0;\\n                if (!listContains(s.liquidityDepositors, _address)) {\\n                    s.liquidityDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityDepositor[_address];\\n            s.isLiquidityDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            if (\\n                requirements(\\n                    s.LiquidityTokenQueue,\\n                    s.isLiquidityToken,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityTokenQueue[_address] = 0;\\n                if (!listContains(s.liquidityTokens, _address)) {\\n                    s.liquidityTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityToken[_address];\\n            s.isLiquidityToken[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            if (\\n                requirements(\\n                    s.LiquidityManagerQueue,\\n                    s.isLiquidityManager,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityManagerQueue[_address] = 0;\\n                if (!listContains(s.liquidityManagers, _address)) {\\n                    s.liquidityManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityManager[_address];\\n            s.isLiquidityManager[_address] = _result;\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            if (requirements(s.debtorQueue, s.isDebtor, _address)) {\\n                s.debtorQueue[_address] = 0;\\n                if (!listContains(s.debtors, _address)) {\\n                    s.debtors.push(_address);\\n                }\\n            }\\n            _result = !s.isDebtor[_address];\\n            s.isDebtor[_address] = _result;\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            if (\\n                requirements(s.rewardManagerQueue, s.isRewardManager, _address)\\n            ) {\\n                s.rewardManagerQueue[_address] = 0;\\n                if (!listContains(s.rewardManagers, _address)) {\\n                    s.rewardManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isRewardManager[_address];\\n            s.isRewardManager[_address] = _result;\\n        } else if (_managing == MANAGING.SNECC) {\\n            // 9\\n            s.sNeccQueue = 0;\\n            s.sNecc = _address;\\n            _result = true;\\n        } else return false;\\n\\n        emit ChangeActivated(_managing, _address, _result);\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements(\\n        mapping(address => uint256) storage queue_,\\n        mapping(address => bool) storage status_,\\n        address _address\\n    ) internal view returns (bool) {\\n        if (!status_[_address]) {\\n            require(queue_[_address] != 0, \\\"Must queue\\\");\\n            require(queue_[_address] <= block.number, \\\"Queue not expired\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains(address[] storage _list, address _token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _list.length; i++) {\\n            if (_list[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isReserveToken(address _principle) external view returns (bool) {\\n        return s.isReserveToken[_principle];\\n    }\\n\\n    function isReserveDepositor(address _depositor)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return s.isReserveDepositor[_depositor];\\n    }\\n\\n    /**\\n     * @notice returns supply metric that cannot be manipulated by debt\\n     * @dev use this any time you need to query supply\\n     */\\n    function baseSupply() external view returns (uint256) {\\n        return IERC20(s.Necc).totalSupply() - s.neccDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x63b0161057f289e814b443efa635bf85ee3130196c5c383e260d73e96d0cf64c\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibTreasuryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary LibTreasuryStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.treasury.storage\\\");\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc;\\n        address sNecc;\\n        address nNecc;\\n        uint256 blocksNeededForQueue;\\n        address[] reserveTokens; // Push only, beware false-positives.\\n        uint256 sNeccQueue; // Delays change to sNecc address\\n        uint256 totalReserves; // Risk-free value of all assets\\n        uint256 totalDebt;\\n        uint256 neccDebt;\\n        mapping(address => bool) isReserveToken;\\n        mapping(address => uint256) reserveTokenQueue; // Delays changes to mapping.\\n        address[] reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveDepositor;\\n        mapping(address => uint256) reserveDepositorQueue; // Delays changes to mapping.\\n        address[] reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveSpender;\\n        mapping(address => uint256) reserveSpenderQueue; // Delays changes to mapping.\\n        address[] liquidityTokens; // Push only, beware false-positives.\\n        mapping(address => bool) isLiquidityToken;\\n        mapping(address => uint256) LiquidityTokenQueue; // Delays changes to mapping.\\n        address[] liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityDepositor;\\n        mapping(address => uint256) LiquidityDepositorQueue; // Delays changes to mapping.\\n        address[] reserveManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveManager;\\n        mapping(address => uint256) ReserveManagerQueue; // Delays changes to mapping.\\n        address[] liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityManager;\\n        mapping(address => uint256) LiquidityManagerQueue; // Delays changes to mapping.\\n        address[] debtors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isDebtor;\\n        mapping(address => uint256) debtorQueue; // Delays changes to mapping.\\n        address[] rewardManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isRewardManager;\\n        mapping(address => uint256) rewardManagerQueue; // Delays changes to mapping.\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xbbae2169fb36d831f6acd76ea867eedab150b06449168648d03a453e4439d062\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ea7806100206000396000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c80636a20de92116100b2578063d1b317e511610081578063d796ffb811610066578063d796ffb81461025f578063e5f12b7614610272578063e83afee31461028557600080fd5b8063d1b317e514610239578063d5e8be0d1461024c57600080fd5b80636a20de92146101f8578063860f50481461020b578063bc157ac114610213578063cad9311e1461022657600080fd5b8063124154ca116100ee578063124154ca1461017557806312422d23146101b15780632b7ce500146101c457806368c31dd5146101cc57600080fd5b8062f714ce1461011f578063082db9d7146101345780630b0eee30146101475780630c3513a81461015a575b600080fd5b61013261012d366004612a78565b610298565b005b610132610142366004612aa4565b61048c565b610132610155366004612adf565b61067b565b6101626108a1565b6040519081526020015b60405180910390f35b6101a1610183366004612b09565b6001600160a01b03166000908152600c602052604090205460ff1690565b604051901515815260200161016c565b6101326101bf366004612a78565b61093c565b610132610c7b565b6101a16101da366004612b09565b6001600160a01b031660009081526009602052604090205460ff1690565b610132610206366004612adf565b610e4b565b610162610fd1565b610162610221366004612b24565b611069565b610132610234366004612b59565b611289565b610162610247366004612adf565b61143e565b6101a161025a366004612b72565b611628565b61013261026d366004612a78565b611ebd565b610132610280366004612ba2565b6120a0565b6101a1610293366004612b72565b612177565b6001600160a01b03811660009081526009602052604090205460ff166103055760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f742061636365707465640000000000000000000060448201526064015b60405180910390fd5b336000908152600f602052604090205460ff1615156001146103695760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6000610375828461143e565b6000546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505060065461040192509050826124a8565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a26104436001600160a01b03831633856124b4565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb910160405180910390a2505050565b6001600160a01b03831660009081526012602052604090205460ff1615610511573360009081526015602052604090205460ff1661050c5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61054e565b6040517f961c9a4f0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016102fc565b6105636001600160a01b038416333087612562565b6000546001600160a01b03166340c10f193361057f85856124a8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b505060065461060392509050836125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a250505050565b6001600160a01b03821660009081526012602052604090205460ff161561070057336000908152601b602052604090205460ff166106fb5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61075f565b3360009081526018602052604090205460ff1661075f5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6001600160a01b03821660009081526012602052604090205460ff168061079e57506001600160a01b03821660009081526009602052604090205460ff165b1561081a5760006107af838361143e565b90506107b96108a1565b8111156108085760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20496e73756666696369656e742072657365727665730060448201526064016102fc565b60065461081590826124a8565b600655505b6006546040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a261085a6001600160a01b03831633836124b4565b816001600160a01b03167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd808260405161089591815260200190565b60405180910390a25050565b600061093761092e6000600701546000800160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190612bfe565b906124a8565b600654906124a8565b905090565b600080546001600160a01b03838116911614156109b957336000908152600c602052604090205460ff166109b25760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20446562746f72204e6f7420617070726f76656400000060448201526064016102fc565b5081610ab2565b336000908152600c602052604090205460ff16610a185760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20446562746f72204e6f7420617070726f76656400000060448201526064016102fc565b6001600160a01b03821660009081526009602052604090205460ff16610aa55760405162461bcd60e51b8152602060048201526024808201527f54726561737572793a205265736572766520546f6b656e204e6f74206170707260448201527f6f7665640000000000000000000000000000000000000000000000000000000060648201526084016102fc565b610aaf828461143e565b90505b80610aff5760405162461bcd60e51b815260206004820152601760248201527f54726561737572793a20496e76616c696420746f6b656e00000000000000000060448201526064016102fc565b6001805460405163ae5c6cd360e01b81526004810184905233602482015260448101929092526001600160a01b03169063ae5c6cd390606401600060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b5050600754610b7892509050826125b9565b6007556000546001600160a01b0383811691161415610c0b576000546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050600854610c0392509050826125b9565b600855610c2f565b600654610c1890826124a8565b600655610c2f6001600160a01b03831633856124b4565b60408051848152602081018390526001600160a01b0384169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d691015b60405180910390a3505050565b610c836125c5565b6000805b600454811015610d8257610d6e610d6760006004018381548110610cad57610cad612c17565b600091825260209091200154600480546001600160a01b039092169185908110610cd957610cd9612c17565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190612bfe565b83906125b9565b915080610d7a81612c43565b915050610c87565b5060005b601154811015610dec57610dd8610d6760006011018381548110610dac57610dac612c17565b600091825260209091200154601180546001600160a01b039092169185908110610cd957610cd9612c17565b915080610de481612c43565b915050610d86565b50600681905560405181907f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260405181907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a250565b3360009081526021602052604090205460ff16610ed05760405162461bcd60e51b815260206004820152602560248201527f54726561737572793a20526577617264204d616e61676572204e6f742061707060448201527f726f76656400000000000000000000000000000000000000000000000000000060648201526084016102fc565b610ed86108a1565b811115610f275760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20496e73756666696369656e742072657365727665730060448201526064016102fc565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610f7557600080fd5b505af1158015610f89573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c9060200160405180910390a35050565b60085460008054604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290519293926001600160a01b03909216916318160ddd916004808201926020929091908290030181865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190612bfe565b6109379190612c5e565b6001600160a01b03821660009081526009602052604081205460ff16156110ee57336000908152600c602052604090205460ff166110e95760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61116e565b6001600160a01b03831660009081526012602052604090205460ff1615610511573360009081526015602052604090205460ff166110e95760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6111836001600160a01b038416333087612562565b600061118f848661143e565b905061119b81846124a8565b6000546040516340c10f1960e01b8152336004820152602481018390529193506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b505060065461120e92509050826125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2505b9392505050565b336000908152601e602052604090205460ff166112e85760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6000546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b505060015460405163ae5c6cd360e01b815260048101859052336024820152600060448201526001600160a01b03909116925063ae5c6cd39150606401600060405180830381600087803b1580156113b857600080fd5b505af11580156113cc573d6000803e3d6000fd5b50506007546113de92509050826124a8565b6007556008546113ee90826124a8565b60085560005460408051838152602081018490526001600160a01b039092169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b6001600160a01b03821660009081526009602052604081205460ff16156115765761156f836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612bfe565b6114cf90600a612d59565b600054604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051611569926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190612bfe565b61156290600a612d59565b85906125cf565b906125db565b9050611622565b6001600160a01b03831660009081526012602052604090205460ff1615611622576040517f4249719f0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602481018390523090634249719f90604401602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190612bfe565b90505b92915050565b60006116326125c5565b6001600160a01b03821661164557600080fd5b60008084600981111561165a5761165a612d65565b14156117165761166d600d600c856125e7565b156116e6576001600160a01b0383166000908152600d6020526040812055611696600b846126e6565b6116e657600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600c60205260409020805460ff81161560ff199091168117909155611e5e565b600184600981111561172a5761172a612d65565b14156117e65761173d6010600f856125e7565b156117b6576001600160a01b038316600090815260106020526040812055611766600e846126e6565b6117b657600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600f60205260409020805460ff81161560ff199091168117909155611e5e565b60028460098111156117fa576117fa612d65565b14156118b65761180d600a6009856125e7565b15611886576001600160a01b0383166000908152600a60205260408120556118366004846126e6565b61188657600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600960205260409020805460ff81161560ff199091168117909155611e5e565b60038460098111156118ca576118ca612d65565b14156119c3576118dd60196018856125e7565b1561199357601780546001810182557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b03861690811790915560009081526019602052604081205561194390846126e6565b61199357601780546001810182556000919091527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601860205260409020805460ff81161560ff199091168117909155611e5e565b60048460098111156119d7576119d7612d65565b1415611ad0576119ea60166015856125e7565b15611aa057601480546001810182557fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b038616908117909155600090815260166020526040812055611a5090846126e6565b611aa057601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601560205260409020805460ff81161560ff199091168117909155611e5e565b6005846009811115611ae457611ae4612d65565b1415611ba057611af760136012856125e7565b15611b70576001600160a01b038316600090815260136020526040812055611b206011846126e6565b611b7057601180546001810182556000919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601260205260409020805460ff81161560ff199091168117909155611e5e565b6006846009811115611bb457611bb4612d65565b1415611c7057611bc7601c601b856125e7565b15611c40576001600160a01b0383166000908152601c6020526040812055611bf0601a846126e6565b611c4057601a80546001810182556000919091527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601b60205260409020805460ff81161560ff199091168117909155611e5e565b6007846009811115611c8457611c84612d65565b1415611d4057611c97601f601e856125e7565b15611d10576001600160a01b0383166000908152601f6020526040812055611cc0601d846126e6565b611d1057601d80546001810182556000919091527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601e60205260409020805460ff81161560ff199091168117909155611e5e565b6008846009811115611d5457611d54612d65565b1415611e1457611d6760226021856125e7565b15611de4576001600160a01b0383166000908152602260209081526040822091909155611d9490846126e6565b611de457602080546001810182556000919091527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152602160205260409020805460ff81161560ff199091168117909155611e5e565b6009846009811115611e2857611e28612d65565b1415611e5457506000600555600180546001600160a01b0319166001600160a01b038416178155611e5e565b6000915050611622565b836009811115611e7057611e70612d65565b604080516001600160a01b038616815283151560208201527f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc477910160405180910390a25060019392505050565b336000908152601e602052604090205460ff16611f1c5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6001600160a01b03811660009081526009602052604090205460ff16611f845760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f742061636365707465640000000000000000000060448201526064016102fc565b611f996001600160a01b038216333085612562565b6000611fa5828461143e565b60015460405163ae5c6cd360e01b815260048101839052336024820152600060448201529192506001600160a01b03169063ae5c6cd390606401600060405180830381600087803b158015611ff957600080fd5b505af115801561200d573d6000803e3d6000fd5b505060075461201f92509050826124a8565b60075560065461202f90826125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f3099101610c6e565b6120a86125c5565b6001600160a01b0385166120bb57600080fd5b6001600160a01b0384166120ce57600080fd5b6001600160a01b0383166120e157600080fd5b600080546001600160a01b03199081166001600160a01b039788161782556001805482169688169690961786556002805482169588169590951790945591909416808252600960205260408220805460ff1916851790556004805494850181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180549091169091179055600355565b60006121816125c5565b6001600160a01b03821661219457600080fd5b60008360098111156121a8576121a8612d65565b14156121da576003546121bc9043906125b9565b6001600160a01b0383166000908152600d6020526040902055612451565b60018360098111156121ee576121ee612d65565b1415612220576003546122029043906125b9565b6001600160a01b038316600090815260106020526040902055612451565b600283600981111561223457612234612d65565b1415612266576003546122489043906125b9565b6001600160a01b0383166000908152600a6020526040902055612451565b600383600981111561227a5761227a612d65565b14156122b757600354612299906122929060026125cf565b43906125b9565b6001600160a01b038316600090815260196020526040902055612451565b60048360098111156122cb576122cb612d65565b14156122fd576003546122df9043906125b9565b6001600160a01b038316600090815260166020526040902055612451565b600583600981111561231157612311612d65565b1415612343576003546123259043906125b9565b6001600160a01b038316600090815260136020526040902055612451565b600683600981111561235757612357612d65565b141561238d5760035461236f906122929060026125cf565b6001600160a01b0383166000908152601c6020526040902055612451565b60078360098111156123a1576123a1612d65565b14156123d3576003546123b59043906125b9565b6001600160a01b0383166000908152601f6020526040902055612451565b60088360098111156123e7576123e7612d65565b1415612419576003546123fb9043906125b9565b6001600160a01b038316600090815260226020526040902055612451565b600983600981111561242d5761242d612d65565b1415612449576003546124419043906125b9565b600555612451565b506000611622565b82600981111561246357612463612d65565b6040516001600160a01b03841681527f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf9060200160405180910390a250600192915050565b600061161f8284612c5e565b6040516001600160a01b03831660248201526044810182905261255d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612746565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125b39085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016124f9565b50505050565b600061161f8284612d7b565b6125cd61282b565b565b600061161f8284612d93565b600061161f8284612db2565b6001600160a01b03811660009081526020839052604081205460ff166126dc576001600160a01b03821660009081526020859052604090205461266c5760405162461bcd60e51b815260206004820152600a60248201527f4d7573742071756575650000000000000000000000000000000000000000000060448201526064016102fc565b6001600160a01b0382166000908152602085905260409020544310156126d45760405162461bcd60e51b815260206004820152601160248201527f5175657565206e6f74206578706972656400000000000000000000000000000060448201526064016102fc565b506001611282565b5060009392505050565b6000805b83548110156126dc57826001600160a01b031684828154811061270f5761270f612c17565b6000918252602090912001546001600160a01b03161415612734576001915050611622565b8061273e81612c43565b9150506126ea565b600061279b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128cd9092919063ffffffff16565b80519091501561255d57808060200190518101906127b99190612dd4565b61255d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102fc565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146125cd5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016102fc565b60606128dc84846000856128e4565b949350505050565b60608247101561295c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102fc565b843b6129aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102fc565b600080866001600160a01b031685876040516129c69190612e22565b60006040518083038185875af1925050503d8060008114612a03576040519150601f19603f3d011682016040523d82523d6000602084013e612a08565b606091505b5091509150612a18828286612a23565b979650505050505050565b60608315612a32575081611282565b825115612a425782518084602001fd5b8160405162461bcd60e51b81526004016102fc9190612e3e565b80356001600160a01b0381168114612a7357600080fd5b919050565b60008060408385031215612a8b57600080fd5b82359150612a9b60208401612a5c565b90509250929050565b60008060008060808587031215612aba57600080fd5b84359350612aca60208601612a5c565b93969395505050506040820135916060013590565b60008060408385031215612af257600080fd5b612afb83612a5c565b946020939093013593505050565b600060208284031215612b1b57600080fd5b61161f82612a5c565b600080600060608486031215612b3957600080fd5b83359250612b4960208501612a5c565b9150604084013590509250925092565b600060208284031215612b6b57600080fd5b5035919050565b60008060408385031215612b8557600080fd5b8235600a8110612b9457600080fd5b9150612a9b60208401612a5c565b600080600080600060a08688031215612bba57600080fd5b612bc386612a5c565b9450612bd160208701612a5c565b9350612bdf60408701612a5c565b9250612bed60608701612a5c565b949793965091946080013592915050565b600060208284031215612c1057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c5757612c57612c2d565b5060010190565b600082821015612c7057612c70612c2d565b500390565b600181815b80851115612cb0578160001904821115612c9657612c96612c2d565b80851615612ca357918102915b93841c9390800290612c7a565b509250929050565b600082612cc757506001611622565b81612cd457506000611622565b8160018114612cea5760028114612cf457612d10565b6001915050611622565b60ff841115612d0557612d05612c2d565b50506001821b611622565b5060208310610133831016604e8410600b8410161715612d33575081810a611622565b612d3d8383612c75565b8060001904821115612d5157612d51612c2d565b029392505050565b600061161f8383612cb8565b634e487b7160e01b600052602160045260246000fd5b60008219821115612d8e57612d8e612c2d565b500190565b6000816000190483118215151615612dad57612dad612c2d565b500290565b600082612dcf57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612de657600080fd5b8151801515811461128257600080fd5b60005b83811015612e11578181015183820152602001612df9565b838111156125b35750506000910152565b60008251612e34818460208701612df6565b9190910192915050565b6020815260008251806020840152612e5d816040850160208701612df6565b601f01601f1916919091016040019291505056fea26469706673582212202ce481dd9aacc40a6456f6a785ba58241fbc55e23e6a8460e03f129dfe9d77ca64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011a5760003560e01c80636a20de92116100b2578063d1b317e511610081578063d796ffb811610066578063d796ffb81461025f578063e5f12b7614610272578063e83afee31461028557600080fd5b8063d1b317e514610239578063d5e8be0d1461024c57600080fd5b80636a20de92146101f8578063860f50481461020b578063bc157ac114610213578063cad9311e1461022657600080fd5b8063124154ca116100ee578063124154ca1461017557806312422d23146101b15780632b7ce500146101c457806368c31dd5146101cc57600080fd5b8062f714ce1461011f578063082db9d7146101345780630b0eee30146101475780630c3513a81461015a575b600080fd5b61013261012d366004612a78565b610298565b005b610132610142366004612aa4565b61048c565b610132610155366004612adf565b61067b565b6101626108a1565b6040519081526020015b60405180910390f35b6101a1610183366004612b09565b6001600160a01b03166000908152600c602052604090205460ff1690565b604051901515815260200161016c565b6101326101bf366004612a78565b61093c565b610132610c7b565b6101a16101da366004612b09565b6001600160a01b031660009081526009602052604090205460ff1690565b610132610206366004612adf565b610e4b565b610162610fd1565b610162610221366004612b24565b611069565b610132610234366004612b59565b611289565b610162610247366004612adf565b61143e565b6101a161025a366004612b72565b611628565b61013261026d366004612a78565b611ebd565b610132610280366004612ba2565b6120a0565b6101a1610293366004612b72565b612177565b6001600160a01b03811660009081526009602052604090205460ff166103055760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f742061636365707465640000000000000000000060448201526064015b60405180910390fd5b336000908152600f602052604090205460ff1615156001146103695760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6000610375828461143e565b6000546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505060065461040192509050826124a8565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a26104436001600160a01b03831633856124b4565b60408051848152602081018390526001600160a01b038416917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb910160405180910390a2505050565b6001600160a01b03831660009081526012602052604090205460ff1615610511573360009081526015602052604090205460ff1661050c5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61054e565b6040517f961c9a4f0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016102fc565b6105636001600160a01b038416333087612562565b6000546001600160a01b03166340c10f193361057f85856124a8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b505060065461060392509050836125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a250505050565b6001600160a01b03821660009081526012602052604090205460ff161561070057336000908152601b602052604090205460ff166106fb5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61075f565b3360009081526018602052604090205460ff1661075f5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6001600160a01b03821660009081526012602052604090205460ff168061079e57506001600160a01b03821660009081526009602052604090205460ff165b1561081a5760006107af838361143e565b90506107b96108a1565b8111156108085760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20496e73756666696369656e742072657365727665730060448201526064016102fc565b60065461081590826124a8565b600655505b6006546040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a261085a6001600160a01b03831633836124b4565b816001600160a01b03167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd808260405161089591815260200190565b60405180910390a25050565b600061093761092e6000600701546000800160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190612bfe565b906124a8565b600654906124a8565b905090565b600080546001600160a01b03838116911614156109b957336000908152600c602052604090205460ff166109b25760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20446562746f72204e6f7420617070726f76656400000060448201526064016102fc565b5081610ab2565b336000908152600c602052604090205460ff16610a185760405162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20446562746f72204e6f7420617070726f76656400000060448201526064016102fc565b6001600160a01b03821660009081526009602052604090205460ff16610aa55760405162461bcd60e51b8152602060048201526024808201527f54726561737572793a205265736572766520546f6b656e204e6f74206170707260448201527f6f7665640000000000000000000000000000000000000000000000000000000060648201526084016102fc565b610aaf828461143e565b90505b80610aff5760405162461bcd60e51b815260206004820152601760248201527f54726561737572793a20496e76616c696420746f6b656e00000000000000000060448201526064016102fc565b6001805460405163ae5c6cd360e01b81526004810184905233602482015260448101929092526001600160a01b03169063ae5c6cd390606401600060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b5050600754610b7892509050826125b9565b6007556000546001600160a01b0383811691161415610c0b576000546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050600854610c0392509050826125b9565b600855610c2f565b600654610c1890826124a8565b600655610c2f6001600160a01b03831633856124b4565b60408051848152602081018390526001600160a01b0384169133917f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d691015b60405180910390a3505050565b610c836125c5565b6000805b600454811015610d8257610d6e610d6760006004018381548110610cad57610cad612c17565b600091825260209091200154600480546001600160a01b039092169185908110610cd957610cd9612c17565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190612bfe565b83906125b9565b915080610d7a81612c43565b915050610c87565b5060005b601154811015610dec57610dd8610d6760006011018381548110610dac57610dac612c17565b600091825260209091200154601180546001600160a01b039092169185908110610cd957610cd9612c17565b915080610de481612c43565b915050610d86565b50600681905560405181907f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260405181907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a250565b3360009081526021602052604090205460ff16610ed05760405162461bcd60e51b815260206004820152602560248201527f54726561737572793a20526577617264204d616e61676572204e6f742061707060448201527f726f76656400000000000000000000000000000000000000000000000000000060648201526084016102fc565b610ed86108a1565b811115610f275760405162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20496e73756666696369656e742072657365727665730060448201526064016102fc565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610f7557600080fd5b505af1158015610f89573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c9060200160405180910390a35050565b60085460008054604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290519293926001600160a01b03909216916318160ddd916004808201926020929091908290030181865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190612bfe565b6109379190612c5e565b6001600160a01b03821660009081526009602052604081205460ff16156110ee57336000908152600c602052604090205460ff166110e95760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b61116e565b6001600160a01b03831660009081526012602052604090205460ff1615610511573360009081526015602052604090205460ff166110e95760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6111836001600160a01b038416333087612562565b600061118f848661143e565b905061119b81846124a8565b6000546040516340c10f1960e01b8152336004820152602481018390529193506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b505060065461120e92509050826125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051868152602081018390526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2505b9392505050565b336000908152601e602052604090205460ff166112e85760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6000546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b505060015460405163ae5c6cd360e01b815260048101859052336024820152600060448201526001600160a01b03909116925063ae5c6cd39150606401600060405180830381600087803b1580156113b857600080fd5b505af11580156113cc573d6000803e3d6000fd5b50506007546113de92509050826124a8565b6007556008546113ee90826124a8565b60085560005460408051838152602081018490526001600160a01b039092169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309910160405180910390a350565b6001600160a01b03821660009081526009602052604081205460ff16156115765761156f836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612bfe565b6114cf90600a612d59565b600054604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051611569926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190612bfe565b61156290600a612d59565b85906125cf565b906125db565b9050611622565b6001600160a01b03831660009081526012602052604090205460ff1615611622576040517f4249719f0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602481018390523090634249719f90604401602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190612bfe565b90505b92915050565b60006116326125c5565b6001600160a01b03821661164557600080fd5b60008084600981111561165a5761165a612d65565b14156117165761166d600d600c856125e7565b156116e6576001600160a01b0383166000908152600d6020526040812055611696600b846126e6565b6116e657600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600c60205260409020805460ff81161560ff199091168117909155611e5e565b600184600981111561172a5761172a612d65565b14156117e65761173d6010600f856125e7565b156117b6576001600160a01b038316600090815260106020526040812055611766600e846126e6565b6117b657600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600f60205260409020805460ff81161560ff199091168117909155611e5e565b60028460098111156117fa576117fa612d65565b14156118b65761180d600a6009856125e7565b15611886576001600160a01b0383166000908152600a60205260408120556118366004846126e6565b61188657600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152600960205260409020805460ff81161560ff199091168117909155611e5e565b60038460098111156118ca576118ca612d65565b14156119c3576118dd60196018856125e7565b1561199357601780546001810182557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b03861690811790915560009081526019602052604081205561194390846126e6565b61199357601780546001810182556000919091527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601860205260409020805460ff81161560ff199091168117909155611e5e565b60048460098111156119d7576119d7612d65565b1415611ad0576119ea60166015856125e7565b15611aa057601480546001810182557fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b038616908117909155600090815260166020526040812055611a5090846126e6565b611aa057601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601560205260409020805460ff81161560ff199091168117909155611e5e565b6005846009811115611ae457611ae4612d65565b1415611ba057611af760136012856125e7565b15611b70576001600160a01b038316600090815260136020526040812055611b206011846126e6565b611b7057601180546001810182556000919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601260205260409020805460ff81161560ff199091168117909155611e5e565b6006846009811115611bb457611bb4612d65565b1415611c7057611bc7601c601b856125e7565b15611c40576001600160a01b0383166000908152601c6020526040812055611bf0601a846126e6565b611c4057601a80546001810182556000919091527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601b60205260409020805460ff81161560ff199091168117909155611e5e565b6007846009811115611c8457611c84612d65565b1415611d4057611c97601f601e856125e7565b15611d10576001600160a01b0383166000908152601f6020526040812055611cc0601d846126e6565b611d1057601d80546001810182556000919091527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152601e60205260409020805460ff81161560ff199091168117909155611e5e565b6008846009811115611d5457611d54612d65565b1415611e1457611d6760226021856125e7565b15611de4576001600160a01b0383166000908152602260209081526040822091909155611d9490846126e6565b611de457602080546001810182556000919091527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0180546001600160a01b0319166001600160a01b0385161790555b506001600160a01b0382166000908152602160205260409020805460ff81161560ff199091168117909155611e5e565b6009846009811115611e2857611e28612d65565b1415611e5457506000600555600180546001600160a01b0319166001600160a01b038416178155611e5e565b6000915050611622565b836009811115611e7057611e70612d65565b604080516001600160a01b038616815283151560208201527f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc477910160405180910390a25060019392505050565b336000908152601e602052604090205460ff16611f1c5760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f7420617070726f7665640000000000000000000060448201526064016102fc565b6001600160a01b03811660009081526009602052604090205460ff16611f845760405162461bcd60e51b815260206004820152601660248201527f54726561737572793a204e6f742061636365707465640000000000000000000060448201526064016102fc565b611f996001600160a01b038216333085612562565b6000611fa5828461143e565b60015460405163ae5c6cd360e01b815260048101839052336024820152600060448201529192506001600160a01b03169063ae5c6cd390606401600060405180830381600087803b158015611ff957600080fd5b505af115801561200d573d6000803e3d6000fd5b505060075461201f92509050826124a8565b60075560065461202f90826125b9565b60068190556040517f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6690600090a260408051848152602081018390526001600160a01b0384169133917fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f3099101610c6e565b6120a86125c5565b6001600160a01b0385166120bb57600080fd5b6001600160a01b0384166120ce57600080fd5b6001600160a01b0383166120e157600080fd5b600080546001600160a01b03199081166001600160a01b039788161782556001805482169688169690961786556002805482169588169590951790945591909416808252600960205260408220805460ff1916851790556004805494850181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180549091169091179055600355565b60006121816125c5565b6001600160a01b03821661219457600080fd5b60008360098111156121a8576121a8612d65565b14156121da576003546121bc9043906125b9565b6001600160a01b0383166000908152600d6020526040902055612451565b60018360098111156121ee576121ee612d65565b1415612220576003546122029043906125b9565b6001600160a01b038316600090815260106020526040902055612451565b600283600981111561223457612234612d65565b1415612266576003546122489043906125b9565b6001600160a01b0383166000908152600a6020526040902055612451565b600383600981111561227a5761227a612d65565b14156122b757600354612299906122929060026125cf565b43906125b9565b6001600160a01b038316600090815260196020526040902055612451565b60048360098111156122cb576122cb612d65565b14156122fd576003546122df9043906125b9565b6001600160a01b038316600090815260166020526040902055612451565b600583600981111561231157612311612d65565b1415612343576003546123259043906125b9565b6001600160a01b038316600090815260136020526040902055612451565b600683600981111561235757612357612d65565b141561238d5760035461236f906122929060026125cf565b6001600160a01b0383166000908152601c6020526040902055612451565b60078360098111156123a1576123a1612d65565b14156123d3576003546123b59043906125b9565b6001600160a01b0383166000908152601f6020526040902055612451565b60088360098111156123e7576123e7612d65565b1415612419576003546123fb9043906125b9565b6001600160a01b038316600090815260226020526040902055612451565b600983600981111561242d5761242d612d65565b1415612449576003546124419043906125b9565b600555612451565b506000611622565b82600981111561246357612463612d65565b6040516001600160a01b03841681527f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf9060200160405180910390a250600192915050565b600061161f8284612c5e565b6040516001600160a01b03831660248201526044810182905261255d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612746565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125b39085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016124f9565b50505050565b600061161f8284612d7b565b6125cd61282b565b565b600061161f8284612d93565b600061161f8284612db2565b6001600160a01b03811660009081526020839052604081205460ff166126dc576001600160a01b03821660009081526020859052604090205461266c5760405162461bcd60e51b815260206004820152600a60248201527f4d7573742071756575650000000000000000000000000000000000000000000060448201526064016102fc565b6001600160a01b0382166000908152602085905260409020544310156126d45760405162461bcd60e51b815260206004820152601160248201527f5175657565206e6f74206578706972656400000000000000000000000000000060448201526064016102fc565b506001611282565b5060009392505050565b6000805b83548110156126dc57826001600160a01b031684828154811061270f5761270f612c17565b6000918252602090912001546001600160a01b03161415612734576001915050611622565b8061273e81612c43565b9150506126ea565b600061279b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128cd9092919063ffffffff16565b80519091501561255d57808060200190518101906127b99190612dd4565b61255d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102fc565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146125cd5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016102fc565b60606128dc84846000856128e4565b949350505050565b60608247101561295c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102fc565b843b6129aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102fc565b600080866001600160a01b031685876040516129c69190612e22565b60006040518083038185875af1925050503d8060008114612a03576040519150601f19603f3d011682016040523d82523d6000602084013e612a08565b606091505b5091509150612a18828286612a23565b979650505050505050565b60608315612a32575081611282565b825115612a425782518084602001fd5b8160405162461bcd60e51b81526004016102fc9190612e3e565b80356001600160a01b0381168114612a7357600080fd5b919050565b60008060408385031215612a8b57600080fd5b82359150612a9b60208401612a5c565b90509250929050565b60008060008060808587031215612aba57600080fd5b84359350612aca60208601612a5c565b93969395505050506040820135916060013590565b60008060408385031215612af257600080fd5b612afb83612a5c565b946020939093013593505050565b600060208284031215612b1b57600080fd5b61161f82612a5c565b600080600060608486031215612b3957600080fd5b83359250612b4960208501612a5c565b9150604084013590509250925092565b600060208284031215612b6b57600080fd5b5035919050565b60008060408385031215612b8557600080fd5b8235600a8110612b9457600080fd5b9150612a9b60208401612a5c565b600080600080600060a08688031215612bba57600080fd5b612bc386612a5c565b9450612bd160208701612a5c565b9350612bdf60408701612a5c565b9250612bed60608701612a5c565b949793965091946080013592915050565b600060208284031215612c1057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c5757612c57612c2d565b5060010190565b600082821015612c7057612c70612c2d565b500390565b600181815b80851115612cb0578160001904821115612c9657612c96612c2d565b80851615612ca357918102915b93841c9390800290612c7a565b509250929050565b600082612cc757506001611622565b81612cd457506000611622565b8160018114612cea5760028114612cf457612d10565b6001915050611622565b60ff841115612d0557612d05612c2d565b50506001821b611622565b5060208310610133831016604e8410600b8410161715612d33575081810a611622565b612d3d8383612c75565b8060001904821115612d5157612d51612c2d565b029392505050565b600061161f8383612cb8565b634e487b7160e01b600052602160045260246000fd5b60008219821115612d8e57612d8e612c2d565b500190565b6000816000190483118215151615612dad57612dad612c2d565b500290565b600082612dcf57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612de657600080fd5b8151801515811461128257600080fd5b60005b83811015612e11578181015183820152602001612df9565b838111156125b35750506000910152565b60008251612e34818460208701612df6565b9190910192915050565b6020815260008251806020840152612e5d816040850160208701612df6565b601f01601f1916919091016040019291505056fea26469706673582212202ce481dd9aacc40a6456f6a785ba58241fbc55e23e6a8460e03f129dfe9d77ca64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "baseSupply()": {
        "details": "use this any time you need to query supply"
      },
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint",
          "_profit": "uint",
          "_token": "address"
        },
        "returns": {
          "send_": "uint"
        }
      },
      "depositLP(uint256,address,uint256,uint256)": {
        "params": {
          "_amount": "uint",
          "_profit": "uint",
          "_token": "address",
          "_value": "uint"
        }
      },
      "excessReserves()": {
        "returns": {
          "_0": "uint"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "queue(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "repayDebtWithNecc(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "toggle(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "valueOfToken(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        },
        "returns": {
          "_value": "uint"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "baseSupply()": {
        "notice": "returns supply metric that cannot be manipulated by debt"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for Necc"
      },
      "depositLP(uint256,address,uint256,uint256)": {
        "notice": "allow approved address to deposit an asset for Necc"
      },
      "excessReserves()": {
        "notice": "returns excess reserves not backing tokens"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mintRewards(address,uint256)": {
        "notice": "send epoch reward to staking contract"
      },
      "queue(uint8,address)": {
        "notice": "queue address to change boolean in mapping"
      },
      "repayDebtWithNecc(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with Necc"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "toggle(uint8,address)": {
        "notice": "verify queue then set boolean in mapping"
      },
      "valueOfToken(address,uint256)": {
        "notice": "returns Necc valuation of asset"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn Necc for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10398,
        "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21368_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Storage)21368_storage": {
        "encoding": "inplace",
        "label": "struct LibTreasuryStorage.Storage",
        "members": [
          {
            "astId": 21254,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21256,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21258,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21260,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "blocksNeededForQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21263,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21265,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "sNeccQueue",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21267,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalReserves",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 21269,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 21271,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "neccDebt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 21275,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveToken",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21279,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokenQueue",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21282,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositors",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21286,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveDepositor",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21290,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositorQueue",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21293,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenders",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21297,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveSpender",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21301,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenderQueue",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21304,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityTokens",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21308,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityToken",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21312,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityTokenQueue",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21315,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityDepositors",
            "offset": 0,
            "slot": "20",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21319,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityDepositor",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21323,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityDepositorQueue",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21326,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveManagers",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21330,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveManager",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21334,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "ReserveManagerQueue",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21337,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityManagers",
            "offset": 0,
            "slot": "26",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21341,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityManager",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21345,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityManagerQueue",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21348,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtors",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21352,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isDebtor",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21356,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtorQueue",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21359,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagers",
            "offset": 0,
            "slot": "32",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21363,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isRewardManager",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21367,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagerQueue",
            "offset": 0,
            "slot": "34",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "1120"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}