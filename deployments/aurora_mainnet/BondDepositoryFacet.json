{
  "address": "0xd1be795E17279ff04Ba9269ccd3a916495D48029",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "InvalidPrinciple",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "BCV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "BCV_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "bondFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vesting",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Bond",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "controlVariable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTerm",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLiquidityBond",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Terms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8b4c14075bb3f9b14f359388f32f49277a3fd0d0072b01d1b2fa98a032061a6",
  "receipt": {
    "to": null,
    "from": "0xdF1d35b28dadeC2fFe56f72614e62B08A757CA31",
    "contractAddress": "0xd1be795E17279ff04Ba9269ccd3a916495D48029",
    "transactionIndex": 1,
    "gasUsed": "2199689",
    "logsBloom": "0x
    "blockHash": "0xea98e46ed3bc8173032a4b5ba74d239d4f2d9b7c445800d46ae93fdd62bdb55c",
    "transactionHash": "0xf8b4c14075bb3f9b14f359388f32f49277a3fd0d0072b01d1b2fa98a032061a6",
    "logs": [],
    "blockNumber": 55756826,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "00bf78e0b4cf7e7809f0756aa271ebf8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"InvalidPrinciple\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"BCV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BCV_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"bondFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Bond\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityBond\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Terms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice(address)\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD(address)\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt(address)\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay(address)\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio(address)\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"maxPayout(address)\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256,address)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"redeem(address,address)\":{\"params\":{\"_principle\":\"address\",\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"standardizedDebtRatio(address)\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice(address)\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD(address)\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt(address)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(address)\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio(address)\":{\"notice\":\"calculate current ratio of debt to Necc supply\"},\"deposit(uint256,uint256,address,address)\":{\"notice\":\"deposit bond\"},\"maxPayout(address)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256,address)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address,address)\":{\"notice\":\"calculate amount of Necc available for claim by depositor\"},\"percentVestedFor(address,address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address,address)\":{\"notice\":\"redeem bond for user\"},\"standardizedDebtRatio(address)\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BondDepositoryFacet.sol\":\"BondDepositoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryFacet.sol\":{\"content\":\"pragma abicoder v2;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../lib/FixedPoint.sol\\\";\\nimport \\\"../../lib/FullMath.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface ITreasury {\\n    function baseSupply() external view returns (uint256);\\n\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_);\\n\\n    function valueOfToken(address _token, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 value_);\\n}\\n\\ninterface IBondCalculator {\\n    function valuation(address _LP, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function markdown(address _LP) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n}\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BondDepositoryFacet is Facet {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated(\\n        uint256 deposit,\\n        uint256 indexed payout,\\n        uint256 indexed expires,\\n        uint256 indexed priceInUSD\\n    );\\n    event BondRedeemed(\\n        address indexed recipient,\\n        uint256 payout,\\n        uint256 remaining\\n    );\\n    event BondPriceChanged(\\n        uint256 indexed priceInUSD,\\n        uint256 indexed internalPrice,\\n        uint256 indexed debtRatio\\n    );\\n    event ControlVariableAdjustment(\\n        uint256 initialBCV,\\n        uint256 newBCV,\\n        uint256 adjustment,\\n        bool addition\\n    );\\n\\n    /* ======== ERRORS ======== */\\n    error InvalidPrinciple(address _principle);\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor,\\n        address _principle\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Terms memory _terms = s.terms[_principleIndex];\\n\\n        decayDebt(_principle);\\n\\n        require(\\n            s.totalDebt[_principleIndex] <= _terms.maxDebt,\\n            \\\"Max capacity reached\\\"\\n        );\\n\\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\\n        uint256 nativePrice = _bondPrice(_principle);\\n\\n        require(\\n            _maxPrice >= nativePrice,\\n            \\\"Slippage limit: more than max price\\\"\\n        ); // slippage protection\\n\\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\\n        require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 Necc ( underflow protection )\\n        require(payout <= maxPayout(_principle), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n        /**\\n            principle is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) Necc\\n         */\\n        //  Profit > 0\\n        if (payout.sub(payout.mul(_terms.fee).div(10000)) > 0) {\\n            if (s.terms[_principleIndex].isLiquidityBond) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(\\n                    _amount,\\n                    _principle,\\n                    value.sub(payout).sub(payout.mul(_terms.fee).div(10000))\\n                );\\n            } else if (_principle == s.ndol) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(\\n                    _amount,\\n                    _principle,\\n                    value.sub(payout).sub(payout.mul(_terms.fee).div(10000))\\n                );\\n            } else {\\n                revert InvalidPrinciple(_principle);\\n            }\\n\\n            // fee is transferred to dao in nNecc\\n            if (s.DAO != address(0)) {\\n                s.bondFees[s.DAO] = s.bondFees[s.DAO].add(\\n                    payout.mul(_terms.fee).div(10000)\\n                );\\n            }\\n            if (s.farmDistributor != address(0)) {\\n                s.bondFees[s.farmDistributor] = s\\n                    .bondFees[s.farmDistributor]\\n                    .add(payout.mul(100).div(10000));\\n            }\\n        }\\n\\n        // total debt is increased\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\\n\\n        // depositor info is stored\\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\\n            vesting: _terms.vestingTerm,\\n            lastTime: uint256(block.timestamp),\\n            pricePaid: priceInUSD\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated(\\n            _amount,\\n            payout,\\n            block.timestamp.add(_terms.vestingTerm),\\n            priceInUSD\\n        );\\n\\n        // TODO:\\n        // adjust(_principle); // control variable is adjusted\\n        // emit BondPriceChanged(\\n        //     bondPriceInUSD(_principle),\\n        //     _bondPrice(_principle),\\n        //     debtRatio(_principle)\\n        // );\\n\\n        return payout;\\n    }\\n\\n    function distributeFees() external {\\n        onlyGov();\\n\\n        if (s.DAO != address(0) && s.bondFees[s.DAO] != 0) {\\n            require(\\n                stake(s.DAO, s.bondFees[s.DAO]) != 0,\\n                \\\"Failed to distribute fees for DAO\\\"\\n            );\\n            s.bondFees[s.DAO] = 0;\\n        }\\n        if (\\n            s.farmDistributor != address(0) &&\\n            s.bondFees[s.farmDistributor] != 0\\n        ) {\\n            require(\\n                stake(s.farmDistributor, s.bondFees[s.farmDistributor]) != 0,\\n                \\\"Failed to distribute fees for farm\\\"\\n            );\\n            s.bondFees[s.farmDistributor] = 0;\\n        }\\n    }\\n\\n    function bondFees(address _recipient) external view returns (uint256) {\\n        return s.bondFees[_recipient];\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @param _recipient address\\n     *  @param _principle address\\n     *  @return uint\\n     */\\n    function redeem(address _recipient, address _principle)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\\n            _principleIndex\\n        ];\\n        // (seconds since last interaction / vesting term remaining)\\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\\n\\n        if (percentVested >= 10000) {\\n            // if fully vested\\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n            return stake(_recipient, info.payout); // pay user everything due\\n        } else {\\n            // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n            // store updated deposit info\\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(\\n                    uint256(block.timestamp).sub(info.lastTime)\\n                ),\\n                lastTime: uint256(block.timestamp),\\n                pricePaid: info.pricePaid\\n            });\\n\\n            emit BondRedeemed(\\n                _recipient,\\n                payout,\\n                s.bondInfo[_recipient][_principleIndex].payout\\n            );\\n            return stake(_recipient, payout);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\\n            debtDecay(_principle)\\n        );\\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return\\n            ITreasury(s.treasury)\\n                .baseSupply()\\n                .mul(s.terms[_principleIndex].maxPayout)\\n                .div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value, address _principle)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else if (_principle == s.ndol) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        }\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.ndol) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        }\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\\n            s.terms[_principleIndex].minimumPrice = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice converts bond price to DAI value\\n     *  @return price_ uint\\n     */\\n    function bondPriceInUSD(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = bondPrice(_principle)\\n                .mul(IBondCalculator(s.treasury).markdown(_principle))\\n                .div(100);\\n        } else if (_principle == s.ndol) {\\n            price_ = bondPrice(_principle)\\n                .mul(10**IERC20Decimals(_principle).decimals())\\n                .div(100);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to Necc supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio(address _principle)\\n        public\\n        view\\n        returns (uint256 debtRatio_)\\n    {\\n        debtRatio_ = FixedPoint\\n            .fraction(\\n                currentDebt(_principle).mul(1e9),\\n                ITreasury(s.treasury).baseSupply()\\n            )\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\n     *  @return uint\\n     */\\n    function standardizedDebtRatio(address _principle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                debtRatio(_principle)\\n                    .mul(IBondCalculator(s.treasury).markdown(_principle))\\n                    .div(1e9);\\n        } else if (_principle == s.ndol) {\\n            return debtRatio(_principle);\\n        } else {\\n            revert InvalidPrinciple(_principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay(address _principle)\\n        public\\n        view\\n        returns (uint256 decay_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\\n            s.lastDecay[_principleIndex]\\n        );\\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\\n            s.terms[_principleIndex].vestingTerm\\n        );\\n        if (decay_ > s.totalDebt[_principleIndex]) {\\n            decay_ = s.totalDebt[_principleIndex];\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor, address _principle)\\n        public\\n        view\\n        returns (uint256 percentVested_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\\n            _principleIndex\\n        ];\\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of Necc available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor, address _principle)\\n        external\\n        view\\n        returns (uint256 pendingPayout_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice allow user to stake payout automatically\\n     *  @param _recipient address\\n     *  @param _amount uint\\n     *  @return uint\\n     */\\n    function stake(address _recipient, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        IERC20(s.Necc).approve(address(this), _amount);\\n        IStaking(address(this)).stake(_amount, _recipient);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\\n\\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\\n            uint256 initial = _bondTerms.controlVariable;\\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n            uint256 change = changeBy(_principle);\\n\\n            if (adjustment.delta >= change) {\\n                adjustment.delta = adjustment.delta.sub(change);\\n            } else {\\n                adjustment.delta = 0;\\n            }\\n            if (adjustment.timeToTarget >= timeSinceLast) {\\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\\n                    timeSinceLast\\n                );\\n            } else {\\n                adjustment.timeToTarget = 0;\\n            }\\n\\n            if (adjustment.add) {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\\n                    change\\n                );\\n            } else {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\\n                    change\\n                );\\n            }\\n\\n            adjustment.lastTime = block.timestamp;\\n\\n            emit ControlVariableAdjustment(\\n                initial,\\n                _bondTerms.controlVariable,\\n                change,\\n                adjustment.add\\n            );\\n        }\\n    }\\n\\n    function changeBy(address _principle)\\n        internal\\n        view\\n        returns (uint256 changeBy_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n\\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\\n            adjustment.timeToTarget\\n        );\\n\\n        if (changeBy_ > adjustment.delta) {\\n            changeBy_ = adjustment.delta;\\n        }\\n    }\\n\\n    function bondInfo(address _depositor, address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Bond memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.bondInfo[_depositor][_principleIndex];\\n    }\\n\\n    function BCV(address _principle) public view returns (uint256 BCV_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 change = changeBy(_principle);\\n\\n        if (_bondAdjustment.add) {\\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\\n        } else {\\n            if (s.terms[_principleIndex].controlVariable > change) {\\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\\n            } else {\\n                BCV_ = 1;\\n            }\\n        }\\n    }\\n\\n    function terms(address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Terms memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.terms[_principleIndex];\\n    }\\n\\n    function DAO() external view returns (address) {\\n        return s.DAO;\\n    }\\n\\n    function farmDistributor() external view returns (address) {\\n        return s.farmDistributor;\\n    }\\n\\n    function treasury() external view returns (address) {\\n        return s.treasury;\\n    }\\n}\\n\",\"keccak256\":\"0x1766e7598122dd677122f5e18715f3fd1c0bd7716e833c6894adfe7c7043795d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a4171a71240b68dc37f64342ab46f8f395e8a4f45b41398121003056549690f\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x9d38d48c8c2cb4ab22fe222d67a92a2255919bc059969366c813a30654202705\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 =\\n        0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return\\n            uq112x112(\\n                uint224(\\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\\n                        ((112 - safeShiftBits) / 2)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x136dde09fc55dc6585ec83bbd5518c94e5efbff574b04346d552cd35757468b4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256 l, uint256 h)\\n    {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (~d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((~pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x37dfeafa81be1494b92766bed34216ddf533593cc88bf6281dde5476ffb4cff7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address sNecc; // token given for staking\\n        address nNecc; // wrapped staked token\\n        address ndol; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NDOL\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        mapping(address => uint256) bondFees; // stores fees for each bond\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0x534c3970c67477d05a317f769b2ac3881a273a23a0ae22846d5421888c62e560\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506126f5806100206000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806398fabd3a116100cd578063bba06f2711610081578063dc1d35a211610066578063dc1d35a21461036d578063de8d970814610380578063e300e98b1461039357600080fd5b8063bba06f27146102ef578063c8c819ac1461030257600080fd5b8063ad5fe5eb116100b2578063ad5fe5eb1461028c578063b11512e2146102d2578063bb57ad20146102e557600080fd5b806398fabd3a14610268578063aa5883451461027957600080fd5b80635eaffc7f116101245780636fcb5622116101095780636fcb56221461022f57806384715b1114610242578063884719f21461025557600080fd5b80635eaffc7f146101f557806361d027b31461021e57600080fd5b80632ddc1465116101555780632ddc1465146101bc5780632f74f461146101cf578063415d9f65146101e257600080fd5b80630523f1c31461017157806321d8d12314610197575b600080fd5b61018461017f366004612359565b6103a6565b6040519081526020015b60405180910390f35b6006546001600160a01b03165b6040516001600160a01b03909116815260200161018e565b6101846101ca366004612385565b61047c565b6101846101dd366004612385565b610578565b6101846101f03660046123a0565b610621565b610184610203366004612385565b6001600160a01b03166000908152601f602052604090205490565b6004546001600160a01b03166101a4565b61018461023d3660046123a0565b610690565b6101846102503660046123ca565b61072f565b610184610263366004612385565b610e59565b6005546001600160a01b03166101a4565b610184610287366004612385565b610e89565b61029f61029a3660046123a0565b610f19565b60405161018e91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6101846102e0366004612385565b610fad565b6102ed611079565b005b6101846102fd3660046123a0565b611259565b610315610310366004612385565b61146c565b60405161018e9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151151560c083015292915050565b61018461037b366004612385565b611525565b61018461038e366004612385565b61167e565b6101846103a1366004612385565b61170a565b6000806103b381846117c0565b6000818152600a602052604090206006015490915060ff1615610403576103fb662386f26fc100006103f56103f0876103eb88610fad565b611825565b6119ac565b906119e1565b915050610476565b6003546001600160a01b0384811691161415610434576103fb662386f26fc100006103f56103f0876103eb88610fad565b6040517fcacddcb30000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024015b60405180910390fd5b92915050565b60008061048981846117c0565b6000818152600a602052604090206006015490915060ff161561055357600480546040517f32da80a30000000000000000000000000000000000000000000000000000000081526001600160a01b038681169382019390935261054c92633b9aca00926103f5929116906332da80a390602401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190612410565b61054687610578565b906119ed565b9392505050565b6003546001600160a01b03848116911614156104345761054c83610578565b50919050565b6000610476670de0b6b3a76400006103f56103f061059d633b9aca0061054688610e59565b60048054604080517f860f504800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263860f50489282820192602092908290030181865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190612410565b60008061062e81846117c0565b9050600061063c8585610690565b6001600160a01b0386166000908152600c60209081526040808320868452909152902054909150612710821061067457809350610687565b6106846127106103f583856119ed565b93505b50505092915050565b60008061069d81846117c0565b6001600160a01b0385166000908152600c6020908152604080832084845282528083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152929350916106fb9042906119f9565b6060830151909150801561072057610719816103f5846127106119ed565b9450610725565b600094505b5050505092915050565b60006001600160a01b0383166107875760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015260640161046d565b600061079381846117c0565b6000818152600a6020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460ff16151560c082015290915061080384611a05565b60808101516000838152600d602052604090205411156108655760405162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015260640161046d565b600061087085611525565b9050600061087d86611a40565b9050808810156108f55760405162461bcd60e51b815260206004820152602360248201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260448201527f6963650000000000000000000000000000000000000000000000000000000000606482015260840161046d565b600480546040517fd1b317e50000000000000000000000000000000000000000000000000000000081526001600160a01b0389811693820193909352602481018c90526000929091169063d1b317e590604401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190612410565b9050600061099782896103a6565b9050629896808110156109ec5760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015260640161046d565b6109f58861170a565b811115610a445760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015260640161046d565b6000610a6d610a666127106103f58960600151866119ed90919063ffffffff16565b83906119f9565b1115610d47576000868152600a602052604090206006015460ff1615610c0f57610aa26001600160a01b03891633308e611b20565b600480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821692810192909252602482018d905289169063095ea7b3906044016020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612429565b5060045460608601516001600160a01b039091169063bc157ac1908d908b90610b7a90610b6a90612710906103f59089906119ed565b610b7488886119f9565b906119f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526001600160a01b03909116602483015260448201526064016020604051808303816000875af1158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190612410565b50610c77565b6003546001600160a01b0389811691161415610c3a57610aa26001600160a01b03891633308e611b20565b6040517fcacddcb30000000000000000000000000000000000000000000000000000000081526001600160a01b038916600482015260240161046d565b6005546001600160a01b031615610ce557610cc9610ca86127106103f58860600151856119ed90919063ffffffff16565b6005546001600160a01b03166000908152601f602052604090205490611bae565b6005546001600160a01b03166000908152601f60205260409020555b6006546001600160a01b031615610d4757610d2b610d0a6127106103f58460646119ed565b6006546001600160a01b03166000908152601f602052604090205490611bae565b6006546001600160a01b03166000908152601f60205260409020555b6000868152600d6020526040902054610d609083611bae565b6000878152600d602090815260408083209390935582516080810184526001600160a01b038d168352600c82528383208a8452909152919020548190610da69084611bae565b8152602080820187905242604080840182905260a08a0180516060958601526001600160a01b038f166000908152600c85528281208d8252855282902086518155938601516001850155908501516002840155939092015160039091015590518591610e1191611bae565b827f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58e604051610e4391815260200190565b60405180910390a49a9950505050505050505050565b600080610e6681846117c0565b905061054c610e748461167e565b6000838152600d6020526040902054906119f9565b600080610e9681846117c0565b6000818152600b60205260408120919250610eb085611bba565b825490915060ff1615610edd576000838152600a6020526040902054610ed69082611bae565b9350610f11565b6000838152600a6020526040902054811015610f0c576000838152600a6020526040902054610ed690826119f9565b600193505b505050919050565b610f446040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610f5081846117c0565b6001600160a01b0385166000908152600c6020908152604080832093835292815290829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015291505092915050565b600080610fba81846117c0565b6000818152600a602052604090206006015490915060ff16156110145761100d629896806103f5633b9aca00611007610ff288610578565b6000878152600a6020526040902054906119ed565b90611bae565b9150611048565b6003546001600160a01b038481169116141561104857611045629896806103f5633b9aca00611007610ff288610578565b91505b6000818152600a6020526040902060010154821015610572576000908152600a602052604090206001015492915050565b611081611c56565b6005546001600160a01b0316158015906110b457506005546001600160a01b03166000908152601f602052604090205415155b1561116c576005546001600160a01b03166000818152601f60205260409020546110de9190611c5e565b6111505760405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f2064697374726962757465206665657320666f7220444160448201527f4f00000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6005546001600160a01b03166000908152601f60205260408120555b6006546001600160a01b03161580159061119f57506006546001600160a01b03166000908152601f602052604090205415155b15611257576006546001600160a01b03166000818152601f60205260409020546111c99190611c5e565b61123b5760405162461bcd60e51b815260206004820152602260248201527f4661696c656420746f2064697374726962757465206665657320666f7220666160448201527f726d000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6006546001600160a01b03166000908152601f60205260408120555b565b60008061126681846117c0565b6001600160a01b0385166000908152600c6020908152604080832084845282528083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201529192506112c38686610690565b90506127108110611360576001600160a01b0386166000818152600c602090815260408083208784529091528082208281556001810183905560028101839055600301829055845190517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192611340928252602082015260400190565b60405180910390a2611356868360000151611c5e565b9350505050610476565b815160009061137790612710906103f590856119ed565b9050604051806080016040528061139b8386600001516119f990919063ffffffff16565b8152602001846020015181526020014281526020016113d56113ca8660400151426119f990919063ffffffff16565b6060870151906119f9565b90526001600160a01b0388166000818152600c60209081526040808320898452825291829020845180825585830151600183015585840151600283015560609095015160039091015581518581529081019390935290917f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1910160405180910390a26114618782611c5e565b945050505050610476565b6114ae6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60006114ba81846117c0565b6000908152600a6020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460ff16151560c08201529392505050565b60008061153281846117c0565b6000818152600a602052604090206006015490915060ff16156115f357600480546040517f32da80a30000000000000000000000000000000000000000000000000000000081526001600160a01b03868116938201939093526115ec926064926103f5929116906332da80a390602401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190612410565b61054687610fad565b9150610572565b6003546001600160a01b0384811691161415610434576115ec60646103f5856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611673919061244b565b6115e390600a612560565b60008061168b81846117c0565b6000818152600e6020526040812054919250906116a99042906119f9565b6000838152600a6020908152604080832060050154600d909252909120549192506116d8916103f590846119ed565b6000838152600d6020526040902054909350831115611703576000828152600d602052604090205492505b5050919050565b60008061171781846117c0565b6000818152600a6020908152604091829020600201546004805484517f860f5048000000000000000000000000000000000000000000000000000000008152945195965061054c95620186a0956103f5956001600160a01b039093169363860f5048938282019390929091908290030181865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190612410565b6000806117cf84600801611d80565b905060005b8181101561181d57836001600160a01b03166117f38660080183611d8a565b6001600160a01b0316141561180b5791506104769050565b806118158161256f565b9150506117d4565b505092915050565b604080516020810190915260008152600082116118aa5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161046d565b826118c45750604080516020810190915260008152610476565b71ffffffffffffffffffffffffffffffffffff83116119905760006118ed83607086901b6125a0565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561195b5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161046d565b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050610476565b60006118ed846e01000000000000000000000000000085611d96565b8051600090610476906612725dd1d243ab907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166125a0565b600061054c82846125a0565b600061054c82846125c2565b600061054c82846125e1565b6000611a1181836117c0565b9050611a1f610e748361167e565b6000918252600d6020908152604080842092909255600e9052902042905550565b600080611a4d81846117c0565b6000818152600a602052604090206006015490915060ff1615611a8c57611a85629896806103f5633b9aca00611007610ff288610578565b9150611ac0565b6003546001600160a01b0384811691161415611ac057611abd629896806103f5633b9aca00611007610ff288610578565b91505b6000818152600a6020526040902060010154821015611af2576000818152600a60205260409020600101549150610572565b6000818152600a602052604090206001015415610572576000908152600a6020526040812060010155919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611ba8908590611e45565b50505050565b600061054c82846125f8565b600080611bc781846117c0565b6000818152600b602090815260408083208151608081018352815460ff1615158152600182015493810193909352600281015491830191909152600301546060820181905292935091611c1b9042906119f9565b9050611c3c82604001516103f58385602001516119ed90919063ffffffff16565b93508160200151841115610f115750602001519392505050565b611257611f2f565b600080546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152306004820152602481018490526001600160a01b039091169063095ea7b3906044016020604051808303816000875af1158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced9190612429565b506040517f7acb7757000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03841660248201523090637acb7757906044016020604051808303816000875af1158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d789190612429565b509092915050565b6000610476825490565b600061054c8383611fd1565b6000806000611da58686611ffb565b9150915060008480611db957611db961258a565b868809905082811115611dd457611dd16001836125e1565b91505b611dde81846125e1565b9250848210611e2f5760405162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015260640161046d565b611e3a83838761203d565b979650505050505050565b6000611e9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121be9092919063ffffffff16565b805190915015611f2a5780806020019051810190611eb89190612429565b611f2a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161046d565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146112575760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6000826000018281548110611fe857611fe8612610565b9060005260206000200154905092915050565b60008080600019848609905061201184866125c2565b925061201d83826125e1565b915082811015612035576120326001836125e1565b91505b509250929050565b60008061204c831960016125f8565b8316905061205a81846125a0565b925061206681866125a0565b945080612075811960016125f8565b61207f91906125a0565b61208a9060016125f8565b61209490856125c2565b61209e90866125f8565b945060016120ac81856125c2565b6120b79060026125e1565b6120c190826125c2565b90506120cd81856125c2565b6120d89060026125e1565b6120e290826125c2565b90506120ee81856125c2565b6120f99060026125e1565b61210390826125c2565b905061210f81856125c2565b61211a9060026125e1565b61212490826125c2565b905061213081856125c2565b61213b9060026125e1565b61214590826125c2565b905061215181856125c2565b61215c9060026125e1565b61216690826125c2565b905061217281856125c2565b61217d9060026125e1565b61218790826125c2565b905061219381856125c2565b61219e9060026125e1565b6121a890826125c2565b90506121b481876125c2565b9695505050505050565b60606121cd84846000856121d5565b949350505050565b60608247101561224d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161046d565b843b61229b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b600080866001600160a01b031685876040516122b79190612652565b60006040518083038185875af1925050503d80600081146122f4576040519150601f19603f3d011682016040523d82523d6000602084013e6122f9565b606091505b5091509150611e3a8282866060831561231357508161054c565b8251156123235782518084602001fd5b8160405162461bcd60e51b815260040161046d919061266e565b80356001600160a01b038116811461235457600080fd5b919050565b6000806040838503121561236c57600080fd5b8235915061237c6020840161233d565b90509250929050565b60006020828403121561239757600080fd5b61054c8261233d565b600080604083850312156123b357600080fd5b6123bc8361233d565b915061237c6020840161233d565b600080600080608085870312156123e057600080fd5b84359350602085013592506123f76040860161233d565b91506124056060860161233d565b905092959194509250565b60006020828403121561242257600080fd5b5051919050565b60006020828403121561243b57600080fd5b8151801515811461054c57600080fd5b60006020828403121561245d57600080fd5b815160ff8116811461054c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156120355781600019048211156124a5576124a561246e565b808516156124b257918102915b93841c9390800290612489565b6000826124ce57506001610476565b816124db57506000610476565b81600181146124f157600281146124fb57612517565b6001915050610476565b60ff84111561250c5761250c61246e565b50506001821b610476565b5060208310610133831016604e8410600b841016171561253a575081810a610476565b6125448383612484565b80600019048211156125585761255861246e565b029392505050565b600061054c60ff8416836124bf565b60006000198214156125835761258361246e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826125bd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156125dc576125dc61246e565b500290565b6000828210156125f3576125f361246e565b500390565b6000821982111561260b5761260b61246e565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612641578181015183820152602001612629565b83811115611ba85750506000910152565b60008251612664818460208701612626565b9190910192915050565b602081526000825180602084015261268d816040850160208701612626565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220098a32d06279519ee683e671ecc7a3c08b3198942d9e03ceae16a7e9941c383564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806398fabd3a116100cd578063bba06f2711610081578063dc1d35a211610066578063dc1d35a21461036d578063de8d970814610380578063e300e98b1461039357600080fd5b8063bba06f27146102ef578063c8c819ac1461030257600080fd5b8063ad5fe5eb116100b2578063ad5fe5eb1461028c578063b11512e2146102d2578063bb57ad20146102e557600080fd5b806398fabd3a14610268578063aa5883451461027957600080fd5b80635eaffc7f116101245780636fcb5622116101095780636fcb56221461022f57806384715b1114610242578063884719f21461025557600080fd5b80635eaffc7f146101f557806361d027b31461021e57600080fd5b80632ddc1465116101555780632ddc1465146101bc5780632f74f461146101cf578063415d9f65146101e257600080fd5b80630523f1c31461017157806321d8d12314610197575b600080fd5b61018461017f366004612359565b6103a6565b6040519081526020015b60405180910390f35b6006546001600160a01b03165b6040516001600160a01b03909116815260200161018e565b6101846101ca366004612385565b61047c565b6101846101dd366004612385565b610578565b6101846101f03660046123a0565b610621565b610184610203366004612385565b6001600160a01b03166000908152601f602052604090205490565b6004546001600160a01b03166101a4565b61018461023d3660046123a0565b610690565b6101846102503660046123ca565b61072f565b610184610263366004612385565b610e59565b6005546001600160a01b03166101a4565b610184610287366004612385565b610e89565b61029f61029a3660046123a0565b610f19565b60405161018e91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6101846102e0366004612385565b610fad565b6102ed611079565b005b6101846102fd3660046123a0565b611259565b610315610310366004612385565b61146c565b60405161018e9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151151560c083015292915050565b61018461037b366004612385565b611525565b61018461038e366004612385565b61167e565b6101846103a1366004612385565b61170a565b6000806103b381846117c0565b6000818152600a602052604090206006015490915060ff1615610403576103fb662386f26fc100006103f56103f0876103eb88610fad565b611825565b6119ac565b906119e1565b915050610476565b6003546001600160a01b0384811691161415610434576103fb662386f26fc100006103f56103f0876103eb88610fad565b6040517fcacddcb30000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024015b60405180910390fd5b92915050565b60008061048981846117c0565b6000818152600a602052604090206006015490915060ff161561055357600480546040517f32da80a30000000000000000000000000000000000000000000000000000000081526001600160a01b038681169382019390935261054c92633b9aca00926103f5929116906332da80a390602401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190612410565b61054687610578565b906119ed565b9392505050565b6003546001600160a01b03848116911614156104345761054c83610578565b50919050565b6000610476670de0b6b3a76400006103f56103f061059d633b9aca0061054688610e59565b60048054604080517f860f504800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263860f50489282820192602092908290030181865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190612410565b60008061062e81846117c0565b9050600061063c8585610690565b6001600160a01b0386166000908152600c60209081526040808320868452909152902054909150612710821061067457809350610687565b6106846127106103f583856119ed565b93505b50505092915050565b60008061069d81846117c0565b6001600160a01b0385166000908152600c6020908152604080832084845282528083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152929350916106fb9042906119f9565b6060830151909150801561072057610719816103f5846127106119ed565b9450610725565b600094505b5050505092915050565b60006001600160a01b0383166107875760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015260640161046d565b600061079381846117c0565b6000818152600a6020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460ff16151560c082015290915061080384611a05565b60808101516000838152600d602052604090205411156108655760405162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015260640161046d565b600061087085611525565b9050600061087d86611a40565b9050808810156108f55760405162461bcd60e51b815260206004820152602360248201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260448201527f6963650000000000000000000000000000000000000000000000000000000000606482015260840161046d565b600480546040517fd1b317e50000000000000000000000000000000000000000000000000000000081526001600160a01b0389811693820193909352602481018c90526000929091169063d1b317e590604401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190612410565b9050600061099782896103a6565b9050629896808110156109ec5760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015260640161046d565b6109f58861170a565b811115610a445760405162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015260640161046d565b6000610a6d610a666127106103f58960600151866119ed90919063ffffffff16565b83906119f9565b1115610d47576000868152600a602052604090206006015460ff1615610c0f57610aa26001600160a01b03891633308e611b20565b600480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821692810192909252602482018d905289169063095ea7b3906044016020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612429565b5060045460608601516001600160a01b039091169063bc157ac1908d908b90610b7a90610b6a90612710906103f59089906119ed565b610b7488886119f9565b906119f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526001600160a01b03909116602483015260448201526064016020604051808303816000875af1158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190612410565b50610c77565b6003546001600160a01b0389811691161415610c3a57610aa26001600160a01b03891633308e611b20565b6040517fcacddcb30000000000000000000000000000000000000000000000000000000081526001600160a01b038916600482015260240161046d565b6005546001600160a01b031615610ce557610cc9610ca86127106103f58860600151856119ed90919063ffffffff16565b6005546001600160a01b03166000908152601f602052604090205490611bae565b6005546001600160a01b03166000908152601f60205260409020555b6006546001600160a01b031615610d4757610d2b610d0a6127106103f58460646119ed565b6006546001600160a01b03166000908152601f602052604090205490611bae565b6006546001600160a01b03166000908152601f60205260409020555b6000868152600d6020526040902054610d609083611bae565b6000878152600d602090815260408083209390935582516080810184526001600160a01b038d168352600c82528383208a8452909152919020548190610da69084611bae565b8152602080820187905242604080840182905260a08a0180516060958601526001600160a01b038f166000908152600c85528281208d8252855282902086518155938601516001850155908501516002840155939092015160039091015590518591610e1191611bae565b827f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58e604051610e4391815260200190565b60405180910390a49a9950505050505050505050565b600080610e6681846117c0565b905061054c610e748461167e565b6000838152600d6020526040902054906119f9565b600080610e9681846117c0565b6000818152600b60205260408120919250610eb085611bba565b825490915060ff1615610edd576000838152600a6020526040902054610ed69082611bae565b9350610f11565b6000838152600a6020526040902054811015610f0c576000838152600a6020526040902054610ed690826119f9565b600193505b505050919050565b610f446040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610f5081846117c0565b6001600160a01b0385166000908152600c6020908152604080832093835292815290829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015291505092915050565b600080610fba81846117c0565b6000818152600a602052604090206006015490915060ff16156110145761100d629896806103f5633b9aca00611007610ff288610578565b6000878152600a6020526040902054906119ed565b90611bae565b9150611048565b6003546001600160a01b038481169116141561104857611045629896806103f5633b9aca00611007610ff288610578565b91505b6000818152600a6020526040902060010154821015610572576000908152600a602052604090206001015492915050565b611081611c56565b6005546001600160a01b0316158015906110b457506005546001600160a01b03166000908152601f602052604090205415155b1561116c576005546001600160a01b03166000818152601f60205260409020546110de9190611c5e565b6111505760405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f2064697374726962757465206665657320666f7220444160448201527f4f00000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6005546001600160a01b03166000908152601f60205260408120555b6006546001600160a01b03161580159061119f57506006546001600160a01b03166000908152601f602052604090205415155b15611257576006546001600160a01b03166000818152601f60205260409020546111c99190611c5e565b61123b5760405162461bcd60e51b815260206004820152602260248201527f4661696c656420746f2064697374726962757465206665657320666f7220666160448201527f726d000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6006546001600160a01b03166000908152601f60205260408120555b565b60008061126681846117c0565b6001600160a01b0385166000908152600c6020908152604080832084845282528083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201529192506112c38686610690565b90506127108110611360576001600160a01b0386166000818152600c602090815260408083208784529091528082208281556001810183905560028101839055600301829055845190517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192611340928252602082015260400190565b60405180910390a2611356868360000151611c5e565b9350505050610476565b815160009061137790612710906103f590856119ed565b9050604051806080016040528061139b8386600001516119f990919063ffffffff16565b8152602001846020015181526020014281526020016113d56113ca8660400151426119f990919063ffffffff16565b6060870151906119f9565b90526001600160a01b0388166000818152600c60209081526040808320898452825291829020845180825585830151600183015585840151600283015560609095015160039091015581518581529081019390935290917f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1910160405180910390a26114618782611c5e565b945050505050610476565b6114ae6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60006114ba81846117c0565b6000908152600a6020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460ff16151560c08201529392505050565b60008061153281846117c0565b6000818152600a602052604090206006015490915060ff16156115f357600480546040517f32da80a30000000000000000000000000000000000000000000000000000000081526001600160a01b03868116938201939093526115ec926064926103f5929116906332da80a390602401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190612410565b61054687610fad565b9150610572565b6003546001600160a01b0384811691161415610434576115ec60646103f5856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611673919061244b565b6115e390600a612560565b60008061168b81846117c0565b6000818152600e6020526040812054919250906116a99042906119f9565b6000838152600a6020908152604080832060050154600d909252909120549192506116d8916103f590846119ed565b6000838152600d6020526040902054909350831115611703576000828152600d602052604090205492505b5050919050565b60008061171781846117c0565b6000818152600a6020908152604091829020600201546004805484517f860f5048000000000000000000000000000000000000000000000000000000008152945195965061054c95620186a0956103f5956001600160a01b039093169363860f5048938282019390929091908290030181865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190612410565b6000806117cf84600801611d80565b905060005b8181101561181d57836001600160a01b03166117f38660080183611d8a565b6001600160a01b0316141561180b5791506104769050565b806118158161256f565b9150506117d4565b505092915050565b604080516020810190915260008152600082116118aa5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161046d565b826118c45750604080516020810190915260008152610476565b71ffffffffffffffffffffffffffffffffffff83116119905760006118ed83607086901b6125a0565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81111561195b5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161046d565b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050610476565b60006118ed846e01000000000000000000000000000085611d96565b8051600090610476906612725dd1d243ab907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166125a0565b600061054c82846125a0565b600061054c82846125c2565b600061054c82846125e1565b6000611a1181836117c0565b9050611a1f610e748361167e565b6000918252600d6020908152604080842092909255600e9052902042905550565b600080611a4d81846117c0565b6000818152600a602052604090206006015490915060ff1615611a8c57611a85629896806103f5633b9aca00611007610ff288610578565b9150611ac0565b6003546001600160a01b0384811691161415611ac057611abd629896806103f5633b9aca00611007610ff288610578565b91505b6000818152600a6020526040902060010154821015611af2576000818152600a60205260409020600101549150610572565b6000818152600a602052604090206001015415610572576000908152600a6020526040812060010155919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611ba8908590611e45565b50505050565b600061054c82846125f8565b600080611bc781846117c0565b6000818152600b602090815260408083208151608081018352815460ff1615158152600182015493810193909352600281015491830191909152600301546060820181905292935091611c1b9042906119f9565b9050611c3c82604001516103f58385602001516119ed90919063ffffffff16565b93508160200151841115610f115750602001519392505050565b611257611f2f565b600080546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152306004820152602481018490526001600160a01b039091169063095ea7b3906044016020604051808303816000875af1158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced9190612429565b506040517f7acb7757000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03841660248201523090637acb7757906044016020604051808303816000875af1158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d789190612429565b509092915050565b6000610476825490565b600061054c8383611fd1565b6000806000611da58686611ffb565b9150915060008480611db957611db961258a565b868809905082811115611dd457611dd16001836125e1565b91505b611dde81846125e1565b9250848210611e2f5760405162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015260640161046d565b611e3a83838761203d565b979650505050505050565b6000611e9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121be9092919063ffffffff16565b805190915015611f2a5780806020019051810190611eb89190612429565b611f2a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161046d565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146112575760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161046d565b6000826000018281548110611fe857611fe8612610565b9060005260206000200154905092915050565b60008080600019848609905061201184866125c2565b925061201d83826125e1565b915082811015612035576120326001836125e1565b91505b509250929050565b60008061204c831960016125f8565b8316905061205a81846125a0565b925061206681866125a0565b945080612075811960016125f8565b61207f91906125a0565b61208a9060016125f8565b61209490856125c2565b61209e90866125f8565b945060016120ac81856125c2565b6120b79060026125e1565b6120c190826125c2565b90506120cd81856125c2565b6120d89060026125e1565b6120e290826125c2565b90506120ee81856125c2565b6120f99060026125e1565b61210390826125c2565b905061210f81856125c2565b61211a9060026125e1565b61212490826125c2565b905061213081856125c2565b61213b9060026125e1565b61214590826125c2565b905061215181856125c2565b61215c9060026125e1565b61216690826125c2565b905061217281856125c2565b61217d9060026125e1565b61218790826125c2565b905061219381856125c2565b61219e9060026125e1565b6121a890826125c2565b90506121b481876125c2565b9695505050505050565b60606121cd84846000856121d5565b949350505050565b60608247101561224d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161046d565b843b61229b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b600080866001600160a01b031685876040516122b79190612652565b60006040518083038185875af1925050503d80600081146122f4576040519150601f19603f3d011682016040523d82523d6000602084013e6122f9565b606091505b5091509150611e3a8282866060831561231357508161054c565b8251156123235782518084602001fd5b8160405162461bcd60e51b815260040161046d919061266e565b80356001600160a01b038116811461235457600080fd5b919050565b6000806040838503121561236c57600080fd5b8235915061237c6020840161233d565b90509250929050565b60006020828403121561239757600080fd5b61054c8261233d565b600080604083850312156123b357600080fd5b6123bc8361233d565b915061237c6020840161233d565b600080600080608085870312156123e057600080fd5b84359350602085013592506123f76040860161233d565b91506124056060860161233d565b905092959194509250565b60006020828403121561242257600080fd5b5051919050565b60006020828403121561243b57600080fd5b8151801515811461054c57600080fd5b60006020828403121561245d57600080fd5b815160ff8116811461054c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156120355781600019048211156124a5576124a561246e565b808516156124b257918102915b93841c9390800290612489565b6000826124ce57506001610476565b816124db57506000610476565b81600181146124f157600281146124fb57612517565b6001915050610476565b60ff84111561250c5761250c61246e565b50506001821b610476565b5060208310610133831016604e8410600b841016171561253a575081810a610476565b6125448383612484565b80600019048211156125585761255861246e565b029392505050565b600061054c60ff8416836124bf565b60006000198214156125835761258361246e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826125bd57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156125dc576125dc61246e565b500290565b6000828210156125f3576125f361246e565b500390565b6000821982111561260b5761260b61246e565b500190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612641578181015183820152602001612629565b83811115611ba85750506000910152565b60008251612664818460208701612626565b9190910192915050565b602081526000825180602084015261268d816040850160208701612626565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220098a32d06279519ee683e671ecc7a3c08b3198942d9e03ceae16a7e9941c383564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay(address)": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio(address)": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "maxPayout(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256,address)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "redeem(address,address)": {
        "params": {
          "_principle": "address",
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "standardizedDebtRatio(address)": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice(address)": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD(address)": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt(address)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(address)": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio(address)": {
        "notice": "calculate current ratio of debt to Necc supply"
      },
      "deposit(uint256,uint256,address,address)": {
        "notice": "deposit bond"
      },
      "maxPayout(address)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256,address)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address,address)": {
        "notice": "calculate amount of Necc available for claim by depositor"
      },
      "percentVestedFor(address,address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address,address)": {
        "notice": "redeem bond for user"
      },
      "standardizedDebtRatio(address)": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6974,
        "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)20933_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)20783_storage)dyn_storage": {
        "base": "t_struct(Info)20783_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)20778_storage)dyn_storage": {
        "base": "t_struct(Payout)20778_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20814_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)20814_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)20841_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)20841_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)20778_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)20778_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)20814_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)20814_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20823_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)20823_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)20790_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)20790_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)20805_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)20805_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1348_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1347,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1047_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)20814_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 20807,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20809,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20811,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20813,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)20823_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 20816,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20818,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20820,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20822,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)20841_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 20834,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20836,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20838,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20840,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)20790_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 20785,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20787,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20789,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)20832_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 20825,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20827,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20829,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20831,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)20783_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 20780,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20782,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)20778_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 20775,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20777,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1047_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1042,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)20933_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 20843,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20845,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20847,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20849,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "ndol",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 20851,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20853,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 20855,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 20857,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "staking",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 20860,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "principles",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)1348_storage"
          },
          {
            "astId": 20865,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Terms)20805_storage)"
          },
          {
            "astId": 20870,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)20823_storage)"
          },
          {
            "astId": 20877,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)20814_storage))"
          },
          {
            "astId": 20881,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20885,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20889,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 20893,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20897,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "info",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_struct(Info)20783_storage)dyn_storage"
          },
          {
            "astId": 20902,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)20790_storage)"
          },
          {
            "astId": 20905,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(Epoch)20832_storage"
          },
          {
            "astId": 20907,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 20909,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 20911,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "locker",
            "offset": 0,
            "slot": "25",
            "type": "t_address"
          },
          {
            "astId": 20913,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 20918,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)20841_storage)"
          },
          {
            "astId": 20920,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 20926,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)20778_storage)dyn_storage)"
          },
          {
            "astId": 20928,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          },
          {
            "astId": 20932,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondFees",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(Terms)20805_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 20792,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20794,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20796,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20798,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20800,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20802,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20804,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}