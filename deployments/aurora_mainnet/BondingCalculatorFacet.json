{
  "address": "0xafAC19EbC8ca796f12ff93bd56fA27161663a594",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getKValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "k_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "markdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7eace3794cdf8d29e9ca569558d1d53a94bc1e82ed78f6a9d9145ce22a6e631f",
  "receipt": {
    "to": null,
    "from": "0xdF1d35b28dadeC2fFe56f72614e62B08A757CA31",
    "contractAddress": "0xafAC19EbC8ca796f12ff93bd56fA27161663a594",
    "transactionIndex": 1,
    "gasUsed": "979692",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x86f0fe1771b6a685b88b5db936d441aa74947b2e6845681fe7b1c0c34f9186fb",
    "transactionHash": "0x7eace3794cdf8d29e9ca569558d1d53a94bc1e82ed78f6a9d9145ce22a6e631f",
    "logs": [],
    "blockNumber": 56256792,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1e1d71d1d35658663bd84c1a8a77fb39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getKValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"markdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Treasury/BondingCalculatorFacet.sol\":\"BondingCalculatorFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f0b0062fb818bb27edfba7cc0139f0eafb6eabe6c8b88f6743f92dabdc4d02a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/amm/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x889d3f47c1880987476ca15c7eddf899a0ff4b9979368440e5bbe48956872abd\",\"license\":\"GPL-3.0\"},\"contracts/facets/Treasury/BondingCalculatorFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Facet.sol\\\";\\nimport \\\"../../lib/FixedPoint.sol\\\";\\nimport \\\"../../amm/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../amm/interfaces/IUniswapV2ERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\\ncontract BondingCalculatorFacet is Facet {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n\\n    function getKValue(address _pair) public view returns (uint256 k_) {\\n        uint256 token0 = IERC20Metadata(IUniswapV2Pair(_pair).token0())\\n            .decimals();\\n        uint256 token1 = IERC20Metadata(IUniswapV2Pair(_pair).token1())\\n            .decimals();\\n        uint256 decimals = token0.add(token1).sub(\\n            IERC20Metadata(_pair).decimals()\\n        );\\n\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\\n            .getReserves();\\n        k_ = reserve0.mul(reserve1).div(10**decimals);\\n    }\\n\\n    function getTotalValue(address _pair) public view returns (uint256 _value) {\\n        _value = getKValue(_pair).sqrrt().mul(2);\\n    }\\n\\n    function valuation(address _pair, uint256 amount_)\\n        external\\n        view\\n        returns (uint256 _value)\\n    {\\n        uint256 totalValue = getTotalValue(_pair);\\n        uint256 totalSupply = IUniswapV2Pair(_pair).totalSupply();\\n\\n        _value = totalValue\\n            .mul(FixedPoint.fraction(amount_, totalSupply).decode112with18())\\n            .div(1e18);\\n    }\\n\\n    function markdown(address _pair) external view returns (uint256) {\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\\n            .getReserves();\\n\\n        uint256 reserve;\\n        if (IUniswapV2Pair(_pair).token0() == address(s.nNecc)) {\\n            reserve = reserve1;\\n        } else {\\n            require(\\n                IUniswapV2Pair(_pair).token1() == address(s.nNecc),\\n                \\\"Invalid pair\\\"\\n            );\\n            reserve = reserve0;\\n        }\\n        return\\n            reserve\\n                .mul(2 * (10**IERC20Metadata(address(s.nNecc)).decimals()))\\n                .div(getTotalValue(_pair))\\n                .div(1e9);\\n    }\\n}\\n\",\"keccak256\":\"0x84f67acbd0a4452dba1bb7bec696d9b0725dabb0b8cd0c73e081d245c59b2702\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Treasury/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../lib/LibTreasuryStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibTreasuryStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x32610d078fcc64bc25544d91162acadfaca346cdf9a8814df81394686d170d32\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 =\\n        0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(\\n                result <= type(uint224).max,\\n                \\\"FixedPoint::fraction: overflow\\\"\\n            );\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return\\n            uq112x112(\\n                uint224(\\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\\n                        ((112 - safeShiftBits) / 2)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x136dde09fc55dc6585ec83bbd5518c94e5efbff574b04346d552cd35757468b4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256 l, uint256 h)\\n    {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (~d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((~pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x37dfeafa81be1494b92766bed34216ddf533593cc88bf6281dde5476ffb4cff7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7ffc422e7e0c015c9f698991d5421f9655bbe96194abad74635fb77bec479eb7\",\"license\":\"MIT\"},\"contracts/lib/LibTreasuryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary LibTreasuryStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.treasury.storage\\\");\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc;\\n        address sNecc;\\n        address nNecc;\\n        uint256 blocksNeededForQueue;\\n        address[] reserveTokens; // Push only, beware false-positives.\\n        uint256 sNeccQueue; // Delays change to sNecc address\\n        uint256 totalReserves; // Risk-free value of all assets\\n        uint256 totalDebt;\\n        uint256 neccDebt;\\n        mapping(address => bool) isReserveToken;\\n        mapping(address => uint256) reserveTokenQueue; // Delays changes to mapping.\\n        address[] reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveDepositor;\\n        mapping(address => uint256) reserveDepositorQueue; // Delays changes to mapping.\\n        address[] reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveSpender;\\n        mapping(address => uint256) reserveSpenderQueue; // Delays changes to mapping.\\n        address[] liquidityTokens; // Push only, beware false-positives.\\n        mapping(address => bool) isLiquidityToken;\\n        mapping(address => uint256) LiquidityTokenQueue; // Delays changes to mapping.\\n        address[] liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityDepositor;\\n        mapping(address => uint256) LiquidityDepositorQueue; // Delays changes to mapping.\\n        address[] reserveManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveManager;\\n        mapping(address => uint256) ReserveManagerQueue; // Delays changes to mapping.\\n        address[] liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityManager;\\n        mapping(address => uint256) LiquidityManagerQueue; // Delays changes to mapping.\\n        address[] debtors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isDebtor;\\n        mapping(address => uint256) debtorQueue; // Delays changes to mapping.\\n        address[] rewardManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isRewardManager;\\n        mapping(address => uint256) rewardManagerQueue; // Delays changes to mapping.\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xbbae2169fb36d831f6acd76ea867eedab150b06449168648d03a453e4439d062\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806332da80a3146100515780634249719f14610076578063490084ef14610089578063686375491461009c575b600080fd5b61006461005f366004610d80565b6100af565b60405190815260200160405180910390f35b610064610084366004610d9d565b610385565b610064610097366004610d80565b610421565b6100646100aa366004610d80565b6106d2565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101169190610de7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008060020160009054906101000a90046001600160a01b03166001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c09190610e37565b6001600160a01b031614156101d65750806102bd565b600254604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039283169288169163d21220a79160048083019260209291908290030181865afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f9190610e37565b6001600160a01b0316146102ba5760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642070616972000000000000000000000000000000000000000060448201526064015b60405180910390fd5b50815b61037c633b9aca006103766102d1886106d2565b600254604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051610376926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190610e54565b61036490600a610f69565b61036f906002610f78565b86906106f6565b90610798565b95945050505050565b600080610391846106d2565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610f97565b905061037c670de0b6b3a764000061037661041a61041588866107da565b610961565b85906106f6565b600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610e37565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610e54565b60ff1690506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190610e37565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610e54565b60ff1690506000610630856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190610e54565b60ff1661062a8585610996565b906109f5565b9050600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190610de7565b506dffffffffffffffffffffffffffff91821693501690506106c76106bd84600a610fb0565b61037684846106f6565b979650505050505050565b60006106f060026106ea6106e585610421565b610a37565b906106f6565b92915050565b600082610705575060006106f0565b60006107118385610f78565b90508261071e8583610fd2565b146107915760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60448201527f770000000000000000000000000000000000000000000000000000000000000060648201526084016102b1565b9392505050565b600061079183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610aa2565b6040805160208101909152600081526000821161085f5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f000000000000000000000000000000000000000000000000000060648201526084016102b1565b8261087957506040805160208101909152600081526106f0565b71ffffffffffffffffffffffffffffffffffff83116109455760006108a283607086901b610fd2565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111156109105760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000060448201526064016102b1565b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150506106f0565b60006108a2846e01000000000000000000000000000085610ad0565b80516000906106f0906612725dd1d243ab907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610fd2565b6000806109a38385610ff4565b9050838110156107915760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016102b1565b600061079183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b74565b60006003821115610a935750806000610a5b610a54836002610798565b6001610996565b90505b81811015610a8d57809150610a86610a7f610a798584610798565b83610996565b6002610798565b9050610a5e565b50919050565b8115610a9d575060015b919050565b60008183610ac35760405162461bcd60e51b81526004016102b1919061100c565b50600061037c8486610fd2565b6000806000610adf8686610ba5565b9150915060008480610af357610af3610fbc565b868809905082811115610b0e57610b0b60018361107f565b91505b610b18818461107f565b9250848210610b695760405162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f7700000000000060448201526064016102b1565b6106c7838387610be7565b60008184841115610b985760405162461bcd60e51b81526004016102b1919061100c565b50600061037c848661107f565b600080806000198486099050610bbb8486610f78565b9250610bc7838261107f565b915082811015610bdf57610bdc60018361107f565b91505b509250929050565b600080610bf683196001610ff4565b83169050610c048184610fd2565b9250610c108186610fd2565b945080610c1f81196001610ff4565b610c299190610fd2565b610c34906001610ff4565b610c3e9085610f78565b610c489086610ff4565b94506001610c568185610f78565b610c6190600261107f565b610c6b9082610f78565b9050610c778185610f78565b610c8290600261107f565b610c8c9082610f78565b9050610c988185610f78565b610ca390600261107f565b610cad9082610f78565b9050610cb98185610f78565b610cc490600261107f565b610cce9082610f78565b9050610cda8185610f78565b610ce590600261107f565b610cef9082610f78565b9050610cfb8185610f78565b610d0690600261107f565b610d109082610f78565b9050610d1c8185610f78565b610d2790600261107f565b610d319082610f78565b9050610d3d8185610f78565b610d4890600261107f565b610d529082610f78565b9050610d5e8187610f78565b9695505050505050565b6001600160a01b0381168114610d7d57600080fd5b50565b600060208284031215610d9257600080fd5b813561079181610d68565b60008060408385031215610db057600080fd5b8235610dbb81610d68565b946020939093013593505050565b80516dffffffffffffffffffffffffffff81168114610a9d57600080fd5b600080600060608486031215610dfc57600080fd5b610e0584610dc9565b9250610e1360208501610dc9565b9150604084015163ffffffff81168114610e2c57600080fd5b809150509250925092565b600060208284031215610e4957600080fd5b815161079181610d68565b600060208284031215610e6657600080fd5b815160ff8116811461079157600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610bdf578160001904821115610eae57610eae610e77565b80851615610ebb57918102915b93841c9390800290610e92565b600082610ed7575060016106f0565b81610ee4575060006106f0565b8160018114610efa5760028114610f0457610f20565b60019150506106f0565b60ff841115610f1557610f15610e77565b50506001821b6106f0565b5060208310610133831016604e8410600b8410161715610f43575081810a6106f0565b610f4d8383610e8d565b8060001904821115610f6157610f61610e77565b029392505050565b600061079160ff841683610ec8565b6000816000190483118215151615610f9257610f92610e77565b500290565b600060208284031215610fa957600080fd5b5051919050565b60006107918383610ec8565b634e487b7160e01b600052601260045260246000fd5b600082610fef57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561100757611007610e77565b500190565b600060208083528351808285015260005b818110156110395785810183015185820160400152820161101d565b8181111561104b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008282101561109157611091610e77565b50039056fea264697066735822122049364043efc5e545c2ee5e1185d44273e9f6860af4ad97f8c991c77e300f6c0f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10528,
        "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)21498_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Storage)21498_storage": {
        "encoding": "inplace",
        "label": "struct LibTreasuryStorage.Storage",
        "members": [
          {
            "astId": 21384,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21386,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "sNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21388,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21390,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "blocksNeededForQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21393,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21395,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "sNeccQueue",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21397,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "totalReserves",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 21399,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 21401,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "neccDebt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 21405,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isReserveToken",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21409,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveTokenQueue",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21412,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveDepositors",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21416,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isReserveDepositor",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21420,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveDepositorQueue",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21423,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveSpenders",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21427,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isReserveSpender",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21431,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveSpenderQueue",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21434,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "liquidityTokens",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21438,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isLiquidityToken",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21442,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "LiquidityTokenQueue",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21445,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "liquidityDepositors",
            "offset": 0,
            "slot": "20",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21449,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isLiquidityDepositor",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21453,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "LiquidityDepositorQueue",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21456,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "reserveManagers",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21460,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isReserveManager",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21464,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "ReserveManagerQueue",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21467,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "liquidityManagers",
            "offset": 0,
            "slot": "26",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21471,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isLiquidityManager",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21475,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "LiquidityManagerQueue",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21478,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "debtors",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21482,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isDebtor",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21486,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "debtorQueue",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 21489,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "rewardManagers",
            "offset": 0,
            "slot": "32",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 21493,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "isRewardManager",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21497,
            "contract": "contracts/facets/Treasury/BondingCalculatorFacet.sol:BondingCalculatorFacet",
            "label": "rewardManagerQueue",
            "offset": 0,
            "slot": "34",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "1120"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}