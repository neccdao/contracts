{
  "language": "Solidity",
  "sources": {
    "contracts/facets/Vault/VaultNUSDFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../tokens/interfaces/INUSD.sol\";\nimport \"./Facet.sol\";\nimport \"./VaultLib.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract VaultNUSDFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event BuyNUSD(\n        address account,\n        address token,\n        uint256 tokenAmount,\n        uint256 nusdAmount\n    );\n    event SellNUSD(\n        address account,\n        address token,\n        uint256 nusdAmount,\n        uint256 tokenAmount\n    );\n    event Swap(\n        address account,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    function buyNUSD(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        contractEntered();\n        require(s.isInitialized, \"Vault: not initialized\");\n        VaultLib.isTokenWhitelisted(s, _token);\n        uint256 _price = VaultLib.getMinPrice(_token, s.includeAmmPrice);\n\n        uint256 _tokenAmount = VaultLib.transferIn(s, _token);\n        require(_tokenAmount > 0, \"Vault: invalid tokenAmount\");\n\n        VaultLib.updateCumulativeFundingRate(s, _token);\n\n        (, uint256 _amountAfterFees) = VaultLib._collectSwapFees(\n            s,\n            _token,\n            _tokenAmount,\n            true\n        );\n\n        uint256 _nusdAmount = VaultLib.adjustForDecimals(\n            s,\n            _amountAfterFees.mul(_price).div(PRICE_PRECISION),\n            _token,\n            s.nusd\n        );\n\n        require(_nusdAmount > 0, \"Vault: invalid nusdAmount\");\n\n        VaultLib._increasePoolAmount(s, _token, _amountAfterFees);\n        VaultLib._increaseNUSDAmount(s, _token, _nusdAmount);\n\n        emit BuyNUSD(_receiver, _token, _tokenAmount, _nusdAmount);\n        INUSD(s.nusd).mint(_receiver, _nusdAmount);\n\n        contractExited();\n\n        return _nusdAmount;\n    }\n\n    function sellNUSD(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        contractEntered();\n        VaultLib.isTokenWhitelisted(s, _token);\n\n        uint256 _nusdAmount = VaultLib.transferIn(s, s.nusd);\n        require(_nusdAmount > 0, \"Vault: invalid nusdAmount\");\n\n        VaultLib.updateCumulativeFundingRate(s, _token);\n\n        uint256 _redemptionAmount = getRedemptionAmount(_token, _nusdAmount);\n        require(_redemptionAmount > 0, \"Vault: invalid redemptionAmount\");\n\n        VaultLib._decreasePoolAmount(s, _token, _redemptionAmount);\n        VaultLib._decreaseNUSDAmount(s, _token, _nusdAmount);\n\n        INUSD(s.nusd).burn(address(this), _nusdAmount);\n\n        // the _transferIn call increased the value of tokenBalances[nusd]\n        // usually decreases in token balances are synced by calling _transferOut\n        // however, for nusd, the tokens are burnt, so updateTokenBalance should\n        // be manually called to record the decrease in tokens\n        VaultLib.updateTokenBalance(s, s.nusd);\n\n        (, uint256 _tokenAmount) = VaultLib._collectSwapFees(\n            s,\n            _token,\n            _redemptionAmount,\n            false\n        );\n        require(_tokenAmount > 0, \"Vault: invalid tokenAmount\");\n\n        emit SellNUSD(_receiver, _token, _nusdAmount, _tokenAmount);\n        VaultLib.transferOut(s, _token, _tokenAmount, _receiver);\n\n        contractExited();\n\n        return _tokenAmount;\n    }\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _receiver\n    ) external returns (uint256) {\n        contractEntered();\n        require(s.isInitialized, \"Vault: not initialized\");\n        require(_tokenIn != _tokenOut, \"Vault: invalid tokens\");\n        VaultLib.isTokenWhitelisted(s, _tokenIn);\n        VaultLib.isTokenWhitelisted(s, _tokenOut);\n\n        VaultLib.updateCumulativeFundingRate(s, _tokenIn);\n        VaultLib.updateCumulativeFundingRate(s, _tokenOut);\n\n        uint256 amountIn = VaultLib.transferIn(s, _tokenIn);\n        require(amountIn > 0, \"Vault: invalid amountIn\");\n\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\n        amountOut = VaultLib.adjustForDecimals(\n            s,\n            amountOut,\n            _tokenIn,\n            _tokenOut\n        );\n        (, uint256 amountOutAfterFees) = VaultLib._collectSwapFees(\n            s,\n            _tokenOut,\n            amountOut,\n            false\n        );\n\n        // adjust nusdAmounts by the same nusdAmount as debt is shifted between the assets\n        uint256 nusdAmount = amountIn.mul(priceIn).div(PRICE_PRECISION);\n        nusdAmount = VaultLib.adjustForDecimals(\n            s,\n            nusdAmount,\n            _tokenIn,\n            s.nusd\n        );\n\n        VaultLib._increaseNUSDAmount(s, _tokenIn, nusdAmount);\n        VaultLib._decreaseNUSDAmount(s, _tokenOut, nusdAmount);\n\n        VaultLib._increasePoolAmount(s, _tokenIn, amountIn);\n        VaultLib._decreasePoolAmount(s, _tokenOut, amountOut);\n\n        emit Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOutAfterFees);\n\n        VaultLib.transferOut(s, _tokenOut, amountOutAfterFees, _receiver);\n\n        contractExited();\n\n        return amountOutAfterFees;\n    }\n\n    function getRedemptionBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.redemptionBasisPoints[_token];\n    }\n\n    function poolAmounts(address _token) public view returns (uint256) {\n        return s.poolAmounts[_token];\n    }\n\n    function reservedAmounts(address _token) public view returns (uint256) {\n        return s.reservedAmounts[_token];\n    }\n\n    function nusdAmounts(address _token) public view returns (uint256) {\n        return s.nusdAmounts[_token];\n    }\n\n    function getRedemptionCollateral(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _collateral = VaultLib.usdToTokenMin(\n            s,\n            _token,\n            s.guaranteedUsd[_token]\n        );\n        return\n            _collateral.add(s.poolAmounts[_token]).sub(\n                s.reservedAmounts[_token]\n            );\n    }\n\n    function getRedemptionCollateralUsd(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            VaultLib.tokenToUsdMin(s, _token, getRedemptionCollateral(_token));\n    }\n\n    function availableReserve(address _token) public view returns (uint256) {\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\n        return _balance.sub(s.reservedAmounts[_token]);\n    }\n\n    function getRedemptionAmount(address _token, uint256 _nusdAmount)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _price = VaultLib.getMaxPrice(_token, s.includeAmmPrice);\n        uint256 _priceBasedAmount = _nusdAmount.mul(PRICE_PRECISION).div(\n            _price\n        );\n        _priceBasedAmount = VaultLib.adjustForDecimals(\n            s,\n            _priceBasedAmount,\n            s.nusd,\n            _token\n        );\n\n        uint256 _redemptionCollateral = getRedemptionCollateral(_token);\n        if (_redemptionCollateral == 0) {\n            return 0;\n        }\n\n        uint256 _totalNUSDAmount = s.nusdAmounts[_token];\n\n        // if there is no NUSD debt then the redemption amount based just on price can be supported\n        if (_totalNUSDAmount == 0) {\n            return _priceBasedAmount;\n        }\n\n        // calculate the collateralBasedAmount from the amount of backing collateral and the\n        // total debt in NUSD tokens for the asset\n        uint256 _collateralBasedAmount = _nusdAmount\n            .mul(_redemptionCollateral)\n            .div(_totalNUSDAmount);\n        uint256 _basisPoints = getRedemptionBasisPoints(_token);\n        _collateralBasedAmount = _collateralBasedAmount.mul(_basisPoints).div(\n            BASIS_POINTS_DIVISOR\n        );\n\n        return\n            _collateralBasedAmount < _priceBasedAmount\n                ? _collateralBasedAmount\n                : _priceBasedAmount;\n    }\n\n    function getTargetAdjustedFee(address _token, uint256 _fee)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _initialAmount = s.nusdAmounts[_token];\n        uint256 _targetAmount = VaultLib._getTargetNUSDAmount(s, _token);\n\n        if (_targetAmount == 0 || _initialAmount == 0) {\n            return _fee;\n        } else if (_initialAmount > _targetAmount) {\n            return _fee;\n        }\n        return _fee.mul(_initialAmount).div(_targetAmount);\n    }\n\n    function nusd() public view returns (address) {\n        return s.nusd;\n    }\n\n    function swapFeeBasisPoints() public pure returns (uint256) {\n        return SWAP_FEE_BASIS_POINTS;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/tokens/interfaces/INUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface INUSD {\n    function mint(address _account, uint256 _amount) external;\n\n    function burn(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/facets/Vault/Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"../../lib/LibExchangeStorage.sol\";\nimport \"../../lib/LibDiamond.sol\";\n\ncontract Facet {\n    LibExchangeStorage.Storage internal s;\n\n    constructor() {\n        s.contractEntered = false;\n    }\n\n    function onlyGov() internal view {\n        LibDiamond.enforceIsContractOwner();\n    }\n\n    function contractEntered() internal {\n        require(!s.contractEntered, \"Contract already entered\");\n        s.contractEntered = true;\n    }\n\n    function contractExited() internal {\n        s.contractEntered = false;\n    }\n}\n"
    },
    "contracts/facets/Vault/VaultLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../../lib/LibExchangeStorage.sol\";\n\n// import \"hardhat/console.sol\";\n\nlibrary VaultLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event IncreaseNUSDAmount(address token, uint256 amount);\n    event DecreaseNUSDAmount(address token, uint256 amount);\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\n    event IncreasePoolAmount(address token, uint256 amount);\n    event DecreasePoolAmount(address token, uint256 amount);\n    event UpdateFundingRate(address token, uint256 fundingRate);\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\n    event IncreaseReservedAmount(address token, uint256 amount);\n    event DecreaseReservedAmount(address token, uint256 amount);\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\n\n    function _getNextFundingRate(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view returns (uint256) {\n        if (\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\n        ) {\n            return 0;\n        }\n\n        uint256 _intervals = block\n            .timestamp\n            .sub(s.lastFundingTimes[_token])\n            .div(FUNDING_INTERVAL);\n        uint256 _poolAmount = s.poolAmounts[_token];\n        if (_poolAmount == 0) {\n            return 0;\n        }\n\n        return\n            FUNDING_RATE_FACTOR\n                .mul(s.reservedAmounts[_token])\n                .mul(_intervals)\n                .div(_poolAmount);\n    }\n\n    function updateCumulativeFundingRate(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal {\n        if (s.lastFundingTimes[_token] == 0) {\n            s.lastFundingTimes[_token] = block\n                .timestamp\n                .div(FUNDING_INTERVAL)\n                .mul(FUNDING_INTERVAL);\n            return;\n        }\n\n        if (\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\n        ) {\n            return;\n        }\n\n        uint256 fundingRate = _getNextFundingRate(s, _token);\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\n            fundingRate\n        );\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\n            FUNDING_INTERVAL\n        );\n\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\n    }\n\n    function adjustForDecimals(\n        LibExchangeStorage.Storage storage s,\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 _decimalsDiv = _tokenDiv == s.nusd\n            ? NUSD_DECIMALS\n            : s.tokenDecimals[_tokenDiv];\n        uint256 _decimalsMul = _tokenMul == s.nusd\n            ? NUSD_DECIMALS\n            : s.tokenDecimals[_tokenMul];\n\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\n    }\n\n    function getMinPrice(address _token, bool includeAmmPrice)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            IVaultPriceFeed(address(this)).getPrice(\n                _token,\n                false,\n                includeAmmPrice\n            );\n    }\n\n    function getMaxPrice(address _token, bool includeAmmPrice)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            IVaultPriceFeed(address(this)).getPrice(\n                _token,\n                true,\n                includeAmmPrice\n            );\n    }\n\n    function isTokenWhitelisted(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        require(s.whitelistedTokens[_token], \"Vault: token not whitelisted\");\n    }\n\n    function isPoolAmountBelowBalance(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        require(s.poolAmounts[_token] <= balance, \"Vault: invalid increase\");\n    }\n\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\n        internal\n        returns (uint256)\n    {\n        uint256 prevBalance = s.tokenBalances[_token];\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\n        s.tokenBalances[_token] = nextBalance;\n\n        return nextBalance.sub(prevBalance);\n    }\n\n    function transferOut(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount,\n        address _receiver\n    ) internal {\n        uint256 _prevBalance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(_receiver, _amount);\n        uint256 _nextBalance = _prevBalance.sub(_amount);\n\n        s.tokenBalances[_token] = _nextBalance;\n    }\n\n    function tokenToUsdMin(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _tokenAmount\n    ) internal view returns (uint256) {\n        if (_tokenAmount == 0) {\n            return 0;\n        }\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\n        uint256 _decimals = s.tokenDecimals[_token];\n\n        return _tokenAmount.mul(_price).div(10**_decimals);\n    }\n\n    function usdToTokenMin(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        return\n            usdToToken(\n                s,\n                _token,\n                _usdAmount,\n                getMaxPrice(_token, s.includeAmmPrice)\n            );\n    }\n\n    function usdToToken(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount,\n        uint256 _price\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        uint256 _decimals = s.tokenDecimals[_token];\n\n        return _usdAmount.mul(10**_decimals).div(_price);\n    }\n\n    function tokenToUsdMax(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _tokenAmount,\n        bool includeAmmPrice\n    ) internal view returns (uint256) {\n        if (_tokenAmount == 0) {\n            return 0;\n        }\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\n        uint256 _decimals = s.tokenDecimals[_token];\n        return _tokenAmount.mul(_price).div(10**_decimals);\n    }\n\n    function usdToTokenMax(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount,\n        bool includeAmmPrice\n    ) internal view returns (uint256) {\n        if (_usdAmount == 0) {\n            return 0;\n        }\n        return\n            usdToToken(\n                s,\n                _token,\n                _usdAmount,\n                getMinPrice(_token, includeAmmPrice)\n            );\n    }\n\n    function updateTokenBalance(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal {\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\n\n        s.tokenBalances[_token] = _nextBalance;\n    }\n\n    function validatePosition(uint256 _size, uint256 _collateral)\n        internal\n        pure\n    {\n        if (_size == 0) {\n            require(_collateral == 0, \"Vault: collateral should be withdrawn\");\n            return;\n        }\n        require(\n            _size >= _collateral,\n            \"Vault: _size must be more than _collateral\"\n        );\n    }\n\n    function validateTokens(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken\n    ) internal view {\n        require(_collateralToken == _indexToken, \"Vault: mismatched tokens\");\n        isTokenWhitelisted(s, _collateralToken);\n        isTokenWhitelisted(s, _indexToken);\n    }\n\n    function getPositionKey(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _account,\n                    _collateralToken,\n                    _indexToken,\n                    _isLong\n                )\n            );\n    }\n\n    function _collectSwapFees(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount,\n        bool _isBuyingNUSD\n    ) internal returns (uint256, uint256) {\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\n            s,\n            _token,\n            SWAP_FEE_BASIS_POINTS\n        );\n        uint256 _afterFeeAmount = _amount\n            .mul(\n                BASIS_POINTS_DIVISOR.sub(\n                    _isBuyingNUSD ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\n                )\n            )\n            .div(BASIS_POINTS_DIVISOR);\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\n\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\n\n        emit CollectSwapFees(\n            _token,\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\n            _feeAmount\n        );\n        return (_feeAmount, _afterFeeAmount);\n    }\n\n    function _increasePoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal returns (uint256) {\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\n        isPoolAmountBelowBalance(s, _token);\n\n        emit IncreasePoolAmount(_token, _amount);\n\n        return s.poolAmounts[_token];\n    }\n\n    function _decreasePoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\n            _amount,\n            \"Vault: poolAmount exceeded\"\n        );\n        isReservedAmountBelowPoolAmount(s, _token);\n        isPoolAmountBelowBalance(s, _token);\n\n        emit DecreasePoolAmount(_token, _amount);\n    }\n\n    function isReservedAmountBelowPoolAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view {\n        require(\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\n            \"Vault: reserve exceeds pool\"\n        );\n    }\n\n    function _transferRemainingCollateral(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _receiver,\n        uint256 _usdOut,\n        uint256 _usdOutAfterFee\n    ) internal returns (uint256) {\n        if (_usdOut > 0) {\n            VaultLib._decreasePoolAmount(\n                s,\n                _collateralToken,\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\n            );\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\n                s,\n                _collateralToken,\n                _usdOutAfterFee\n            );\n            VaultLib.transferOut(\n                s,\n                _collateralToken,\n                _amountOutAfterFees,\n                _receiver\n            );\n\n            return _amountOutAfterFees;\n        } else {\n            return 0;\n        }\n    }\n\n    function _increaseNUSDAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.nusdAmounts[_token] = s.nusdAmounts[_token].add(_amount);\n\n        emit IncreaseNUSDAmount(_token, _amount);\n    }\n\n    function _decreaseNUSDAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        uint256 _value = s.nusdAmounts[_token];\n        // since NUSD can be minted using multiple assets\n        // it is possible for the NUSD debt for a single asset to be less than zero\n        // the NUSD debt is capped to zero for this case\n        if (_value <= _amount) {\n            s.nusdAmounts[_token] = 0;\n            emit DecreaseNUSDAmount(_token, _value);\n            return;\n        }\n        s.nusdAmounts[_token] = _value.sub(_amount);\n\n        emit DecreaseNUSDAmount(_token, _amount);\n    }\n\n    function _reduceCollateral(\n        LibExchangeStorage.Storage storage s,\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) internal returns (uint256, uint256) {\n        LibExchangeStorage.Position storage position = s.positions[\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\n        ];\n\n        uint256 fee = _collectMarginFees(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            position.size,\n            position.entryFundingRate\n        );\n        bool hasProfit;\n        uint256 adjustedDelta;\n\n        // scope variables to avoid stack too deep errors\n        {\n            (bool _hasProfit, uint256 delta) = _getDelta(\n                s,\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                position.lastIncreasedTime\n            );\n            hasProfit = _hasProfit;\n            // get the proportional change in pnl\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\n        }\n\n        uint256 usdOut;\n        // transfer profits out\n        {\n            if (hasProfit && adjustedDelta > 0) {\n                usdOut = adjustedDelta;\n                position.realisedPnl =\n                    position.realisedPnl +\n                    int256(adjustedDelta);\n            }\n\n            if (!hasProfit && adjustedDelta > 0) {\n                position.collateral = position.collateral.sub(adjustedDelta);\n                position.realisedPnl =\n                    position.realisedPnl -\n                    int256(adjustedDelta);\n            }\n\n            // reduce the position's collateral by _collateralDelta\n            // transfer _collateralDelta out\n            if (_collateralDelta > 0) {\n                usdOut = usdOut.add(_collateralDelta);\n                position.collateral = position.collateral.sub(_collateralDelta);\n            }\n\n            // if the position will be closed, then transfer the remaining collateral out\n            if (position.size == _sizeDelta) {\n                usdOut = usdOut.add(position.collateral);\n                position.collateral = 0;\n            }\n\n            // if the usdOut is more than the fee then deduct the fee from the usdOut directly\n            // else deduct the fee from the position's collateral\n            if (usdOut < fee) {\n                position.collateral = position.collateral.sub(fee);\n                uint256 feeTokens = VaultLib.usdToTokenMin(\n                    s,\n                    _collateralToken,\n                    fee\n                );\n                VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\n            }\n        }\n\n        emit UpdatePnl(\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\n            hasProfit,\n            adjustedDelta\n        );\n\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\n    }\n\n    function _collectMarginFees(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _sizeDelta,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) internal returns (uint256) {\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\n\n        uint256 fundingFee = _getFundingFee(\n            s,\n            _token,\n            _size,\n            _entryFundingRate\n        );\n        feeUsd = feeUsd.add(fundingFee);\n\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\n\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\n        return feeUsd;\n    }\n\n    function _increaseReservedAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\n        require(\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\n            \"Vault: reserve exceeds pool\"\n        );\n\n        emit IncreaseReservedAmount(_token, _amount);\n    }\n\n    function _decreaseReservedAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _amount\n    ) internal {\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\n            _amount,\n            \"Vault: insufficient reserve\"\n        );\n\n        emit DecreaseReservedAmount(_token, _amount);\n    }\n\n    function _increaseGuaranteedUsd(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal {\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\n\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\n    }\n\n    function _decreaseGuaranteedUsd(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _usdAmount\n    ) internal {\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\n\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\n    }\n\n    function _getDelta(\n        LibExchangeStorage.Storage storage s,\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) internal view returns (bool, uint256) {\n        require(_averagePrice > 0, \"Vault: invalid _averagePrice\");\n        uint256 price = _isLong\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n        uint256 priceDelta = _averagePrice > price\n            ? _averagePrice.sub(price)\n            : price.sub(_averagePrice);\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\n\n        bool hasProfit;\n\n        if (_isLong) {\n            hasProfit = price > _averagePrice;\n        } else {\n            hasProfit = _averagePrice > price;\n        }\n\n        // if the minProfitTime has passed then there will be no min profit threshold\n        // the min profit threshold helps to prevent front-running issues\n        uint256 minBps = block.timestamp >\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\n            ? 0\n            : s.minProfitBasisPoints[_indexToken];\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\n            delta = 0;\n        }\n\n        return (hasProfit, delta);\n    }\n\n    function _getFundingFee(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) internal view returns (uint256) {\n        if (_size == 0) {\n            return 0;\n        }\n\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\n            _entryFundingRate\n        );\n        if (fundingRate == 0) {\n            return 0;\n        }\n\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\n    }\n\n    function _getPositionFee(uint256 _sizeDelta)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_sizeDelta == 0) {\n            return 0;\n        }\n        uint256 afterFeeUsd = _sizeDelta\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\n            .div(BASIS_POINTS_DIVISOR);\n        return _sizeDelta.sub(afterFeeUsd);\n    }\n\n    function _getTargetAdjustedFee(\n        LibExchangeStorage.Storage storage s,\n        address _token,\n        uint256 _fee\n    ) internal view returns (uint256) {\n        uint256 _initialAmount = s.nusdAmounts[_token];\n        uint256 _targetAmount = _getTargetNUSDAmount(s, _token);\n\n        if (_targetAmount == 0 || _initialAmount == 0) {\n            return _fee;\n        } else if (_initialAmount > _targetAmount) {\n            return _fee;\n        }\n        return _fee.mul(_initialAmount).div(_targetAmount);\n    }\n\n    function _getTargetNUSDAmount(\n        LibExchangeStorage.Storage storage s,\n        address _token\n    ) internal view returns (uint256) {\n        uint256 _nusdSupply = IERC20(s.nusd).totalSupply();\n        if (_nusdSupply == 0) {\n            return 0;\n        }\n        uint256 _tokenWeight = s.tokenWeights[_token];\n\n        return _nusdSupply.mul(_tokenWeight).div(s.totalTokenWeight);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/LibExchangeStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\n\n// import \"hardhat/console.sol\";\nuint256 constant _NOT_ENTERED = 1;\nuint256 constant _ENTERED = 2;\n\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\nuint256 constant PRICE_PRECISION = 10**30;\nuint256 constant NUSD_DECIMALS = 18;\nuint256 constant ONE_USD = PRICE_PRECISION;\nuint256 constant POSITION_PROPS_LENGTH = 9;\n\nuint256 constant PRICE_SAMPLE_SPACE = 1;\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\nuint256 constant LIQUIDATION_FEE_USD = 10 * PRICE_PRECISION; // 10 USD\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\nuint256 constant FUNDING_INTERVAL = 8 hours;\n\nlibrary LibExchangeStorage {\n    bytes32 constant STORAGE_POSITION = keccak256(\"necc.dao.based.storage\");\n\n    struct Position {\n        uint256 size;\n        uint256 collateral;\n        uint256 averagePrice;\n        uint256 entryFundingRate;\n        uint256 reserveAmount;\n        int256 realisedPnl;\n        uint256 lastIncreasedTime;\n    }\n\n    // Single global store\n    struct Storage {\n        bool contractEntered;\n        address btc;\n        address weth;\n        address nusd;\n        bool includeAmmPrice;\n        bool isInitialized;\n        EnumerableSet.AddressSet tokens;\n        mapping(address => bool) whitelistedTokens;\n        mapping(bytes32 => Position) positions;\n        mapping(address => uint256) tokenDecimals;\n        mapping(address => uint256) redemptionBasisPoints;\n        mapping(address => uint256) minProfitBasisPoints;\n        mapping(address => uint256) tokenBalances;\n        mapping(address => uint256) nusdAmounts;\n        mapping(address => uint256) poolAmounts;\n        mapping(address => uint256) reservedAmounts;\n        mapping(address => uint256) guaranteedUsd;\n        mapping(address => uint256) cumulativeFundingRates;\n        mapping(address => uint256) lastFundingTimes;\n        mapping(address => uint256) feeReserves;\n        mapping(address => uint256) tokenWeights;\n        uint256 totalTokenWeight;\n        // Router\n        mapping(address => bool) plugins;\n        // PriceFeed\n        mapping(address => address) priceFeeds;\n        mapping(address => uint256) priceDecimals;\n        mapping(address => uint256) priceSpreadBasisPoints;\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\n        //\n        int256 answer;\n        uint80 roundId;\n        mapping(uint80 => int256) answers;\n        //\n        uint256 totalNUSDMinted;\n        mapping(address => mapping(address => int256)) nusdMinted; // [address][token] => amount\n        // Always add new storage variable to the end of this struct\n    }\n}\n"
    },
    "contracts/lib/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nlibrary LibDiamond {\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(\n            msg.sender == diamondStorage().contractOwner,\n            \"LibDiamond: invalid contract owner\"\n        );\n    }\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    function setContractOwner(address _newOwner) public {\n        enforceIsContractOwner();\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\n    }\n\n    function contractOwner() public view returns (address) {\n        DiamondStorage storage ds = diamondStorage();\n        return ds.contractOwner;\n    }\n}\n"
    },
    "contracts/facets/interfaces/IVaultPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface IVaultPriceFeed {\n    function setIsAmmEnabled(bool _isEnabled) external;\n\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\n\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\n\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\n        external;\n\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\n        external;\n\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\n\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\n        external;\n\n    function getPrice(\n        address _token,\n        bool _maximise,\n        bool _includeAmmPrice\n    ) external view returns (uint256);\n\n    function getAmmPrice(address _token) external view returns (uint256);\n}\n"
    },
    "contracts/facets/Vault/VaultFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./VaultLib.sol\";\nimport \"./Facet.sol\";\n\ncontract VaultFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event IncreasePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        uint256 collateralDelta,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 price,\n        uint256 fee\n    );\n    event DecreasePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        uint256 collateralDelta,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 price,\n        uint256 fee\n    );\n    event LiquidatePosition(\n        bytes32 key,\n        address account,\n        address collateralToken,\n        address indexToken,\n        bool isLong,\n        uint256 size,\n        uint256 collateral,\n        uint256 reserveAmount,\n        int256 realisedPnl,\n        uint256 markPrice\n    );\n    event UpdatePosition(\n        bytes32 key,\n        uint256 size,\n        uint256 collateral,\n        uint256 averagePrice,\n        uint256 entryFundingRate,\n        uint256 reserveAmount,\n        int256 realisedPnl\n    );\n    event ClosePosition(\n        bytes32 key,\n        uint256 size,\n        uint256 collateral,\n        uint256 averagePrice,\n        uint256 entryFundingRate,\n        uint256 reserveAmount,\n        int256 realisedPnl\n    );\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external {\n        contractEntered();\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position storage position = s.positions[key];\n\n        uint256 price = _isLong\n            ? VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMinPrice(_indexToken, s.includeAmmPrice);\n\n        if (position.size == 0) {\n            position.averagePrice = price;\n        }\n\n        if (position.size > 0 && _sizeDelta > 0) {\n            position.averagePrice = getNextAveragePrice(\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                price,\n                _sizeDelta,\n                position.lastIncreasedTime\n            );\n        }\n\n        uint256 fee = VaultLib._collectMarginFees(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            position.size,\n            position.entryFundingRate\n        );\n        uint256 collateralDelta = VaultLib.transferIn(s, _collateralToken);\n        uint256 collateralDeltaUsd = VaultLib.tokenToUsdMin(\n            s,\n            _collateralToken,\n            collateralDelta\n        );\n\n        position.collateral = position.collateral.add(collateralDeltaUsd);\n        require(\n            position.collateral >= fee,\n            \"Vault: insufficient collateral for fees\"\n        );\n\n        position.collateral = position.collateral.sub(fee);\n        position.entryFundingRate = s.cumulativeFundingRates[_collateralToken];\n        position.size = position.size.add(_sizeDelta);\n        position.lastIncreasedTime = block.timestamp;\n\n        require(position.size > 0, \"Vault: invalid position.size\");\n        VaultLib.validatePosition(position.size, position.collateral);\n        validateLiquidation(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            true\n        );\n\n        // reserve tokens to pay profits on the position\n        uint256 reserveDelta = VaultLib.usdToTokenMax(\n            s,\n            _collateralToken,\n            _sizeDelta,\n            s.includeAmmPrice\n        );\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\n        VaultLib._increaseReservedAmount(s, _collateralToken, reserveDelta);\n\n        // guaranteedUsd stores the sum of (position.size - position.collateral) for all positions\n        // if a fee is charged on the collateral then guaranteedUsd should be increased by that fee amount\n        // since (position.size - position.collateral) would have increased by `fee`\n        VaultLib._increaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            _sizeDelta.add(fee)\n        );\n        VaultLib._decreaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            collateralDeltaUsd\n        );\n        // treat the deposited collateral as part of the pool\n        VaultLib._increasePoolAmount(s, _collateralToken, collateralDelta);\n        // fees need to be deducted from the pool since fees are deducted from position.collateral\n        // and collateral is treated as part of the pool\n        VaultLib._decreasePoolAmount(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, fee)\n        );\n\n        emit IncreasePosition(\n            key,\n            _account,\n            _collateralToken,\n            _indexToken,\n            collateralDeltaUsd,\n            _sizeDelta,\n            _isLong,\n            price,\n            fee\n        );\n        emit UpdatePosition(\n            key,\n            position.size,\n            position.collateral,\n            position.averagePrice,\n            position.entryFundingRate,\n            position.reserveAmount,\n            position.realisedPnl\n        );\n\n        contractExited();\n    }\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256) {\n        contractEntered();\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n\n        uint256 _amountOutAfterFees = _decreasePosition(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver\n        );\n        contractExited();\n\n        return _amountOutAfterFees;\n    }\n\n    function _decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) private returns (uint256) {\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position storage position = s.positions[key];\n        require(position.size > 0, \"Vault: empty position\");\n        require(position.size >= _sizeDelta, \"Vault: position size exceeded\");\n        require(\n            position.collateral >= _collateralDelta,\n            \"Vault: position collateral exceeded\"\n        );\n\n        uint256 collateral = position.collateral;\n        // scope variables to avoid stack too deep errors\n        {\n            uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(\n                position.size\n            );\n            position.reserveAmount = position.reserveAmount.sub(reserveDelta);\n            VaultLib._decreaseReservedAmount(s, _collateralToken, reserveDelta);\n        }\n\n        (uint256 _usdOut, uint256 _usdOutAfterFee) = VaultLib._reduceCollateral(\n            s,\n            _account,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong\n        );\n\n        if (position.size != _sizeDelta) {\n            position.entryFundingRate = s.cumulativeFundingRates[\n                _collateralToken\n            ];\n            position.size = position.size.sub(_sizeDelta);\n\n            VaultLib.validatePosition(position.size, position.collateral);\n            validateLiquidation(\n                _account,\n                _collateralToken,\n                _indexToken,\n                _isLong,\n                true\n            );\n\n            VaultLib._increaseGuaranteedUsd(\n                s,\n                _collateralToken,\n                collateral.sub(position.collateral)\n            );\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\n\n            uint256 price = _isLong\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n            emit DecreasePosition(\n                key,\n                _account,\n                _collateralToken,\n                _indexToken,\n                _collateralDelta,\n                _sizeDelta,\n                _isLong,\n                price,\n                _usdOut.sub(_usdOutAfterFee)\n            );\n            emit UpdatePosition(\n                key,\n                position.size,\n                position.collateral,\n                position.averagePrice,\n                position.entryFundingRate,\n                position.reserveAmount,\n                position.realisedPnl\n            );\n        } else {\n            VaultLib._increaseGuaranteedUsd(s, _collateralToken, collateral);\n            VaultLib._decreaseGuaranteedUsd(s, _collateralToken, _sizeDelta);\n\n            uint256 price = _isLong\n                ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n                : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n            emit DecreasePosition(\n                key,\n                _account,\n                _collateralToken,\n                _indexToken,\n                _collateralDelta,\n                _sizeDelta,\n                _isLong,\n                price,\n                _usdOut.sub(_usdOutAfterFee)\n            );\n            emit ClosePosition(\n                key,\n                position.size,\n                position.collateral,\n                position.averagePrice,\n                position.entryFundingRate,\n                position.reserveAmount,\n                position.realisedPnl\n            );\n\n            delete s.positions[key];\n        }\n\n        return\n            VaultLib._transferRemainingCollateral(\n                s,\n                _collateralToken,\n                _receiver,\n                _usdOut,\n                _usdOutAfterFee\n            );\n    }\n\n    function liquidatePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong,\n        address _feeReceiver\n    ) external {\n        contractEntered();\n        // set INCLUDE_AMM_PRICE to false prevent manipulated liquidations\n        s.includeAmmPrice = false;\n\n        VaultLib.validateTokens(s, _collateralToken, _indexToken);\n        VaultLib.updateCumulativeFundingRate(s, _collateralToken);\n\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        require(position.size > 0, \"Vault: empty position\");\n\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            false\n        );\n        require(liquidationState != 0, \"Vault: position cannot be liquidated\");\n        // max leverage exceeded but there is collateral remaining after deducting losses\n        // so decreasePosition instead by a half to keep alive\n        if (liquidationState == 2) {\n            _decreasePosition(\n                _account,\n                _collateralToken,\n                _indexToken,\n                0,\n                position.size.mul(5).div(10), // div by 2\n                _isLong,\n                _account\n            );\n            return;\n        }\n\n        s.feeReserves[_collateralToken] = s.feeReserves[_collateralToken].add(\n            VaultLib.usdToTokenMin(s, _collateralToken, marginFees)\n        );\n\n        VaultLib._decreaseReservedAmount(\n            s,\n            _collateralToken,\n            position.reserveAmount\n        );\n        VaultLib._decreaseGuaranteedUsd(\n            s,\n            _collateralToken,\n            position.size.sub(position.collateral)\n        );\n\n        uint256 markPrice = _isLong\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\n\n        emit LiquidatePosition(\n            key,\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            position.size,\n            position.collateral,\n            position.reserveAmount,\n            position.realisedPnl,\n            markPrice\n        );\n\n        delete s.positions[key];\n\n        // pay the fee receiver using the pool,\n        // we assume that in general the liquidated amount should be sufficient to cover\n        // the liquidation fees\n        VaultLib._decreasePoolAmount(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD)\n        );\n\n        s.includeAmmPrice = true;\n\n        VaultLib.transferOut(\n            s,\n            _collateralToken,\n            VaultLib.usdToTokenMin(s, _collateralToken, LIQUIDATION_FEE_USD),\n            _feeReceiver\n        );\n\n        contractExited();\n    }\n\n    function validateLiquidation(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong,\n        bool _raise\n    )\n        public\n        view\n        returns (\n            // returns (state, fees)\n            uint256,\n            uint256\n        )\n    {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n\n        (bool hasProfit, uint256 delta) = getDelta(\n            _indexToken,\n            position.size,\n            position.averagePrice,\n            _isLong,\n            position.lastIncreasedTime\n        );\n        uint256 marginFees = getFundingFee(\n            _collateralToken,\n            position.size,\n            position.entryFundingRate\n        );\n        marginFees = marginFees.add(getPositionFee(position.size));\n\n        if (!hasProfit && position.collateral < delta) {\n            if (_raise) {\n                revert(\"Vault: losses exceed collateral\");\n            }\n            return (1, marginFees);\n        }\n\n        uint256 remainingCollateral = position.collateral;\n        if (!hasProfit) {\n            remainingCollateral = position.collateral.sub(delta);\n        }\n\n        if (remainingCollateral < marginFees) {\n            if (_raise) {\n                revert(\"Vault: fees exceed collateral\");\n            }\n            // cap the fees to the remainingCollateral\n            return (1, remainingCollateral);\n        }\n\n        if (remainingCollateral < marginFees.add(LIQUIDATION_FEE_USD)) {\n            if (_raise) {\n                revert(\"Vault: liquidation fees exceed collateral\");\n            }\n            return (1, marginFees);\n        }\n\n        if (\n            remainingCollateral.mul(MAX_LEVERAGE) <\n            position.size.mul(BASIS_POINTS_DIVISOR)\n        ) {\n            if (_raise) {\n                revert(\"Vault: maxLeverage exceeded\");\n            }\n            return (2, marginFees);\n        }\n\n        return (0, marginFees);\n    }\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        )\n    {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        uint256 realisedPnl = position.realisedPnl > 0\n            ? uint256(position.realisedPnl)\n            : uint256(-position.realisedPnl);\n        return (\n            position.size, // 0\n            position.collateral, // 1\n            position.averagePrice, // 2\n            position.entryFundingRate, // 3\n            position.reserveAmount, // 4\n            realisedPnl, // 5\n            position.realisedPnl >= 0, // 6\n            position.lastIncreasedTime // 7\n        );\n    }\n\n    function getNextFundingRate(address _token) public view returns (uint256) {\n        return VaultLib._getNextFundingRate(s, _token);\n    }\n\n    function getUtilisation(address _token) public view returns (uint256) {\n        uint256 poolAmount = s.poolAmounts[_token];\n        if (poolAmount == 0) {\n            return 0;\n        }\n\n        return\n            s.reservedAmounts[_token].mul(FUNDING_RATE_PRECISION).div(\n                poolAmount\n            );\n    }\n\n    function getPositionLeverage(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) public view returns (uint256) {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        require(position.collateral > 0, \"Vault: invalid position\");\n        return position.size.mul(BASIS_POINTS_DIVISOR).div(position.collateral);\n    }\n\n    // // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\n    // // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\n    function getNextAveragePrice(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _nextPrice,\n        uint256 _sizeDelta,\n        uint256 _lastIncreasedTime\n    ) public view returns (uint256) {\n        (bool hasProfit, uint256 delta) = getDelta(\n            _indexToken,\n            _size,\n            _averagePrice,\n            _isLong,\n            _lastIncreasedTime\n        );\n        uint256 nextSize = _size.add(_sizeDelta);\n        uint256 divisor;\n        if (_isLong) {\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\n        } else {\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\n        }\n        return _nextPrice.mul(nextSize).div(divisor);\n    }\n\n    function getPositionDelta(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) public view returns (bool, uint256) {\n        bytes32 key = VaultLib.getPositionKey(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong\n        );\n        LibExchangeStorage.Position memory position = s.positions[key];\n        return\n            getDelta(\n                _indexToken,\n                position.size,\n                position.averagePrice,\n                _isLong,\n                position.lastIncreasedTime\n            );\n    }\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) public view returns (bool, uint256) {\n        return\n            VaultLib._getDelta(\n                s,\n                _indexToken,\n                _size,\n                _averagePrice,\n                _isLong,\n                _lastIncreasedTime\n            );\n    }\n\n    function getFundingFee(\n        address _token,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) public view returns (uint256) {\n        return VaultLib._getFundingFee(s, _token, _size, _entryFundingRate);\n    }\n\n    function getPositionFee(uint256 _sizeDelta) public pure returns (uint256) {\n        return VaultLib._getPositionFee(_sizeDelta);\n    }\n\n    function feeReserves(address _token) public view returns (uint256) {\n        return s.feeReserves[_token];\n    }\n\n    function liquidationFeeUsd() public pure returns (uint256) {\n        return LIQUIDATION_FEE_USD;\n    }\n\n    function fundingRateFactor() public pure returns (uint256) {\n        return FUNDING_RATE_FACTOR;\n    }\n\n    function fundingInterval() public pure returns (uint256) {\n        return FUNDING_INTERVAL;\n    }\n\n    function marginFeeBasisPoints() public pure returns (uint256) {\n        return MARGIN_FEE_BASIS_POINTS;\n    }\n}\n"
    },
    "contracts/facets/VaultPriceFeed/VaultPriceFeedFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract VaultPriceFeedFacet is Facet {\n    using SafeMath for uint256;\n\n    function getPrimaryPrice(address _token, bool _maximise)\n        public\n        view\n        returns (uint256)\n    {\n        address priceFeedAddress = s.priceFeeds[_token];\n        require(\n            priceFeedAddress != address(0),\n            \"PriceFeed: invalid price feed\"\n        );\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\n\n        uint256 price = 0;\n        uint80 roundId = priceFeed.latestRound();\n\n        for (uint80 i = 0; i < PRICE_SAMPLE_SPACE; i++) {\n            if (roundId <= i) {\n                break;\n            }\n            uint256 p;\n\n            if (i == 0) {\n                int256 _p = priceFeed.latestAnswer();\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            } else {\n                (, int256 _p, , , ) = priceFeed.getRoundData(roundId - i);\n                require(_p > 0, \"PriceFeed: invalid price\");\n                p = uint256(_p);\n            }\n\n            if (price == 0) {\n                price = p;\n                continue;\n            }\n\n            if (_maximise && p > price) {\n                price = p;\n                continue;\n            }\n\n            if (!_maximise && p < price) {\n                price = p;\n            }\n        }\n\n        require(price > 0, \"PriceFeed: could not fetch price\");\n        // normalise price precision\n        uint256 _priceDecimals = s.priceDecimals[_token];\n        return price.mul(PRICE_PRECISION).div(10**_priceDecimals);\n    }\n\n    // if divByReserve0: calculate price as reserve1 / reserve0\n    // if !divByReserve1: calculate price as reserve0 / reserve1\n    function getPairPrice(address _pair, bool _divByReserve0)\n        public\n        view\n        returns (uint256)\n    {\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair)\n            .getReserves();\n        if (_divByReserve0) {\n            if (reserve0 == 0) {\n                return 0;\n            }\n            return reserve1.mul(PRICE_PRECISION).div(reserve0);\n        }\n        if (reserve1 == 0) {\n            return 0;\n        }\n        return reserve0.mul(PRICE_PRECISION).div(reserve1);\n    }\n\n    function getAmmPrice(address _token, uint256 _primaryPrice)\n        public\n        view\n        returns (uint256)\n    {\n        // Usually wXUSDC\n        address _basePair = s.baseTokenPairs[_token];\n        // Usually xETHwX\n        address _tokenPair = s.tokenPairs[_token];\n\n        uint256 _price0 = getPairPrice(_basePair, false);\n        uint256 _price1 = getPairPrice(_tokenPair, false);\n\n        if (_basePair == _tokenPair) {\n            return _price0.mul(10**(s.priceDecimals[_token]));\n        } else if (_price0 == 0 || _price1 == 0) {\n            return _primaryPrice;\n        }\n\n        // this calculation could overflow if (price0 / 10**30) * (price1 / 10**30) is more than 10**17\n        return\n            _price0.mul(_price1).mul(10**(s.priceDecimals[_token])).div(\n                PRICE_PRECISION\n            );\n    }\n\n    function getPrice(\n        address _token,\n        bool _maximise,\n        bool _includeAmmPrice\n    ) public view returns (uint256) {\n        address _priceFeed = s.priceFeeds[_token];\n        uint256 _priceSpreadBasisPoints = s.priceSpreadBasisPoints[_token];\n        uint256 _price = 0;\n\n        if (_priceFeed != address(0)) {\n            _price = getPrimaryPrice(_token, _maximise);\n        } else if (\n            _includeAmmPrice &&\n            s.baseTokenPairs[_token] != address(0) &&\n            s.tokenPairs[_token] != address(0)\n        ) {\n            _price = getAmmPrice(_token, _price);\n        }\n\n        if (_price == 0) {\n            return _price;\n        }\n\n        if (_maximise) {\n            return\n                _price\n                    .mul(BASIS_POINTS_DIVISOR.add(_priceSpreadBasisPoints))\n                    .div(BASIS_POINTS_DIVISOR);\n        }\n\n        return\n            _price.mul(BASIS_POINTS_DIVISOR.sub(_priceSpreadBasisPoints)).div(\n                BASIS_POINTS_DIVISOR\n            );\n    }\n}\n"
    },
    "contracts/facets/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface IPriceFeed {\n    function description() external view returns (string memory);\n\n    function aggregator() external view returns (address);\n\n    function latestAnswer() external view returns (int256);\n\n    function latestRound() external view returns (uint80);\n\n    function getRoundData(uint80 roundId)\n        external\n        view\n        returns (\n            uint80,\n            int256,\n            uint256,\n            uint256,\n            uint80\n        );\n}\n"
    },
    "contracts/facets/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.7.5;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"../Vault/Facet.sol\";\n\ncontract PriceFeedFacet is Facet {\n    function latestAnswer() public view returns (int256) {\n        return s.answer;\n    }\n\n    function latestRound() public view returns (uint80) {\n        return s.roundId;\n    }\n\n    function setLatestAnswer(int256 _answer) public {\n        onlyGov();\n        s.roundId = s.roundId + 1;\n        s.answer = _answer;\n        s.answers[s.roundId] = _answer;\n    }\n\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\n    function getRoundData(uint80 _roundId)\n        public\n        view\n        returns (\n            uint80,\n            int256,\n            uint256,\n            uint256,\n            uint80\n        )\n    {\n        return (_roundId, s.answers[_roundId], 0, 0, 0);\n    }\n}\n"
    },
    "contracts/facets/Vault/VaultConfigFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./VaultLib.sol\";\nimport \"./Facet.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract VaultConfigFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event DirectPoolDeposit(address token, uint256 amount);\n    event WithdrawFees(address _token, address _receiver, uint256 _amount);\n    event SetTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _minProfitBasisPoints,\n        address _priceFeed,\n        uint256 _priceDecimals,\n        uint256 _priceSpreadBasisPoints,\n        uint256 _tokenWeight,\n        address _baseTokenPair,\n        address _tokenPair\n    );\n    event ClearTokenConfig(address _token);\n    event SetRedemptionBasisPoints(address _token, uint256 _basisPoints);\n    event SetPriceSpreadBasisPoints(\n        address _token,\n        uint256 _priceSpreadBasisPoints\n    );\n\n    function initialize(address _weth, address _nusd) external {\n        onlyGov();\n        require(!s.isInitialized, \"Vault: already initialized\");\n        require(_weth != address(0), \"Vault: invalid WETH address\");\n        require(_nusd != address(0), \"Vault: invalid _nusd address\");\n\n        s.isInitialized = true;\n        s.includeAmmPrice = true;\n\n        s.weth = _weth;\n        s.nusd = _nusd;\n    }\n\n    function isInitialized() public view returns (bool) {\n        return s.isInitialized;\n    }\n\n    function setTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _minProfitBasisPoints,\n        address _priceFeed,\n        uint256 _priceDecimals,\n        uint256 _priceSpreadBasisPoints,\n        uint256 _tokenWeight,\n        address _baseTokenPair,\n        address _tokenPair\n    ) external {\n        onlyGov();\n        EnumerableSet.add(s.tokens, _token);\n        s.whitelistedTokens[_token] = true;\n        s.tokenDecimals[_token] = _tokenDecimals;\n        s.minProfitBasisPoints[_token] = _minProfitBasisPoints;\n        s.priceFeeds[_token] = _priceFeed;\n        s.priceDecimals[_token] = _priceDecimals;\n        s.priceSpreadBasisPoints[_token] = _priceSpreadBasisPoints;\n\n        if (s.tokenWeights[_token] == 0) {\n            s.totalTokenWeight = s.totalTokenWeight.add(_tokenWeight);\n        } else {\n            s.totalTokenWeight = s.totalTokenWeight.sub(s.tokenWeights[_token]);\n            s.totalTokenWeight = s.totalTokenWeight.add(_tokenWeight);\n        }\n        s.tokenWeights[_token] = _tokenWeight;\n        s.redemptionBasisPoints[_token] = BASIS_POINTS_DIVISOR;\n\n        if (_baseTokenPair != address(0)) {\n            s.baseTokenPairs[_token] = _baseTokenPair;\n            s.tokenPairs[_token] = _tokenPair;\n        }\n\n        // validate price feed\n        VaultLib.getMaxPrice(_token, s.includeAmmPrice);\n        emit SetTokenConfig(\n            _token,\n            _tokenDecimals,\n            _minProfitBasisPoints,\n            _priceFeed,\n            _priceDecimals,\n            _priceSpreadBasisPoints,\n            _tokenWeight,\n            _baseTokenPair,\n            _tokenPair\n        );\n    }\n\n    function clearTokenConfig(address _token) external {\n        onlyGov();\n        VaultLib.isTokenWhitelisted(s, _token);\n\n        EnumerableSet.remove(s.tokens, _token);\n        delete s.whitelistedTokens[_token];\n        delete s.tokenDecimals[_token];\n        delete s.redemptionBasisPoints[_token];\n        delete s.minProfitBasisPoints[_token];\n        delete s.priceFeeds[_token];\n        delete s.priceDecimals[_token];\n        delete s.priceSpreadBasisPoints[_token];\n\n        if (s.tokenWeights[_token] != 0) {\n            s.totalTokenWeight = s.totalTokenWeight.sub(s.tokenWeights[_token]);\n            delete s.tokenWeights[_token];\n        }\n\n        delete s.redemptionBasisPoints[_token];\n        delete s.baseTokenPairs[_token];\n        delete s.tokenPairs[_token];\n\n        emit ClearTokenConfig(_token);\n    }\n\n    function withdrawFees(address _token, address _receiver)\n        external\n        returns (uint256)\n    {\n        onlyGov();\n        uint256 _amount = s.feeReserves[_token];\n        if (_amount == 0) {\n            return 0;\n        }\n        s.feeReserves[_token] = 0;\n        VaultLib.transferOut(s, _token, _amount, _receiver);\n\n        emit WithdrawFees(_token, _receiver, _amount);\n        return _amount;\n    }\n\n    function directPoolDeposit(address _token) external {\n        contractEntered();\n        VaultLib.isTokenWhitelisted(s, _token);\n        uint256 _tokenAmount = VaultLib.transferIn(s, _token);\n        require(_tokenAmount > 0, \"Vault: invalid _tokenAmount\");\n        VaultLib._increasePoolAmount(s, _token, _tokenAmount);\n\n        emit DirectPoolDeposit(_token, _tokenAmount);\n        contractExited();\n    }\n\n    /**\n        @notice\n        Uses:\n        - Balance out pool weights backing NUSD\n        - NUSD is below peg so we set -ve interest rates\n        - Give out free monies\n\n        s.redemptionBasisPoints[_token] defaults to BASIS_POINTS_DIVISOR === 10000\n        redemptionAmount.mul(\n            _redemptionBasisPoints.div(BASIS_POINTS_DIVISOR)\n        );\n    */\n    function setRedemptionBasisPoints(\n        address _token,\n        uint256 _redemptionBasisPoints\n    ) external {\n        onlyGov();\n        s.redemptionBasisPoints[_token] = _redemptionBasisPoints;\n\n        emit SetRedemptionBasisPoints(_token, _redemptionBasisPoints);\n    }\n\n    /**\n        @notice\n        Uses:\n        - Tweak capital efficiency\n        - Increase monies via fees\n\n        s.priceSpreadBasisPoints[_token] defaults to 5\n        if maximise price, \n            price.mul(\n                BASIS_POINTS_DIVISOR.add(_priceSpreadBasisPoints)\n            ).div(BASIS_POINTS_DIVISOR);\n        else,\n            price.mul(\n                BASIS_POINTS_DIVISOR.sub(_priceSpreadBasisPoints)\n            ).div(BASIS_POINTS_DIVISOR);\n    */\n    function setPriceSpreadBasisPoints(\n        address _token,\n        uint256 _priceSpreadBasisPoints\n    ) external {\n        require(\n            _priceSpreadBasisPoints < BASIS_POINTS_DIVISOR,\n            \"Vault: price spread too large\"\n        );\n        onlyGov();\n        s.priceSpreadBasisPoints[_token] = _priceSpreadBasisPoints;\n\n        emit SetPriceSpreadBasisPoints(_token, _priceSpreadBasisPoints);\n    }\n\n    function setGov(address _newGov) public {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.contractOwner = _newGov;\n    }\n\n    function whitelistedTokenCount() public view returns (uint256) {\n        return EnumerableSet.length(s.tokens);\n    }\n\n    function whitelistedTokens(address _token) public view returns (bool) {\n        return EnumerableSet.contains(s.tokens, _token);\n    }\n\n    function gov() public view returns (address) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.contractOwner;\n    }\n\n    function tokenDecimals(address _token) public view returns (uint256) {\n        return s.tokenDecimals[_token];\n    }\n\n    function tokenWeights(address _token) public view returns (uint256) {\n        return s.tokenWeights[_token];\n    }\n\n    function totalTokenWeight() public view returns (uint256) {\n        return s.totalTokenWeight;\n    }\n\n    function minProfitBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.minProfitBasisPoints[_token];\n    }\n\n    function redemptionBasisPoints(address _token)\n        public\n        view\n        returns (uint256)\n    {\n        return s.redemptionBasisPoints[_token];\n    }\n}\n"
    },
    "contracts/facets/Router/RouterFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../Vault/VaultLib.sol\";\nimport \"./RouterLib.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract RouterFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Swap(\n        address account,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    receive() external payable {\n        require(msg.sender == s.weth, \"Router: invalid sender\");\n    }\n\n    function _sender() private view returns (address) {\n        return msg.sender;\n    }\n\n    function directPoolDeposit(address _token, uint256 _amount) external {\n        IERC20(_token).safeTransferFrom(_sender(), address(this), _amount);\n        IVault(address(this)).directPoolDeposit(_token);\n    }\n\n    function swap(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minOut,\n        address _receiver\n    ) external {\n        contractEntered();\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\n        uint256 _amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\n\n        contractExited();\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            _amountIn,\n            _amountOut\n        );\n    }\n\n    function swapETHToTokens(\n        address[] memory _path,\n        uint256 _minOut,\n        address _receiver\n    ) external payable {\n        require(_path[0] == s.weth, \"Router: weth not first in _path\");\n        contractEntered();\n        RouterLib._transferETHToVault(s);\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, _receiver);\n\n        contractExited();\n\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            msg.value,\n            amountOut\n        );\n    }\n\n    function swapTokensToETH(\n        address[] memory _path,\n        uint256 _amountIn,\n        uint256 _minOut,\n        address payable _receiver\n    ) external {\n        require(_path[_path.length - 1] == s.weth, \"Router: invalid _path\");\n        contractEntered();\n        IERC20(_path[0]).safeTransferFrom(_sender(), address(this), _amountIn);\n        uint256 amountOut = RouterLib._swap(s, _path, _minOut, address(this));\n        RouterLib._transferOutETH(s, amountOut, _receiver);\n\n        contractExited();\n        emit Swap(\n            msg.sender,\n            _path[0],\n            _path[_path.length - 1],\n            _amountIn,\n            amountOut\n        );\n    }\n\n    function increasePosition(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _amountIn,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) external {\n        if (_amountIn > 0) {\n            IERC20(_path[0]).safeTransferFrom(\n                _sender(),\n                address(this),\n                _amountIn\n            );\n        }\n        if (_path.length > 1 && _amountIn > 0) {\n            uint256 _amountOut = RouterLib._swap(\n                s,\n                _path,\n                _minOut,\n                address(this)\n            );\n            IERC20(_path[_path.length - 1]).safeTransfer(\n                address(this),\n                _amountOut\n            );\n        }\n        RouterLib._increasePosition(\n            s,\n            _path[_path.length - 1],\n            _indexToken,\n            _sizeDelta,\n            _isLong,\n            _price\n        );\n    }\n\n    function increasePositionETH(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) external payable {\n        require(_path[0] == s.weth, \"Router: invalid _path\");\n        contractEntered();\n        if (msg.value > 0) {\n            RouterLib._transferETHToVault(s);\n        }\n        if (_path.length > 1 && msg.value > 0) {\n            uint256 _amountOut = RouterLib._swap(\n                s,\n                _path,\n                _minOut,\n                address(this)\n            );\n            IERC20(_path[_path.length - 1]).safeTransfer(\n                address(this),\n                _amountOut\n            );\n        }\n\n        RouterLib._increasePosition(\n            s,\n            _path[_path.length - 1],\n            _indexToken,\n            _sizeDelta,\n            _isLong,\n            _price\n        );\n\n        contractExited();\n    }\n\n    function decreasePosition(\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver,\n        uint256 _price\n    ) external {\n        RouterLib._decreasePosition(\n            s,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver,\n            _price\n        );\n    }\n\n    function decreasePositionETH(\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address payable _receiver,\n        uint256 _price\n    ) external {\n        contractEntered();\n        uint256 _amountOut = RouterLib._decreasePosition(\n            s,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            address(this),\n            _price\n        );\n        RouterLib._transferOutETH(s, _amountOut, _receiver);\n\n        contractExited();\n    }\n}\n"
    },
    "contracts/facets/Router/RouterLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../tokens/interfaces/IWETH.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../Vault/VaultLib.sol\";\n\nlibrary RouterLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using RouterLib for LibExchangeStorage.Storage;\n\n    function _transferETHToVault(LibExchangeStorage.Storage storage s)\n        internal\n    {\n        IWETH(s.weth).deposit{value: msg.value}();\n        IERC20(s.weth).safeTransfer(address(this), msg.value);\n    }\n\n    function _transferOutETH(\n        LibExchangeStorage.Storage storage s,\n        uint256 _amountOut,\n        address payable _receiver\n    ) internal {\n        IWETH(s.weth).withdraw(_amountOut);\n        _sendValue(s, _receiver, _amountOut);\n    }\n\n    function _sendValue(\n        LibExchangeStorage.Storage storage,\n        address payable _recipient,\n        uint256 amount\n    ) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = _recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, _crecipient may have reverted\"\n        );\n    }\n\n    function _swap(\n        LibExchangeStorage.Storage storage s,\n        address[] memory _path,\n        uint256 _minOut,\n        address _receiver\n    ) internal returns (uint256) {\n        if (_path.length == 2) {\n            return s._vaultSwap(_path[0], _path[1], _minOut, _receiver);\n        }\n        if (_path.length == 3) {\n            uint256 midOut = s._vaultSwap(_path[0], _path[1], 0, address(this));\n            IERC20(_path[1]).safeTransfer(address(this), midOut);\n            return s._vaultSwap(_path[1], _path[2], _minOut, _receiver);\n        }\n\n        revert(\"Router: invalid _path.length\");\n    }\n\n    function _vaultSwap(\n        LibExchangeStorage.Storage storage s,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _minOut,\n        address _receiver\n    )\n        internal\n        returns (\n            // uint256 _amountIn\n            uint256\n        )\n    {\n        uint256 _amountOut;\n\n        if (_tokenOut == s.nusd) {\n            // buyNUSD\n            _amountOut = IVault(address(this)).buyNUSD(_tokenIn, _receiver);\n        } else if (_tokenIn == s.nusd) {\n            // sellNUSD\n            _amountOut = IVault(address(this)).sellNUSD(_tokenOut, _receiver);\n        } else {\n            // swap\n            _amountOut = IVault(address(this)).swap(\n                _tokenIn,\n                _tokenOut,\n                _receiver\n            );\n        }\n\n        require(_amountOut >= _minOut, \"Router: insufficient amountOut\");\n\n        return _amountOut;\n    }\n\n    function _sender() private view returns (address) {\n        return msg.sender;\n    }\n\n    function _increasePosition(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _price\n    ) internal {\n        if (_isLong) {\n            require(\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\n                \"Router: mark price higher than limit\"\n            );\n        } else {\n            require(\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\n                \"Router: mark price lower than limit\"\n            );\n        }\n\n        IVault(address(this)).increasePosition(\n            _sender(),\n            _collateralToken,\n            _indexToken,\n            _sizeDelta,\n            _isLong\n        );\n    }\n\n    function _decreasePosition(\n        LibExchangeStorage.Storage storage s,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver,\n        uint256 _price\n    ) internal returns (uint256) {\n        if (_isLong) {\n            require(\n                VaultLib.getMinPrice(_indexToken, s.includeAmmPrice) >= _price,\n                \"Router: mark price lower than limit\"\n            );\n        } else {\n            require(\n                VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice) <= _price,\n                \"Router: mark price higher than limit\"\n            );\n        }\n\n        uint256 _amountOut = IVault(address(this)).decreasePosition(\n            _sender(),\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            _receiver\n        );\n\n        return _amountOut;\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IWETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/facets/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface IVault {\n    function getRedemptionCollateralUsd(address _token)\n        external\n        view\n        returns (uint256);\n\n    function setIsMintingEnabled(bool _isMintingEnabled) external;\n\n    function setFees(\n        uint256 _swapFeeBasisPoints,\n        uint256 _marginFeeBasisPoints,\n        uint256 _liquidationFeeUsd\n    ) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function setMaxNUSD(uint256 _maxNUSDBatchSize, uint256 _maxNUSDBuffer)\n        external;\n\n    function directPoolDeposit(address _token) external;\n\n    function buyNUSD(address _token, address _receiver)\n        external\n        returns (uint256);\n\n    function sellNUSD(address _token, address _receiver)\n        external\n        returns (uint256);\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external;\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256);\n\n    function priceFeed() external view returns (address);\n\n    function fundingRateFactor() external view returns (uint256);\n\n    function cumulativeFundingRates(address _token)\n        external\n        view\n        returns (uint256);\n\n    function getNextFundingRate(address _token) external view returns (uint256);\n\n    function BASIS_POINTS_DIVISOR() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function feeReserves(address _token) external view returns (uint256);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function guaranteedUsd(address _token) external view returns (uint256);\n\n    function poolAmounts(address _token) external view returns (uint256);\n\n    function reservedAmounts(address _token) external view returns (uint256);\n\n    function nusdAmounts(address _token) external view returns (uint256);\n\n    function getRedemptionAmount(address _token, uint256 _nusdAmount)\n        external\n        view\n        returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function getUtilisation(address _token) external view returns (uint256);\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) external view returns (bool, uint256);\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        );\n\n    function adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) external view returns (uint256);\n\n    function withdrawFees(address _token, address _receiver)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/facets/Reader/ReaderFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IVaultPriceFeed.sol\";\nimport \"../../amm/interfaces/IUniswapV2Factory.sol\";\nimport \"../Vault/VaultLib.sol\";\nimport \"../Vault/Facet.sol\";\n\ncontract ReaderFacet is Facet {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function getMaxAmountIn(\n        IVault,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint256) {\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n        uint256 poolAmount = s.poolAmounts[_tokenOut];\n        uint256 reservedAmount = s.reservedAmounts[_tokenOut];\n        uint256 availableAmount = poolAmount.sub(reservedAmount);\n        uint256 _amountIn = availableAmount.mul(priceOut).div(priceIn);\n\n        return VaultLib.adjustForDecimals(s, _amountIn, _tokenOut, _tokenIn);\n    }\n\n    function getAmountOut(\n        IVault,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) public view returns (uint256, uint256) {\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\n        uint256 amountOutAfterFees = amountOut\n            .mul(BASIS_POINTS_DIVISOR.sub(SWAP_FEE_BASIS_POINTS))\n            .div(BASIS_POINTS_DIVISOR);\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\n\n        return (amountOutAfterFees, feeAmount);\n    }\n\n    function getFees(address, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory amounts = new uint256[](_tokens.length);\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            amounts[i] = s.feeReserves[_tokens[i]];\n        }\n\n        return amounts;\n    }\n\n    // TODO: getTotalContributedCollateral()\n\n    function getPairInfo(address _factory, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 inputLength = 2;\n        uint256 propsLength = 2;\n        uint256[] memory amounts = new uint256[](\n            (_tokens.length / inputLength) * propsLength\n        );\n\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\n            address token0 = _tokens[i * inputLength];\n            address token1 = _tokens[i * inputLength + 1];\n            address pair = IUniswapV2Factory(_factory).getPair(token0, token1);\n\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\n        }\n\n        return amounts;\n    }\n\n    function getFundingRates(\n        address,\n        address _weth,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 2;\n        uint256[] memory fundingRates = new uint256[](\n            _tokens.length * propsLength\n        );\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                token = _weth;\n            }\n\n            uint256 reservedAmount = s.reservedAmounts[token];\n            uint256 poolAmount = s.poolAmounts[token];\n\n            if (poolAmount > 0) {\n                fundingRates[i * propsLength] = FUNDING_RATE_FACTOR\n                    .mul(reservedAmount)\n                    .div(poolAmount);\n            }\n\n            if (s.cumulativeFundingRates[token] > 0) {\n                uint256 nextRate = VaultLib._getNextFundingRate(s, token);\n                uint256 baseRate = s.cumulativeFundingRates[token];\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\n            }\n        }\n\n        return fundingRates;\n    }\n\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 supply = _token.totalSupply();\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\n            address account = _excludedAccounts[i];\n            uint256 balance = _token.balanceOf(account);\n            supply = supply.sub(balance);\n        }\n\n        return supply;\n    }\n\n    function getTokenBalances(address _account, address[] memory _tokens)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory balances = new uint256[](_tokens.length);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                balances[i] = _account.balance;\n                continue;\n            }\n            balances[i] = IERC20(token).balanceOf(_account);\n        }\n        return balances;\n    }\n\n    function getTokenBalancesWithSupplies(\n        address _account,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 2;\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                balances[i * propsLength] = _account.balance;\n                balances[i * propsLength + 1] = 0;\n                continue;\n            }\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\n        }\n        return balances;\n    }\n\n    function getVaultTokenInfo(\n        address,\n        address _weth,\n        uint256 _nusdAmount,\n        address[] memory _tokens\n    ) public view returns (uint256[] memory) {\n        uint256 propsLength = 9;\n\n        IVault vault = IVault(address(this));\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(address(this));\n\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            if (token == address(0)) {\n                token = _weth;\n            }\n            if (token != s.nusd) {\n                amounts[i * propsLength] = s.poolAmounts[token];\n                amounts[i * propsLength + 1] = s.reservedAmounts[token];\n                amounts[i * propsLength + 2] = s.nusdAmounts[token];\n                amounts[i * propsLength + 3] = vault.getRedemptionAmount(\n                    token,\n                    _nusdAmount\n                );\n                amounts[i * propsLength + 4] = VaultLib.getMinPrice(\n                    token,\n                    s.includeAmmPrice\n                );\n                amounts[i * propsLength + 5] = VaultLib.getMaxPrice(\n                    token,\n                    s.includeAmmPrice\n                );\n                amounts[i * propsLength + 6] = s.guaranteedUsd[token];\n                amounts[i * propsLength + 7] = priceFeed.getPrice(\n                    token,\n                    false,\n                    false\n                );\n                amounts[i * propsLength + 8] = priceFeed.getPrice(\n                    token,\n                    true,\n                    false\n                );\n            }\n        }\n\n        return amounts;\n    }\n\n    function getPositions(\n        address,\n        address _account,\n        address[] memory _collateralTokens,\n        address[] memory _indexTokens,\n        bool[] memory _isLong\n    ) public view returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](\n            _collateralTokens.length * POSITION_PROPS_LENGTH\n        );\n\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\n            {\n                (\n                    uint256 size,\n                    uint256 collateral,\n                    uint256 averagePrice,\n                    uint256 entryFundingRate,\n                    ,\n                    /* reserveAmount */\n                    uint256 realisedPnl,\n                    bool hasRealisedProfit,\n                    uint256 lastIncreasedTime\n                ) = IVault(address(this)).getPosition(\n                        _account,\n                        _collateralTokens[i],\n                        _indexTokens[i],\n                        _isLong[i]\n                    );\n\n                amounts[i * POSITION_PROPS_LENGTH] = size;\n                amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\n                amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\n                amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\n                amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit\n                    ? 1\n                    : 0;\n                amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\n                amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\n            }\n\n            uint256 _size = amounts[i * POSITION_PROPS_LENGTH];\n            uint256 _averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\n            uint256 _lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\n            if (_averagePrice > 0) {\n                (bool hasProfit, uint256 delta) = IVault(address(this))\n                    .getDelta(\n                        _indexTokens[i],\n                        _size,\n                        _averagePrice,\n                        _isLong[i],\n                        _lastIncreasedTime\n                    );\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\n            }\n        }\n\n        return amounts;\n    }\n}\n"
    },
    "contracts/amm/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function setMigrator(address) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}