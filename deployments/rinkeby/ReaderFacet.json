{
  "address": "0x455d058BfC2076b8842CfBb72EE0AfAD2BF9D4A1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFundingRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getMaxAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_collateralTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_indexTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isLong",
          "type": "bool[]"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalancesWithSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_excludedAccounts",
          "type": "address[]"
        }
      ],
      "name": "getTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nusdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x60cf0e216655435a9a2c885f8cd351730f5bbf13b50bee3797a94f13e01dc9ad",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x455d058BfC2076b8842CfBb72EE0AfAD2BF9D4A1",
    "transactionIndex": 20,
    "gasUsed": "2485366",
    "logsBloom": "0x
    "blockHash": "0x442245a50b6a75a476bce942fab743983a6929b8a870389e4eaaf58eec5a39bd",
    "transactionHash": "0x60cf0e216655435a9a2c885f8cd351730f5bbf13b50bee3797a94f13e01dc9ad",
    "logs": [],
    "blockNumber": 9596661,
    "cumulativeGasUsed": "6601114",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b72ba0d86e062f2474d5df8690203607",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFundingRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getMaxAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_indexTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isLong\",\"type\":\"bool[]\"}],\"name\":\"getPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalancesWithSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Reader/ReaderFacet.sol\":\"ReaderFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x33102583a908b03dc8aa7e102b295c5b52a6124a58479cebc94b6e1871de1993\",\"license\":\"GPL-3.0\"},\"contracts/facets/Reader/ReaderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../amm/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../Vault/VaultLib.sol\\\";\\nimport \\\"../Vault/Facet.sol\\\";\\n\\ncontract ReaderFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function getMaxAmountIn(\\n        IVault,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (uint256) {\\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\\n        uint256 poolAmount = s.poolAmounts[_tokenOut];\\n        uint256 reservedAmount = s.reservedAmounts[_tokenOut];\\n        uint256 availableAmount = poolAmount.sub(reservedAmount);\\n        uint256 _amountIn = availableAmount.mul(priceOut).div(priceIn);\\n\\n        return VaultLib.adjustForDecimals(s, _amountIn, _tokenOut, _tokenIn);\\n    }\\n\\n    function getAmountOut(\\n        IVault,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) public view returns (uint256, uint256) {\\n        uint256 priceIn = VaultLib.getMinPrice(_tokenIn, s.includeAmmPrice);\\n        uint256 priceOut = VaultLib.getMaxPrice(_tokenOut, s.includeAmmPrice);\\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\\n        uint256 amountOutAfterFees = amountOut\\n            .mul(BASIS_POINTS_DIVISOR.sub(SWAP_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\\n\\n        return (amountOutAfterFees, feeAmount);\\n    }\\n\\n    function getFees(address, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amounts[i] = s.feeReserves[_tokens[i]];\\n        }\\n\\n        return amounts;\\n    }\\n\\n    // TODO: getTotalContributedCollateral()\\n\\n    function getPairInfo(address _factory, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 inputLength = 2;\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](\\n            (_tokens.length / inputLength) * propsLength\\n        );\\n\\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\\n            address token0 = _tokens[i * inputLength];\\n            address token1 = _tokens[i * inputLength + 1];\\n            address pair = IUniswapV2Factory(_factory).getPair(token0, token1);\\n\\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getFundingRates(\\n        address,\\n        address _weth,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory fundingRates = new uint256[](\\n            _tokens.length * propsLength\\n        );\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 reservedAmount = s.reservedAmounts[token];\\n            uint256 poolAmount = s.poolAmounts[token];\\n\\n            if (poolAmount > 0) {\\n                fundingRates[i * propsLength] = FUNDING_RATE_FACTOR\\n                    .mul(reservedAmount)\\n                    .div(poolAmount);\\n            }\\n\\n            if (s.cumulativeFundingRates[token] > 0) {\\n                uint256 nextRate = VaultLib._getNextFundingRate(s, token);\\n                uint256 baseRate = s.cumulativeFundingRates[token];\\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\\n            }\\n        }\\n\\n        return fundingRates;\\n    }\\n\\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 supply = _token.totalSupply();\\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\\n            address account = _excludedAccounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            supply = supply.sub(balance);\\n        }\\n\\n        return supply;\\n    }\\n\\n    function getTokenBalances(address _account, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i] = _account.balance;\\n                continue;\\n            }\\n            balances[i] = IERC20(token).balanceOf(_account);\\n        }\\n        return balances;\\n    }\\n\\n    function getTokenBalancesWithSupplies(\\n        address _account,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i * propsLength] = _account.balance;\\n                balances[i * propsLength + 1] = 0;\\n                continue;\\n            }\\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\\n        }\\n        return balances;\\n    }\\n\\n    function getVaultTokenInfo(\\n        address,\\n        address _weth,\\n        uint256 _nusdAmount,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 9;\\n\\n        IVault vault = IVault(address(this));\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(address(this));\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            if (token != s.nusd) {\\n                amounts[i * propsLength] = s.poolAmounts[token];\\n                amounts[i * propsLength + 1] = s.reservedAmounts[token];\\n                amounts[i * propsLength + 2] = s.nusdAmounts[token];\\n                amounts[i * propsLength + 3] = vault.getRedemptionAmount(\\n                    token,\\n                    _nusdAmount\\n                );\\n                amounts[i * propsLength + 4] = VaultLib.getMinPrice(\\n                    token,\\n                    s.includeAmmPrice\\n                );\\n                amounts[i * propsLength + 5] = VaultLib.getMaxPrice(\\n                    token,\\n                    s.includeAmmPrice\\n                );\\n                amounts[i * propsLength + 6] = s.guaranteedUsd[token];\\n                amounts[i * propsLength + 7] = priceFeed.getPrice(\\n                    token,\\n                    false,\\n                    false\\n                );\\n                amounts[i * propsLength + 8] = priceFeed.getPrice(\\n                    token,\\n                    true,\\n                    false\\n                );\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getPositions(\\n        address,\\n        address _account,\\n        address[] memory _collateralTokens,\\n        address[] memory _indexTokens,\\n        bool[] memory _isLong\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](\\n            _collateralTokens.length * POSITION_PROPS_LENGTH\\n        );\\n\\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\\n            {\\n                (\\n                    uint256 size,\\n                    uint256 collateral,\\n                    uint256 averagePrice,\\n                    uint256 entryFundingRate,\\n                    ,\\n                    /* reserveAmount */\\n                    uint256 realisedPnl,\\n                    bool hasRealisedProfit,\\n                    uint256 lastIncreasedTime\\n                ) = IVault(address(this)).getPosition(\\n                        _account,\\n                        _collateralTokens[i],\\n                        _indexTokens[i],\\n                        _isLong[i]\\n                    );\\n\\n                amounts[i * POSITION_PROPS_LENGTH] = size;\\n                amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\\n                amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\\n                amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\\n                amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit\\n                    ? 1\\n                    : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\\n                amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\\n            }\\n\\n            uint256 _size = amounts[i * POSITION_PROPS_LENGTH];\\n            uint256 _averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\\n            uint256 _lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\\n            if (_averagePrice > 0) {\\n                (bool hasProfit, uint256 delta) = IVault(address(this))\\n                    .getDelta(\\n                        _indexTokens[i],\\n                        _size,\\n                        _averagePrice,\\n                        _isLong[i],\\n                        _lastIncreasedTime\\n                    );\\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0xebd821e1931039911140ed7f58dac3fd72908563f1e7d208354c2f1993ee87da\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xbd5db119d95cc57b8e1992814ad2bcde8e58d756ee5ab83f4e96121ecf7bc2fe\",\"license\":\"MIT\"},\"contracts/facets/Vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event IncreaseNUSDAmount(address token, uint256 amount);\\n    event DecreaseNUSDAmount(address token, uint256 amount);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    function _getNextFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _intervals = block\\n            .timestamp\\n            .sub(s.lastFundingTimes[_token])\\n            .div(FUNDING_INTERVAL);\\n        uint256 _poolAmount = s.poolAmounts[_token];\\n        if (_poolAmount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            FUNDING_RATE_FACTOR\\n                .mul(s.reservedAmounts[_token])\\n                .mul(_intervals)\\n                .div(_poolAmount);\\n    }\\n\\n    function updateCumulativeFundingRate(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        if (s.lastFundingTimes[_token] == 0) {\\n            s.lastFundingTimes[_token] = block\\n                .timestamp\\n                .div(FUNDING_INTERVAL)\\n                .mul(FUNDING_INTERVAL);\\n            return;\\n        }\\n\\n        if (\\n            s.lastFundingTimes[_token].add(FUNDING_INTERVAL) > block.timestamp\\n        ) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = _getNextFundingRate(s, _token);\\n        s.cumulativeFundingRates[_token] = s.cumulativeFundingRates[_token].add(\\n            fundingRate\\n        );\\n        s.lastFundingTimes[_token] = block.timestamp.div(FUNDING_INTERVAL).mul(\\n            FUNDING_INTERVAL\\n        );\\n\\n        emit UpdateFundingRate(_token, s.cumulativeFundingRates[_token]);\\n    }\\n\\n    function adjustForDecimals(\\n        LibExchangeStorage.Storage storage s,\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 _decimalsDiv = _tokenDiv == s.nusd\\n            ? NUSD_DECIMALS\\n            : s.tokenDecimals[_tokenDiv];\\n        uint256 _decimalsMul = _tokenMul == s.nusd\\n            ? NUSD_DECIMALS\\n            : s.tokenDecimals[_tokenMul];\\n\\n        return _amount.mul(10**_decimalsMul).div(10**_decimalsDiv);\\n    }\\n\\n    function getMinPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                false,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function getMaxPrice(address _token, bool includeAmmPrice)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultPriceFeed(address(this)).getPrice(\\n                _token,\\n                true,\\n                includeAmmPrice\\n            );\\n    }\\n\\n    function isTokenWhitelisted(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(s.whitelistedTokens[_token], \\\"Vault: token not whitelisted\\\");\\n    }\\n\\n    function isPoolAmountBelowBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(s.poolAmounts[_token] <= balance, \\\"Vault: invalid increase\\\");\\n    }\\n\\n    function transferIn(LibExchangeStorage.Storage storage s, address _token)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 prevBalance = s.tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        s.tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function transferOut(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal {\\n        s.tokenBalances[_token] = IERC20(_token).balanceOf(address(this)).sub(\\n            _amount\\n        );\\n\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function tokenToUsdMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMinPrice(_token, s.includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMin(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMaxPrice(_token, s.includeAmmPrice)\\n            );\\n    }\\n\\n    function usdToToken(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _decimals = s.tokenDecimals[_token];\\n\\n        return _usdAmount.mul(10**_decimals).div(_price);\\n    }\\n\\n    function tokenToUsdMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _tokenAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_tokenAmount == 0) {\\n            return 0;\\n        }\\n        uint256 _price = getMaxPrice(_token, includeAmmPrice);\\n        uint256 _decimals = s.tokenDecimals[_token];\\n        return _tokenAmount.mul(_price).div(10**_decimals);\\n    }\\n\\n    function usdToTokenMax(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount,\\n        bool includeAmmPrice\\n    ) internal view returns (uint256) {\\n        if (_usdAmount == 0) {\\n            return 0;\\n        }\\n        return\\n            usdToToken(\\n                s,\\n                _token,\\n                _usdAmount,\\n                getMinPrice(_token, includeAmmPrice)\\n            );\\n    }\\n\\n    function updateTokenBalance(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal {\\n        uint256 _nextBalance = IERC20(_token).balanceOf(address(this));\\n\\n        s.tokenBalances[_token] = _nextBalance;\\n    }\\n\\n    function validatePosition(uint256 _size, uint256 _collateral)\\n        internal\\n        pure\\n    {\\n        if (_size == 0) {\\n            require(_collateral == 0, \\\"Vault: collateral should be withdrawn\\\");\\n            return;\\n        }\\n        require(\\n            _size >= _collateral,\\n            \\\"Vault: _size must be more than _collateral\\\"\\n        );\\n    }\\n\\n    function validateTokens(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _indexToken\\n    ) internal view {\\n        require(_collateralToken == _indexToken, \\\"Vault: mismatched tokens\\\");\\n        isTokenWhitelisted(s, _collateralToken);\\n        isTokenWhitelisted(s, _indexToken);\\n    }\\n\\n    function getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _account,\\n                    _collateralToken,\\n                    _indexToken,\\n                    _isLong\\n                )\\n            );\\n    }\\n\\n    function _collectSwapFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount,\\n        bool _isBuyingNUSD\\n    ) internal returns (uint256, uint256) {\\n        uint256 _targetAdjustedFee = _getTargetAdjustedFee(\\n            s,\\n            _token,\\n            SWAP_FEE_BASIS_POINTS\\n        );\\n        uint256 _afterFeeAmount = _amount\\n            .mul(\\n                BASIS_POINTS_DIVISOR.sub(\\n                    _isBuyingNUSD ? _targetAdjustedFee : SWAP_FEE_BASIS_POINTS\\n                )\\n            )\\n            .div(BASIS_POINTS_DIVISOR);\\n        uint256 _feeAmount = _amount.sub(_afterFeeAmount);\\n\\n        s.feeReserves[_token] = s.feeReserves[_token].add(_feeAmount);\\n\\n        emit CollectSwapFees(\\n            _token,\\n            VaultLib.tokenToUsdMin(s, _token, _feeAmount),\\n            _feeAmount\\n        );\\n        return (_feeAmount, _afterFeeAmount);\\n    }\\n\\n    function _increasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].add(_amount);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit IncreasePoolAmount(_token, _amount);\\n\\n        return s.poolAmounts[_token];\\n    }\\n\\n    function _decreasePoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.poolAmounts[_token] = s.poolAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: poolAmount exceeded\\\"\\n        );\\n        isReservedAmountBelowPoolAmount(s, _token);\\n        isPoolAmountBelowBalance(s, _token);\\n\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function isReservedAmountBelowPoolAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view {\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n    }\\n\\n    function _transferRemainingCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _collateralToken,\\n        address _receiver,\\n        uint256 _usdOut,\\n        uint256 _usdOutAfterFee\\n    ) internal returns (uint256) {\\n        if (_usdOut > 0) {\\n            VaultLib._decreasePoolAmount(\\n                s,\\n                _collateralToken,\\n                VaultLib.usdToTokenMin(s, _collateralToken, _usdOut)\\n            );\\n            uint256 _amountOutAfterFees = VaultLib.usdToTokenMin(\\n                s,\\n                _collateralToken,\\n                _usdOutAfterFee\\n            );\\n            VaultLib.transferOut(\\n                s,\\n                _collateralToken,\\n                _amountOutAfterFees,\\n                _receiver\\n            );\\n\\n            return _amountOutAfterFees;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _increaseNUSDAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.nusdAmounts[_token] = s.nusdAmounts[_token].add(_amount);\\n\\n        emit IncreaseNUSDAmount(_token, _amount);\\n    }\\n\\n    function _decreaseNUSDAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _value = s.nusdAmounts[_token];\\n        // since NUSD can be minted using multiple assets\\n        // it is possible for the NUSD debt for a single asset to be less than zero\\n        // the NUSD debt is capped to zero for this case\\n        if (_value <= _amount) {\\n            s.nusdAmounts[_token] = 0;\\n            emit DecreaseNUSDAmount(_token, _value);\\n            return;\\n        }\\n        s.nusdAmounts[_token] = _value.sub(_amount);\\n\\n        emit DecreaseNUSDAmount(_token, _amount);\\n    }\\n\\n    function _reduceCollateral(\\n        LibExchangeStorage.Storage storage s,\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) internal returns (uint256, uint256) {\\n        LibExchangeStorage.Position storage position = s.positions[\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong)\\n        ];\\n\\n        uint256 fee = _collectMarginFees(\\n            s,\\n            _collateralToken,\\n            _sizeDelta,\\n            position.size,\\n            position.entryFundingRate\\n        );\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n            (bool _hasProfit, uint256 delta) = _getDelta(\\n                s,\\n                _indexToken,\\n                position.size,\\n                position.averagePrice,\\n                _isLong,\\n                position.lastIncreasedTime\\n            );\\n            hasProfit = _hasProfit;\\n            // get the proportional change in pnl\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        {\\n            if (hasProfit && adjustedDelta > 0) {\\n                usdOut = adjustedDelta;\\n                position.realisedPnl =\\n                    position.realisedPnl +\\n                    int256(adjustedDelta);\\n            }\\n\\n            if (!hasProfit && adjustedDelta > 0) {\\n                position.collateral = position.collateral.sub(adjustedDelta);\\n                position.realisedPnl =\\n                    position.realisedPnl -\\n                    int256(adjustedDelta);\\n            }\\n\\n            // reduce the position's collateral by _collateralDelta\\n            // transfer _collateralDelta out\\n            if (_collateralDelta > 0) {\\n                usdOut = usdOut.add(_collateralDelta);\\n                position.collateral = position.collateral.sub(_collateralDelta);\\n            }\\n\\n            // if the position will be closed, then transfer the remaining collateral out\\n            if (position.size == _sizeDelta) {\\n                usdOut = usdOut.add(position.collateral);\\n                position.collateral = 0;\\n            }\\n\\n            // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n            // else deduct the fee from the position's collateral\\n            if (usdOut < fee) {\\n                position.collateral = position.collateral.sub(fee);\\n                uint256 feeTokens = VaultLib.usdToTokenMin(\\n                    s,\\n                    _collateralToken,\\n                    fee\\n                );\\n                VaultLib._decreasePoolAmount(s, _collateralToken, feeTokens);\\n            }\\n        }\\n\\n        emit UpdatePnl(\\n            getPositionKey(_account, _collateralToken, _indexToken, _isLong),\\n            hasProfit,\\n            adjustedDelta\\n        );\\n\\n        return (usdOut, usdOut > fee ? usdOut.sub(fee) : usdOut);\\n    }\\n\\n    function _collectMarginFees(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _sizeDelta,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal returns (uint256) {\\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\\n\\n        uint256 fundingFee = _getFundingFee(\\n            s,\\n            _token,\\n            _size,\\n            _entryFundingRate\\n        );\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = VaultLib.usdToTokenMin(s, _token, feeUsd);\\n        s.feeReserves[_token] = s.feeReserves[_token].add(feeTokens);\\n\\n        emit CollectMarginFees(_token, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _increaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].add(_amount);\\n        require(\\n            s.reservedAmounts[_token] <= s.poolAmounts[_token],\\n            \\\"Vault: reserve exceeds pool\\\"\\n        );\\n\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        s.reservedAmounts[_token] = s.reservedAmounts[_token].sub(\\n            _amount,\\n            \\\"Vault: insufficient reserve\\\"\\n        );\\n\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].add(_usdAmount);\\n\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _usdAmount\\n    ) internal {\\n        s.guaranteedUsd[_token] = s.guaranteedUsd[_token].sub(_usdAmount);\\n\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _getDelta(\\n        LibExchangeStorage.Storage storage s,\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) internal view returns (bool, uint256) {\\n        require(_averagePrice > 0, \\\"Vault: invalid _averagePrice\\\");\\n        uint256 price = _isLong\\n            ? VaultLib.getMinPrice(_indexToken, s.includeAmmPrice)\\n            : VaultLib.getMaxPrice(_indexToken, s.includeAmmPrice);\\n        uint256 priceDelta = _averagePrice > price\\n            ? _averagePrice.sub(price)\\n            : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp >\\n            _lastIncreasedTime.add(MIN_PROFIT_TIME)\\n            ? 0\\n            : s.minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function _getFundingFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) internal view returns (uint256) {\\n        if (_size == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fundingRate = s.cumulativeFundingRates[_token].sub(\\n            _entryFundingRate\\n        );\\n        if (fundingRate == 0) {\\n            return 0;\\n        }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function _getPositionFee(uint256 _sizeDelta)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_sizeDelta == 0) {\\n            return 0;\\n        }\\n        uint256 afterFeeUsd = _sizeDelta\\n            .mul(BASIS_POINTS_DIVISOR.sub(MARGIN_FEE_BASIS_POINTS))\\n            .div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function _getTargetAdjustedFee(\\n        LibExchangeStorage.Storage storage s,\\n        address _token,\\n        uint256 _fee\\n    ) internal view returns (uint256) {\\n        uint256 _initialAmount = s.nusdAmounts[_token];\\n        uint256 _targetAmount = _getTargetNUSDAmount(s, _token);\\n\\n        if (_targetAmount == 0 || _initialAmount == 0) {\\n            return _fee;\\n        } else if (_initialAmount > _targetAmount) {\\n            return _fee;\\n        }\\n        return _fee.mul(_initialAmount).div(_targetAmount);\\n    }\\n\\n    function _getTargetNUSDAmount(\\n        LibExchangeStorage.Storage storage s,\\n        address _token\\n    ) internal view returns (uint256) {\\n        uint256 _nusdSupply = IERC20(s.nusd).totalSupply();\\n        if (_nusdSupply == 0) {\\n            return 0;\\n        }\\n        uint256 _tokenWeight = s.tokenWeights[_token];\\n\\n        return _nusdSupply.mul(_tokenWeight).div(s.totalTokenWeight);\\n    }\\n}\\n\",\"keccak256\":\"0xd53f49adeabcaa12b344200b983c32bcbe65835583342dbca880a4fbb9dc92bb\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\ninterface IVault {\\n    function getRedemptionCollateralUsd(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setIsMintingEnabled(bool _isMintingEnabled) external;\\n\\n    function setFees(\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function setMaxNUSD(uint256 _maxNUSDBatchSize, uint256 _maxNUSDBuffer)\\n        external;\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyNUSD(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function sellNUSD(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function BASIS_POINTS_DIVISOR() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function nusdAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _nusdAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getUtilisation(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    function adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) external view returns (uint256);\\n\\n    function withdrawFees(address _token, address _receiver)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc4fffef396e90fdca940fbe33d9b4bfb03241c32981b866a8c5f701206625d12\",\"license\":\"MIT\"},\"contracts/facets/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\ninterface IVaultPriceFeed {\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xff885f963e2e933459aa40355d5ef3c9f98431cfab486e60ecb14280afdf5b8c\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NUSD_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 5 * PRICE_PRECISION; // 5 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.based.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address nusd;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) nusdAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNUSDMinted;\\n        mapping(address => mapping(address => int256)) nusdMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xb35bc02531ec938fd36f0171d18bb6b6b4a39299dd69e29e24b18d741b33c776\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060000160006101000a81548160ff021916908315150217905550612bfe8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a4543ead11610066578063a4543ead1461068d578063d7176ca9146107ba578063d802178e14610863578063dc383cab14610990578063f3535e6c14610c055761009e565b806320542568146100a35780632ac0184c146101fa5780632e3e3342146102e657806386d4d0f51461041357806395a7535a14610540575b600080fd5b6101a3600480360360808110156100b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561012057600080fd5b82018360208201111561013257600080fd5b8035906020019184602083028401116401000000008311171561015457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610c9d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101e65780820151818401526020810190506101cb565b505050509050019250505060405180910390f35b6102d06004803603604081101561021057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184602083028401116401000000008311171561028157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611230565b6040518082815260200191505060405180910390f35b6103bc600480360360408110156102fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033957600080fd5b82018360208201111561034b57600080fd5b8035906020019184602083028401116401000000008311171561036d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506113af565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103ff5780820151818401526020810190506103e4565b505050509050019250505060405180910390f35b6104e96004803603604081101561042957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561046657600080fd5b82018360208201111561047857600080fd5b8035906020019184602083028401116401000000008311171561049a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061162a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561052c578082015181840152602081019050610511565b505050509050019250505060405180910390f35b6106366004803603606081101561055657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105b357600080fd5b8201836020820111156105c557600080fd5b803590602001918460208302840111640100000000831117156105e757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611709565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561067957808201518184015260208101905061065e565b505050509050019250505060405180910390f35b610763600480360360408110156106a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156106e057600080fd5b8201836020820111156106f257600080fd5b8035906020019184602083028401116401000000008311171561071457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611982565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107a657808201518184015260208101905061078b565b505050509050019250505060405180910390f35b610846600480360360808110156107d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c8f565b604051808381526020018281526020019250505060405180910390f35b6109396004803603604081101561087957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108b657600080fd5b8201836020820111156108c857600080fd5b803590602001918460208302840111640100000000831117156108ea57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611d66565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561097c578082015181840152602081019050610961565b505050509050019250505060405180910390f35b610bae600480360360a08110156109a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610a0357600080fd5b820183602082011115610a1557600080fd5b80359060200191846020830284011164010000000083111715610a3757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9757600080fd5b820183602082011115610aa957600080fd5b80359060200191846020830284011164010000000083111715610acb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b2b57600080fd5b820183602082011115610b3d57600080fd5b80359060200191846020830284011164010000000083111715610b5f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611f16565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf1578082015181840152602081019050610bd6565b505050509050019250505060405180910390f35b610c8760048036036060811015610c1b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123ad565b6040518082815260200191505060405180910390f35b60606000600990506000309050600030905060608386510267ffffffffffffffff81118015610ccb57600080fd5b50604051908082528060200260200182016040528015610cfa5781602001602082028036833780820191505090505b50905060005b8651811015611220576000878281518110610d1757fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d5a578990505b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611212576000600c0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548387840281518110610e0357fe5b6020026020010181815250506000600d0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360018885020181518110610e6357fe5b6020026020010181815250506000600b0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360028885020181518110610ec357fe5b6020026020010181815250508473ffffffffffffffffffffffffffffffffffffffff16632c668ec1828b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610f3e57600080fd5b505afa158015610f52573d6000803e3d6000fd5b505050506040513d6020811015610f6857600080fd5b81019080805190602001909291905050508360038885020181518110610f8a57fe5b602002602001018181525050610fb281600060020160149054906101000a900460ff166124d6565b8360048885020181518110610fc357fe5b602002602001018181525050610feb81600060020160149054906101000a900460ff16612597565b8360058885020181518110610ffc57fe5b6020026020010181815250506000600e0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836006888502018151811061105c57fe5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae69163826000806040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183151581526020018215158152602001935050505060206040518083038186803b1580156110e457600080fd5b505afa1580156110f8573d6000803e3d6000fd5b505050506040513d602081101561110e57600080fd5b8101908080519060200190929190505050836007888502018151811061113057fe5b6020026020010181815250508373ffffffffffffffffffffffffffffffffffffffff16635ae6916382600160006040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183151581526020018215158152602001935050505060206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d60208110156111e357600080fd5b8101908080519060200190929190505050836008888502018151811061120557fe5b6020026020010181815250505b508080600101915050610d00565b5080945050505050949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d60208110156112a357600080fd5b8101908080519060200190929190505050905060005b83518110156113a45760008482815181106112d057fe5b6020026020010151905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d602081101561136d57600080fd5b81019080805190602001909291905050509050611393818561265890919063ffffffff16565b9350505080806001019150506112b9565b508091505092915050565b606060006002905060608184510267ffffffffffffffff811180156113d357600080fd5b506040519080825280602002602001820160405280156114025781602001602082028036833780820191505090505b50905060005b845181101561161e57600085828151811061141f57fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114b5578673ffffffffffffffffffffffffffffffffffffffff1631838584028151811061148457fe5b602002602001018181525050600083600186850201815181106114a357fe5b60200260200101818152505050611611565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b8101908080519060200190929190505050838584028151811061156557fe5b6020026020010181815250508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b757600080fd5b505afa1580156115cb573d6000803e3d6000fd5b505050506040513d60208110156115e157600080fd5b8101908080519060200190929190505050836001868502018151811061160357fe5b602002602001018181525050505b8080600101915050611408565b50809250505092915050565b606080825167ffffffffffffffff8111801561164557600080fd5b506040519080825280602002602001820160405280156116745781602001602082028036833780820191505090505b50905060005b83518110156116fe576000601101600085838151811061169657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548282815181106116e557fe5b602002602001018181525050808060010191505061167a565b508091505092915050565b606060006002905060608184510267ffffffffffffffff8111801561172d57600080fd5b5060405190808252806020026020018201604052801561175c5781602001602082028036833780820191505090505b50905060005b845181101561197557600085828151811061177957fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117bc578690505b600080600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611893576118788161186a846102586126db90919063ffffffff16565b61276190919063ffffffff16565b858786028151811061188657fe5b6020026020010181815250505b600080600f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156119655760006118ea6000856127ea565b9050600080600f0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611945828261299d90919063ffffffff16565b8760018a8902018151811061195657fe5b60200260200101818152505050505b5050508080600101915050611762565b5080925050509392505050565b60606000600290506000600290506060818386518161199d57fe5b040267ffffffffffffffff811180156119b557600080fd5b506040519080825280602002602001820160405280156119e45781602001602082028036833780820191505090505b50905060005b838651816119f457fe5b04811015611c825760008685830281518110611a0c57fe5b6020026020010151905060008760018785020181518110611a2957fe5b6020026020010151905060008973ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d6020811015611ae457600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b5e57600080fd5b505afa158015611b72573d6000803e3d6000fd5b505050506040513d6020811015611b8857600080fd5b81019080805190602001909291905050508587860281518110611ba757fe5b6020026020010181815250508173ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c1a57600080fd5b505afa158015611c2e573d6000803e3d6000fd5b505050506040513d6020811015611c4457600080fd5b81019080805190602001909291905050508560018887020181518110611c6657fe5b60200260200101818152505050505080806001019150506119ea565b5080935050505092915050565b6000806000611cb086600060020160149054906101000a900460ff166124d6565b90506000611cd086600060020160149054906101000a900460ff16612597565b90506000611cf982611ceb85896126db90919063ffffffff16565b61276190919063ffffffff16565b90506000611d39612710611d2b611d1c601e61271061265890919063ffffffff16565b856126db90919063ffffffff16565b61276190919063ffffffff16565b90506000611d50828461265890919063ffffffff16565b9050818196509650505050505094509492505050565b606080825167ffffffffffffffff81118015611d8157600080fd5b50604051908082528060200260200182016040528015611db05781602001602082028036833780820191505090505b50905060005b8351811015611f0b576000848281518110611dcd57fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e42578573ffffffffffffffffffffffffffffffffffffffff1631838381518110611e3057fe5b60200260200101818152505050611efe565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ea957600080fd5b505afa158015611ebd573d6000803e3d6000fd5b505050506040513d6020811015611ed357600080fd5b8101908080519060200190929190505050838381518110611ef057fe5b602002602001018181525050505b8080600101915050611db6565b508091505092915050565b606080600985510267ffffffffffffffff81118015611f3457600080fd5b50604051908082528060200260200182016040528015611f635781602001602082028036833780820191505090505b50905060005b855181101561239f5760008060008060008060003073ffffffffffffffffffffffffffffffffffffffff16634a3f088d8f8f8b81518110611fa657fe5b60200260200101518f8c81518110611fba57fe5b60200260200101518f8d81518110611fce57fe5b60200260200101516040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182151581526020019450505050506101006040518083038186803b15801561206457600080fd5b505afa158015612078573d6000803e3d6000fd5b505050506040513d61010081101561208f57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050975097509750509650965096509650868960098a028151811061210557fe5b6020026020010181815250508589600160098b02018151811061212457fe5b6020026020010181815250508489600260098b02018151811061214357fe5b6020026020010181815250508389600360098b02018151811061216257fe5b6020026020010181815250508161217a57600061217d565b60015b60ff1689600460098b02018151811061219257fe5b6020026020010181815250508289600560098b0201815181106121b157fe5b6020026020010181815250508089600660098b0201815181106121d057fe5b6020026020010181815250505050505050505060008260098302815181106121f457fe5b60200260200101519050600083600260098502018151811061221257fe5b60200260200101519050600084600660098602018151811061223057fe5b60200260200101519050600082111561238f576000803073ffffffffffffffffffffffffffffffffffffffff16635c07eaab8b888151811061226e57fe5b602002602001015187878d8b8151811061228457fe5b6020026020010151886040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001831515815260200182815260200195505050505050604080518083038186803b1580156122f457600080fd5b505afa158015612308573d6000803e3d6000fd5b505050506040513d604081101561231e57600080fd5b810190808051906020019092919080519060200190929190505050915091508161234957600061234c565b60015b60ff1687600760098902018151811061236157fe5b6020026020010181815250508087600860098902018151811061238057fe5b60200260200101818152505050505b5050508080600101915050611f69565b508091505095945050505050565b6000806123cc84600060020160149054906101000a900460ff166124d6565b905060006123ec84600060020160149054906101000a900460ff16612597565b9050600080600c0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600d0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061248f828461265890919063ffffffff16565b905060006124b8866124aa87856126db90919063ffffffff16565b61276190919063ffffffff16565b90506124c76000828a8c612a25565b96505050505050509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846000856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183151581526020018215158152602001935050505060206040518083038186803b15801561255457600080fd5b505afa158015612568573d6000803e3d6000fd5b505050506040513d602081101561257e57600080fd5b8101908080519060200190929190505050905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16635ae69163846001856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183151581526020018215158152602001935050505060206040518083038186803b15801561261557600080fd5b505afa158015612629573d6000803e3d6000fd5b505050506040513d602081101561263f57600080fd5b8101908080519060200190929190505050905092915050565b6000828211156126d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b6000808314156126ee576000905061275b565b60008284029050828482816126ff57fe5b0414612756576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612ba86021913960400191505060405180910390fd5b809150505b92915050565b60008082116127d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816127e157fe5b04905092915050565b6000426128436170808560100160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461299d90919063ffffffff16565b11156128525760009050612997565b60006128bc6170806128ae8660100160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544261265890919063ffffffff16565b61276190919063ffffffff16565b9050600084600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561291857600092505050612997565b612992816129848461297689600d0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102586126db90919063ffffffff16565b6126db90919063ffffffff16565b61276190919063ffffffff16565b925050505b92915050565b600080828401905083811015612a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612ac6578560070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ac9565b60125b905060008660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612b6b578660070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b6e565b60125b9050612b9b82600a0a612b8d83600a0a896126db90919063ffffffff16565b61276190919063ffffffff16565b9250505094935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220bb5acefbd4e65c5d0d0e98248f9762ad50aab80bef179a586c07de552a24dea364736f6c63430007050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3530,
        "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)9786_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)9673_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)9673_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1217_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)952_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)9673_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 9660,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9662,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9664,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9666,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9668,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9670,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 9672,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)952_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 947,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 951,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)9786_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 9675,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9677,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9679,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9681,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "nusd",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9683,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9685,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9687,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1217_storage"
          },
          {
            "astId": 9691,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9695,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)9673_storage)"
          },
          {
            "astId": 9699,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9703,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9707,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9711,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9715,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "nusdAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9719,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9723,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9727,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9731,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9735,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9739,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9743,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9745,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 9749,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9753,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 9757,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9761,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9765,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 9769,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 9771,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 9773,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 9777,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 9779,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "totalNUSDMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 9785,
            "contract": "contracts/facets/Reader/ReaderFacet.sol:ReaderFacet",
            "label": "nusdMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}