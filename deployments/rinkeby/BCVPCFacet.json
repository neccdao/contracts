{
  "address": "0x09aDee1e8396a6526902c1ad04Ad914C94dc3Fbb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "getPayoutSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sum_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetSum",
          "type": "uint256"
        }
      ],
      "name": "setTargetSum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "setWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "storePayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateBCVs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdf5fd4689c232a5f76f24ed8cc3c0d7c53f21dde5aee9650ddc1369f7bcff4f",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x09aDee1e8396a6526902c1ad04Ad914C94dc3Fbb",
    "transactionIndex": 32,
    "gasUsed": "894558",
    "logsBloom": "0x
    "blockHash": "0x35e715555c0cbcb9b78fcd69ee5157a01fb617ca398604433b57b4b9d560bed2",
    "transactionHash": "0xcdf5fd4689c232a5f76f24ed8cc3c0d7c53f21dde5aee9650ddc1369f7bcff4f",
    "logs": [],
    "blockNumber": 9436832,
    "cumulativeGasUsed": "16471776",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "151e2ead869a844c9308e821e86ae1fb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"getPayoutSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetSum\",\"type\":\"uint256\"}],\"name\":\"setTargetSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"storePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBCVs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BCVPCFacet.sol\":\"BCVPCFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/facets/Bond/BCVPCFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Facet.sol\\\";\\nimport \\\"./LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\n\\ninterface IDepository {\\n    function setAdjustment(\\n        bool _addition,\\n        uint256 _delta,\\n        uint256 _seconds,\\n        address _principle\\n    ) external;\\n\\n    function terms(address _principle)\\n        external\\n        view\\n        returns (LibBondStorage.Terms memory);\\n}\\n\\ncontract BCVPCFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    // anyone can trigger a BCV update\\n    // if a bond is 20% underweight for the period, its BCV will increase 20% over next period\\n    function updateBCVs() external {\\n        uint256 _principlesLength = EnumerableSet.length(s.principles);\\n\\n        for (\\n            uint256 _principleIndex = 0;\\n            _principleIndex < _principlesLength;\\n            _principleIndex++\\n        ) {\\n            address _principle = EnumerableSet.at(\\n                s.principles,\\n                _principleIndex\\n            );\\n\\n            LibBondStorage.Terms memory _terms = IDepository(address(this))\\n                .terms(_principle);\\n            uint256 BCV = _terms.controlVariable;\\n            uint256 _principlePayoutSum = getPayoutSum(_principle);\\n\\n            uint256 newBCV = _principlePayoutSum != 0 && s.targetSum != 0\\n                ? BCV.mul(_principlePayoutSum).div(s.targetSum)\\n                : BCV;\\n\\n            if (s.weights[_principleIndex] != 0 && s.totalWeight != 0) {\\n                // higher weight means lower BCV meaning cheaper bond pricing\\n                // hence we do (total weight - principle weight) / total weight\\n                newBCV = newBCV\\n                    .mul(s.totalWeight.sub(s.weights[_principleIndex]))\\n                    .div(s.totalWeight);\\n            }\\n\\n            if (newBCV > BCV) {\\n                IDepository(address(this)).setAdjustment(\\n                    true,\\n                    newBCV.sub(BCV),\\n                    s.epochLength * BCV_ADJUSTMENT_EPOCH_PERIOD,\\n                    _principle\\n                );\\n            } else {\\n                IDepository(address(this)).setAdjustment(\\n                    false,\\n                    BCV.sub(newBCV),\\n                    s.epochLength * BCV_ADJUSTMENT_EPOCH_PERIOD,\\n                    _principle\\n                );\\n            }\\n        }\\n    }\\n\\n    /* ========== ONLY IDepository(address(this)) ========== */\\n\\n    // IDepository(address(this)) stores the payout amount and block timestamp it occurred for each bond\\n    function storePayout(address _principle, uint256 _amount) public {\\n        require(msg.sender == address(this), \\\"Only depository\\\");\\n        uint256 _principleIndex = BondDepositoryLib.getIndexAt(s, _principle);\\n\\n        s.payouts[_principleIndex].push(\\n            LibBondStorage.Payout({\\n                amount: _amount,\\n                blockTimestamp: block.timestamp\\n            })\\n        );\\n    }\\n\\n    /* ========== ONLY POLICY ========== */\\n\\n    // sets target sum of Necc paid per period length\\n    // (in 9 Necc decimals)\\n    function setTargetSum(uint256 _targetSum) external {\\n        onlyGov();\\n        s.targetSum = _targetSum;\\n    }\\n\\n    // policy sets a weight for each bond (determines portion of target sum allocated)\\n    function setWeight(address _principle, uint256 _weight) external {\\n        onlyGov();\\n        uint256 _principleIndex = BondDepositoryLib.getIndexAt(s, _principle);\\n        s.totalWeight = s.totalWeight.add(_weight).sub(\\n            s.weights[_principleIndex]\\n        );\\n        s.weights[_principleIndex] = _weight;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function targetSum() public view returns (uint256) {\\n        return s.targetSum;\\n    }\\n\\n    // returns sum of Necc paid for a bond in the past period\\n    function getPayoutSum(address _principle)\\n        public\\n        view\\n        returns (uint256 sum_)\\n    {\\n        uint256 _principleIndex = BondDepositoryLib.getIndexAt(s, _principle);\\n        uint256 blockTimestampAfter = block.timestamp.sub(s.epochLength);\\n\\n        LibBondStorage.Payout[] storage _principlePayouts = s.payouts[\\n            _principleIndex\\n        ];\\n\\n        for (uint256 i = 0; i < _principlePayouts.length; i++) {\\n            if (_principlePayouts[i].blockTimestamp > blockTimestampAfter) {\\n                sum_ = sum_.add(_principlePayouts[i].amount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3f61de03177d036e1d37a1205cb4e6641ce5ad53dd78f49bce94a8547ab7734\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\nimport \\\"./LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeec3911f451e8dcaecde30f9c6b377508e3fc42f054209422cd8b3ff18d5b7db\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"./LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x0ff93cfcd2502595e208611b90694f8ab4cb6a14cb03496e01d72541df4a5994\",\"license\":\"MIT\"},\"contracts/facets/Bond/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address nNecc; // token given for staking\\n        address nusd; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NUSD\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 totalBonus;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        mapping(uint256 => uint256) weights; // weight per bond type\\n        uint256 totalWeight; // total weight (denominator)\\n\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xf7f8b7d156fef1852fe57e1c268140a8df3b92487553f539423cc592e1fa9700\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f4a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806305ba0cf114610067578063067704841461008357806355a2be26146100a157806370e30b1e146100bd5780638aaa5e73146100c75780639d904f81146100f7575b600080fd5b610081600480360381019061007c9190610be4565b610113565b005b61008b610193565b6040516100989190610de5565b60405180910390f35b6100bb60048036038101906100b69190610be4565b61019f565b005b6100c561028b565b005b6100e160048036038101906100dc9190610bbb565b610576565b6040516100ee9190610de5565b60405180910390f35b610111600480360381019061010c9190610c49565b610638565b005b61011b61064d565b6000610128600084610657565b905061016a6000601d0160008381526020019081526020016000205461015c846000601e01546106d390919063ffffffff16565b61075b90919063ffffffff16565b6000601e0181905550816000601d01600083815260200190815260200160002081905550505050565b600080601b0154905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020490610da5565b60405180910390fd5b600061021a600084610657565b90506000601c016000828152602001908152602001600020604051806040016040528084815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050505050565b600061029a60006006016107de565b905060005b818110156105725760006102b76000600601836107f3565b90506102c1610a78565b3073ffffffffffffffffffffffffffffffffffffffff1663c8c819ac836040518263ffffffff1660e01b81526004016102fa9190610d45565b60e06040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610c20565b9050600081600001519050600061036084610576565b905060008082141580156103795750600080601b015414155b61038357826103ae565b6103ad6000601b015461039f848661080d90919063ffffffff16565b61089390919063ffffffff16565b5b9050600080601d01600088815260200190815260200160002054141580156103db5750600080601e015414155b1561043a576104376000601e015461042961041a6000601d0160008b8152602001908152602001600020546000601e015461075b90919063ffffffff16565b8461080d90919063ffffffff16565b61089390919063ffffffff16565b90505b828111156104d3573073ffffffffffffffffffffffffffffffffffffffff1663128bae676001610473868561075b90919063ffffffff16565b600160006015015402896040518563ffffffff1660e01b815260040161049c9493929190610d60565b600060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b50505050610560565b3073ffffffffffffffffffffffffffffffffffffffff1663128bae676000610504848761075b90919063ffffffff16565b600160006015015402896040518563ffffffff1660e01b815260040161052d9493929190610d60565b600060405180830381600087803b15801561054757600080fd5b505af115801561055b573d6000803e3d6000fd5b505050505b5050505050808060010191505061029f565b5050565b600080610584600084610657565b905060006105a06000601501544261075b90919063ffffffff16565b9050600080601c016000848152602001908152602001600020905060005b818054905081101561062f57828282815481106105d757fe5b90600052602060002090600202016001015411156106225761061f8282815481106105fe57fe5b906000526020600020906002020160000154866106d390919063ffffffff16565b94505b80806001019150506105be565b50505050919050565b61064061064d565b806000601b018190555050565b61065561091c565b565b600080610666846006016107de565b905060005b818110156106ca578373ffffffffffffffffffffffffffffffffffffffff1661069786600601836107f3565b73ffffffffffffffffffffffffffffffffffffffff1614156106bd5780925050506106cd565b808060010191505061066b565b50505b92915050565b600080828401905083811015610751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000828211156107d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006107ec826000016109b7565b9050919050565b600061080283600001836109c8565b60001c905092915050565b600080831415610820576000905061088d565b600082840290508284828161083157fe5b0414610888576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610ef46021913960400191505060405180910390fd5b809150505b92915050565b600080821161090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161091357fe5b04905092915050565b610924610a4b565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ac90610dc5565b60405180910390fd5b565b600081600001805490509050919050565b600081836000018054905011610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ed26022913960400191505060405180910390fd5b826000018281548110610a3857fe5b9060005260206000200154905092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600081359050610ac681610e8c565b92915050565b600081519050610adb81610ea3565b92915050565b600060e08284031215610af357600080fd5b610afd60e0610e00565b90506000610b0d84828501610ba6565b6000830152506020610b2184828501610ba6565b6020830152506040610b3584828501610ba6565b6040830152506060610b4984828501610ba6565b6060830152506080610b5d84828501610ba6565b60808301525060a0610b7184828501610ba6565b60a08301525060c0610b8584828501610acc565b60c08301525092915050565b600081359050610ba081610eba565b92915050565b600081519050610bb581610eba565b92915050565b600060208284031215610bcd57600080fd5b6000610bdb84828501610ab7565b91505092915050565b60008060408385031215610bf757600080fd5b6000610c0585828601610ab7565b9250506020610c1685828601610b91565b9150509250929050565b600060e08284031215610c3257600080fd5b6000610c4084828501610ae1565b91505092915050565b600060208284031215610c5b57600080fd5b6000610c6984828501610b91565b91505092915050565b610c7b81610e42565b82525050565b610c8a81610e54565b82525050565b6000610c9d600f83610e31565b91507f4f6e6c79206465706f7369746f727900000000000000000000000000000000006000830152602082019050919050565b6000610cdd602283610e31565b91507f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b610d3f81610e80565b82525050565b6000602082019050610d5a6000830184610c72565b92915050565b6000608082019050610d756000830187610c81565b610d826020830186610d36565b610d8f6040830185610d36565b610d9c6060830184610c72565b95945050505050565b60006020820190508181036000830152610dbe81610c90565b9050919050565b60006020820190508181036000830152610dde81610cd0565b9050919050565b6000602082019050610dfa6000830184610d36565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610e2757610e26610e8a565b5b8060405250919050565b600082825260208201905092915050565b6000610e4d82610e60565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565bfe5b610e9581610e42565b8114610ea057600080fd5b50565b610eac81610e54565b8114610eb757600080fd5b50565b610ec381610e80565b8114610ece57600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212203696f295164ee1a6de34aea4c992808519694cb2789d49d36483105c1c935b1e64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806305ba0cf114610067578063067704841461008357806355a2be26146100a157806370e30b1e146100bd5780638aaa5e73146100c75780639d904f81146100f7575b600080fd5b610081600480360381019061007c9190610be4565b610113565b005b61008b610193565b6040516100989190610de5565b60405180910390f35b6100bb60048036038101906100b69190610be4565b61019f565b005b6100c561028b565b005b6100e160048036038101906100dc9190610bbb565b610576565b6040516100ee9190610de5565b60405180910390f35b610111600480360381019061010c9190610c49565b610638565b005b61011b61064d565b6000610128600084610657565b905061016a6000601d0160008381526020019081526020016000205461015c846000601e01546106d390919063ffffffff16565b61075b90919063ffffffff16565b6000601e0181905550816000601d01600083815260200190815260200160002081905550505050565b600080601b0154905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020490610da5565b60405180910390fd5b600061021a600084610657565b90506000601c016000828152602001908152602001600020604051806040016040528084815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050505050565b600061029a60006006016107de565b905060005b818110156105725760006102b76000600601836107f3565b90506102c1610a78565b3073ffffffffffffffffffffffffffffffffffffffff1663c8c819ac836040518263ffffffff1660e01b81526004016102fa9190610d45565b60e06040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610c20565b9050600081600001519050600061036084610576565b905060008082141580156103795750600080601b015414155b61038357826103ae565b6103ad6000601b015461039f848661080d90919063ffffffff16565b61089390919063ffffffff16565b5b9050600080601d01600088815260200190815260200160002054141580156103db5750600080601e015414155b1561043a576104376000601e015461042961041a6000601d0160008b8152602001908152602001600020546000601e015461075b90919063ffffffff16565b8461080d90919063ffffffff16565b61089390919063ffffffff16565b90505b828111156104d3573073ffffffffffffffffffffffffffffffffffffffff1663128bae676001610473868561075b90919063ffffffff16565b600160006015015402896040518563ffffffff1660e01b815260040161049c9493929190610d60565b600060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b50505050610560565b3073ffffffffffffffffffffffffffffffffffffffff1663128bae676000610504848761075b90919063ffffffff16565b600160006015015402896040518563ffffffff1660e01b815260040161052d9493929190610d60565b600060405180830381600087803b15801561054757600080fd5b505af115801561055b573d6000803e3d6000fd5b505050505b5050505050808060010191505061029f565b5050565b600080610584600084610657565b905060006105a06000601501544261075b90919063ffffffff16565b9050600080601c016000848152602001908152602001600020905060005b818054905081101561062f57828282815481106105d757fe5b90600052602060002090600202016001015411156106225761061f8282815481106105fe57fe5b906000526020600020906002020160000154866106d390919063ffffffff16565b94505b80806001019150506105be565b50505050919050565b61064061064d565b806000601b018190555050565b61065561091c565b565b600080610666846006016107de565b905060005b818110156106ca578373ffffffffffffffffffffffffffffffffffffffff1661069786600601836107f3565b73ffffffffffffffffffffffffffffffffffffffff1614156106bd5780925050506106cd565b808060010191505061066b565b50505b92915050565b600080828401905083811015610751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000828211156107d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006107ec826000016109b7565b9050919050565b600061080283600001836109c8565b60001c905092915050565b600080831415610820576000905061088d565b600082840290508284828161083157fe5b0414610888576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610ef46021913960400191505060405180910390fd5b809150505b92915050565b600080821161090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161091357fe5b04905092915050565b610924610a4b565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ac90610dc5565b60405180910390fd5b565b600081600001805490509050919050565b600081836000018054905011610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ed26022913960400191505060405180910390fd5b826000018281548110610a3857fe5b9060005260206000200154905092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600081359050610ac681610e8c565b92915050565b600081519050610adb81610ea3565b92915050565b600060e08284031215610af357600080fd5b610afd60e0610e00565b90506000610b0d84828501610ba6565b6000830152506020610b2184828501610ba6565b6020830152506040610b3584828501610ba6565b6040830152506060610b4984828501610ba6565b6060830152506080610b5d84828501610ba6565b60808301525060a0610b7184828501610ba6565b60a08301525060c0610b8584828501610acc565b60c08301525092915050565b600081359050610ba081610eba565b92915050565b600081519050610bb581610eba565b92915050565b600060208284031215610bcd57600080fd5b6000610bdb84828501610ab7565b91505092915050565b60008060408385031215610bf757600080fd5b6000610c0585828601610ab7565b9250506020610c1685828601610b91565b9150509250929050565b600060e08284031215610c3257600080fd5b6000610c4084828501610ae1565b91505092915050565b600060208284031215610c5b57600080fd5b6000610c6984828501610b91565b91505092915050565b610c7b81610e42565b82525050565b610c8a81610e54565b82525050565b6000610c9d600f83610e31565b91507f4f6e6c79206465706f7369746f727900000000000000000000000000000000006000830152602082019050919050565b6000610cdd602283610e31565b91507f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b610d3f81610e80565b82525050565b6000602082019050610d5a6000830184610c72565b92915050565b6000608082019050610d756000830187610c81565b610d826020830186610d36565b610d8f6040830185610d36565b610d9c6060830184610c72565b95945050505050565b60006020820190508181036000830152610dbe81610c90565b9050919050565b60006020820190508181036000830152610dde81610cd0565b9050919050565b6000602082019050610dfa6000830184610d36565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610e2757610e26610e8a565b5b8060405250919050565b600082825260208201905092915050565b6000610e4d82610e60565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565bfe5b610e9581610e42565b8114610ea057600080fd5b50565b610eac81610e54565b8114610eb757600080fd5b50565b610ec381610e80565b8114610ece57600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212203696f295164ee1a6de34aea4c992808519694cb2789d49d36483105c1c935b1e64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5215,
        "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)5395_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)5256_storage)dyn_storage": {
        "base": "t_struct(Info)5256_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)5251_storage)dyn_storage": {
        "base": "t_struct(Payout)5251_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)5287_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)5287_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)5314_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)5314_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)5251_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)5251_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)5287_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)5287_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)5296_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)5296_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)5263_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)5263_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)5278_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)5278_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2240_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2239,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1975_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)5287_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 5280,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5282,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5284,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5286,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)5296_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 5289,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5291,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5293,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5295,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)5314_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 5307,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5309,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5311,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5313,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)5263_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 5258,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5260,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5262,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)5305_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 5298,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5300,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5302,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5304,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)5256_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 5253,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5255,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)5251_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 5248,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1975_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1970,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1974,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)5395_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 5316,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5318,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5320,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "nusd",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5322,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5324,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5326,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "staking",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5328,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "principles",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)2240_storage"
          },
          {
            "astId": 5332,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "terms",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Terms)5278_storage)"
          },
          {
            "astId": 5336,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)5296_storage)"
          },
          {
            "astId": 5342,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)5287_storage))"
          },
          {
            "astId": 5346,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5350,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5354,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5358,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 5361,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "info",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(Info)5256_storage)dyn_storage"
          },
          {
            "astId": 5365,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)5263_storage)"
          },
          {
            "astId": 5367,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "17",
            "type": "t_struct(Epoch)5305_storage"
          },
          {
            "astId": 5369,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 5371,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "22",
            "type": "t_address"
          },
          {
            "astId": 5373,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "locker",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 5375,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "totalBonus",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 5377,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 5381,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Claim)5314_storage)"
          },
          {
            "astId": 5383,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          },
          {
            "astId": 5388,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)5251_storage)dyn_storage)"
          },
          {
            "astId": 5392,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "weights",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5394,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "totalWeight",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)5278_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 5265,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5267,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5269,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5271,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5273,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5275,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5277,
            "contract": "contracts/facets/Bond/BCVPCFacet.sol:BCVPCFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}