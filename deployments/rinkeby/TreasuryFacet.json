{
  "address": "0x9588e0D5E1508cE6fFf1557eCC552B198a97995b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "activated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "ChangeActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "managing",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "ChangeQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excessReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Necc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_NUSD",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blocksNeededForQueue",
          "type": "uint256"
        }
      ],
      "name": "initializeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithNecc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryFacet.MANAGING",
          "name": "_managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "toggle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "valueOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfd652de2d9354dd65edd8daac2a6056b0ee4f7d2d23ec72345cd78cc156210e",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x9588e0D5E1508cE6fFf1557eCC552B198a97995b",
    "transactionIndex": 56,
    "gasUsed": "4002254",
    "logsBloom": "0x
    "blockHash": "0x557e9faf9acb4425c508b926325e6df2f2f22ea9af37c8401542f0e5663373a7",
    "transactionHash": "0xcfd652de2d9354dd65edd8daac2a6056b0ee4f7d2d23ec72345cd78cc156210e",
    "logs": [],
    "blockNumber": 9537958,
    "cumulativeGasUsed": "18075093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "14bf294b40c513321b660e85ef40bc5e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Necc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NUSD\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"name\":\"initializeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithNecc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryFacet.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_profit\":\"uint\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint\"}},\"excessReserves()\":{\"returns\":{\"_0\":\"uint\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"queue(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"repayDebtWithNecc(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}},\"toggle(uint8,address)\":{\"params\":{\"_address\":\"address\",\"_managing\":\"MANAGING\"},\"returns\":{\"_0\":\"bool\"}},\"valueOfToken(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"},\"returns\":{\"_value\":\"uint\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for Necc\"},\"excessReserves()\":{\"notice\":\"returns excess reserves not backing tokens\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mintRewards(address,uint256)\":{\"notice\":\"send epoch reward to staking contract\"},\"queue(uint8,address)\":{\"notice\":\"queue address to change boolean in mapping\"},\"repayDebtWithNecc(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with Necc\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"toggle(uint8,address)\":{\"notice\":\"verify queue then set boolean in mapping\"},\"valueOfToken(address,uint256)\":{\"notice\":\"returns Necc valuation of asset\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn Necc for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Treasury/TreasuryFacet.sol\":\"TreasuryFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/facets/Treasury/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../../lib/LibTreasuryStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibTreasuryStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x3f376f5786ad17a1976aaa7f5c73a9018d50d5191815f3cb28216f8d72bf62da\",\"license\":\"MIT\"},\"contracts/facets/Treasury/TreasuryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface IBondCalculator {\\n    function valuation(address pair_, uint256 amount_)\\n        external\\n        view\\n        returns (uint256 _value);\\n}\\n\\ninterface IERC20Mintable {\\n    function decimals() external view returns (uint256);\\n\\n    function mint(uint256 amount_) external;\\n\\n    function mint(address account_, uint256 ammount_) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ncontract TreasuryFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Deposit(address indexed token, uint256 amount, uint256 value);\\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n    event CreateDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event RepayDebt(\\n        address indexed debtor,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 value\\n    );\\n    event ReservesManaged(address indexed token, uint256 amount);\\n    event ReservesUpdated(uint256 indexed totalReserves);\\n    event ReservesAudited(uint256 indexed totalReserves);\\n    event RewardsMinted(\\n        address indexed caller,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    event ChangeQueued(MANAGING indexed managing, address queued);\\n    event ChangeActivated(\\n        MANAGING indexed managing,\\n        address activated,\\n        bool result\\n    );\\n\\n    enum MANAGING {\\n        RESERVEDEPOSITOR,\\n        RESERVESPENDER,\\n        RESERVETOKEN,\\n        RESERVEMANAGER,\\n        LIQUIDITYDEPOSITOR,\\n        LIQUIDITYTOKEN,\\n        LIQUIDITYMANAGER,\\n        DEBTOR,\\n        REWARDMANAGER,\\n        NNECC\\n    }\\n\\n    function initializeTreasury(\\n        address _Necc,\\n        address _NUSD,\\n        uint256 _blocksNeededForQueue\\n    ) external {\\n        onlyGov();\\n        require(_Necc != address(0));\\n        s.Necc = _Necc;\\n\\n        s.isReserveToken[_NUSD] = true;\\n        s.reserveTokens.push(_NUSD);\\n\\n        s.blocksNeededForQueue = _blocksNeededForQueue;\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function mintRewards(address _recipient, uint256 _amount) external {\\n        require(s.isRewardManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(_amount <= excessReserves(), \\\"Treasury: Insufficient reserves\\\");\\n\\n        IERC20Mintable(s.Necc).mint(_recipient, _amount);\\n\\n        emit RewardsMinted(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to deposit an asset for Necc\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_) {\\n        require(\\n            s.isReserveToken[_token] || s.isLiquidityToken[_token],\\n            \\\"Treasury: Not accepted\\\"\\n        );\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (s.isReserveToken[_token]) {\\n            require(s.isReserveDepositor[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else {\\n            require(\\n                s.isLiquidityDepositor[msg.sender],\\n                \\\"Treasury: Not approved\\\"\\n            );\\n        }\\n\\n        uint256 value = valueOfToken(_token, _amount);\\n        // mint Necc needed and store amount of rewards for distribution\\n        send_ = value.sub(_profit);\\n        IERC20Mintable(s.Necc).mint(msg.sender, send_);\\n\\n        s.totalReserves = s.totalReserves.add(value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        emit Deposit(_token, _amount, value);\\n\\n        return send_;\\n    }\\n\\n    /**\\n        @notice allow approved address to burn Necc for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function withdraw(uint256 _amount, address _token) external {\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\"); // Only reserves can be used for redemptions\\n        require(\\n            s.isReserveSpender[msg.sender] == true,\\n            \\\"Treasury: Not approved\\\"\\n        );\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _value);\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdrawal(_token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function incurDebt(uint256 _amount, address _token) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\");\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n\\n        uint256 maximumDebt = IERC20(s.nNecc).balanceOf(msg.sender); // Can only borrow against nNecc held\\n        uint256 availableDebt = maximumDebt.sub(s.debtorBalance[msg.sender]);\\n        require(_value <= availableDebt, \\\"Exceeds debt limit\\\");\\n\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].add(_value);\\n        s.totalDebt = s.totalDebt.add(_value);\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).transfer(msg.sender, _amount);\\n\\n        emit CreateDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n    function repayDebtWithReserve(uint256 _amount, address _token) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n        require(s.isReserveToken[_token], \\\"Treasury: Not accepted\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_value);\\n        s.totalDebt = s.totalDebt.sub(_value);\\n\\n        s.totalReserves = s.totalReserves.add(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        emit RepayDebt(msg.sender, _token, _amount, _value);\\n    }\\n\\n    /**\\n        @notice allow approved address to repay borrowed reserves with Necc\\n        @param _amount uint\\n     */\\n    function repayDebtWithNecc(uint256 _amount) external {\\n        require(s.isDebtor[msg.sender], \\\"Treasury: Not approved\\\");\\n\\n        IERC20Mintable(s.Necc).burnFrom(msg.sender, _amount);\\n\\n        s.debtorBalance[msg.sender] = s.debtorBalance[msg.sender].sub(_amount);\\n        s.totalDebt = s.totalDebt.sub(_amount);\\n\\n        emit RepayDebt(msg.sender, s.Necc, _amount, _amount);\\n    }\\n\\n    /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n    function manage(address _token, uint256 _amount) external {\\n        if (s.isLiquidityToken[_token]) {\\n            require(s.isLiquidityManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        } else {\\n            require(s.isReserveManager[msg.sender], \\\"Treasury: Not approved\\\");\\n        }\\n\\n        uint256 _value = valueOfToken(_token, _amount);\\n        (_token, _amount);\\n        require(_value <= excessReserves(), \\\"Treasury: Insufficient reserves\\\");\\n\\n        s.totalReserves = s.totalReserves.sub(_value);\\n        emit ReservesUpdated(s.totalReserves);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit ReservesManaged(_token, _amount);\\n    }\\n\\n    /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n    function excessReserves() public view returns (uint256) {\\n        return\\n            s.totalReserves.sub(IERC20(s.Necc).totalSupply().sub(s.totalDebt));\\n    }\\n\\n    /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external {\\n        onlyGov();\\n        uint256 reserves;\\n        for (uint256 i = 0; i < s.reserveTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.reserveTokens[i],\\n                    IERC20(s.reserveTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        for (uint256 i = 0; i < s.liquidityTokens.length; i++) {\\n            reserves = reserves.add(\\n                valueOfToken(\\n                    s.liquidityTokens[i],\\n                    IERC20(s.liquidityTokens[i]).balanceOf(address(this))\\n                )\\n            );\\n        }\\n        s.totalReserves = reserves;\\n        emit ReservesUpdated(reserves);\\n        emit ReservesAudited(reserves);\\n    }\\n\\n    /**\\n        @notice returns Necc valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return _value uint\\n     */\\n    function valueOfToken(address _token, uint256 _amount)\\n        public\\n        view\\n        returns (uint256 _value)\\n    {\\n        if (s.isReserveToken[_token]) {\\n            // convert amount to match Necc decimals\\n            _value = _amount.mul(10**IERC20Mintable(s.Necc).decimals()).div(\\n                10**IERC20Mintable(_token).decimals()\\n            );\\n        } else if (s.isLiquidityToken[_token]) {\\n            _value = IBondCalculator(address(this)).valuation(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function queue(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            s.reserveDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            s.reserveSpenderQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            s.reserveTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            s.ReserveManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            s.LiquidityDepositorQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            s.LiquidityTokenQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            s.LiquidityManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue.mul(2)\\n            );\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            s.debtorQueue[_address] = block.number.add(s.blocksNeededForQueue);\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            s.rewardManagerQueue[_address] = block.number.add(\\n                s.blocksNeededForQueue\\n            );\\n        } else if (_managing == MANAGING.NNECC) {\\n            // 9\\n            s.nNeccQueue = block.number.add(s.blocksNeededForQueue);\\n        } else return false;\\n\\n        emit ChangeQueued(_managing, _address);\\n        return true;\\n    }\\n\\n    /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n    function toggle(MANAGING _managing, address _address)\\n        external\\n        returns (bool)\\n    {\\n        onlyGov();\\n        require(_address != address(0));\\n        bool _result;\\n        if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n            // 0\\n            if (\\n                requirements(\\n                    s.reserveDepositorQueue,\\n                    s.isReserveDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.reserveDepositorQueue[_address] = 0;\\n                if (!listContains(s.reserveDepositors, _address)) {\\n                    s.reserveDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveDepositor[_address];\\n            s.isReserveDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVESPENDER) {\\n            // 1\\n            if (\\n                requirements(\\n                    s.reserveSpenderQueue,\\n                    s.isReserveSpender,\\n                    _address\\n                )\\n            ) {\\n                s.reserveSpenderQueue[_address] = 0;\\n                if (!listContains(s.reserveSpenders, _address)) {\\n                    s.reserveSpenders.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveSpender[_address];\\n            s.isReserveSpender[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVETOKEN) {\\n            // 2\\n            if (requirements(s.reserveTokenQueue, s.isReserveToken, _address)) {\\n                s.reserveTokenQueue[_address] = 0;\\n                if (!listContains(s.reserveTokens, _address)) {\\n                    s.reserveTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveToken[_address];\\n            s.isReserveToken[_address] = _result;\\n        } else if (_managing == MANAGING.RESERVEMANAGER) {\\n            // 3\\n            if (\\n                requirements(\\n                    s.ReserveManagerQueue,\\n                    s.isReserveManager,\\n                    _address\\n                )\\n            ) {\\n                s.reserveManagers.push(_address);\\n                s.ReserveManagerQueue[_address] = 0;\\n                if (!listContains(s.reserveManagers, _address)) {\\n                    s.reserveManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isReserveManager[_address];\\n            s.isReserveManager[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n            // 4\\n            if (\\n                requirements(\\n                    s.LiquidityDepositorQueue,\\n                    s.isLiquidityDepositor,\\n                    _address\\n                )\\n            ) {\\n                s.liquidityDepositors.push(_address);\\n                s.LiquidityDepositorQueue[_address] = 0;\\n                if (!listContains(s.liquidityDepositors, _address)) {\\n                    s.liquidityDepositors.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityDepositor[_address];\\n            s.isLiquidityDepositor[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n            // 5\\n            if (\\n                requirements(\\n                    s.LiquidityTokenQueue,\\n                    s.isLiquidityToken,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityTokenQueue[_address] = 0;\\n                if (!listContains(s.liquidityTokens, _address)) {\\n                    s.liquidityTokens.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityToken[_address];\\n            s.isLiquidityToken[_address] = _result;\\n        } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n            // 6\\n            if (\\n                requirements(\\n                    s.LiquidityManagerQueue,\\n                    s.isLiquidityManager,\\n                    _address\\n                )\\n            ) {\\n                s.LiquidityManagerQueue[_address] = 0;\\n                if (!listContains(s.liquidityManagers, _address)) {\\n                    s.liquidityManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isLiquidityManager[_address];\\n            s.isLiquidityManager[_address] = _result;\\n        } else if (_managing == MANAGING.DEBTOR) {\\n            // 7\\n            if (requirements(s.debtorQueue, s.isDebtor, _address)) {\\n                s.debtorQueue[_address] = 0;\\n                if (!listContains(s.debtors, _address)) {\\n                    s.debtors.push(_address);\\n                }\\n            }\\n            _result = !s.isDebtor[_address];\\n            s.isDebtor[_address] = _result;\\n        } else if (_managing == MANAGING.REWARDMANAGER) {\\n            // 8\\n            if (\\n                requirements(s.rewardManagerQueue, s.isRewardManager, _address)\\n            ) {\\n                s.rewardManagerQueue[_address] = 0;\\n                if (!listContains(s.rewardManagers, _address)) {\\n                    s.rewardManagers.push(_address);\\n                }\\n            }\\n            _result = !s.isRewardManager[_address];\\n            s.isRewardManager[_address] = _result;\\n        } else if (_managing == MANAGING.NNECC) {\\n            // 9\\n            s.nNeccQueue = 0;\\n            s.nNecc = _address;\\n            _result = true;\\n        } else return false;\\n\\n        emit ChangeActivated(_managing, _address, _result);\\n        return true;\\n    }\\n\\n    /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n    function requirements(\\n        mapping(address => uint256) storage queue_,\\n        mapping(address => bool) storage status_,\\n        address _address\\n    ) internal view returns (bool) {\\n        if (!status_[_address]) {\\n            require(queue_[_address] != 0, \\\"Must queue\\\");\\n            require(queue_[_address] <= block.number, \\\"Queue not expired\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n    function listContains(address[] storage _list, address _token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _list.length; i++) {\\n            if (_list[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x633bfd703d146afd18a0c219aea62506bfe51c55819d406030f950b6c10985d8\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"},\"contracts/lib/LibTreasuryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary LibTreasuryStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.treasury.storage\\\");\\n\\n    // Single global store\\n    struct Storage {\\n        // TODO: Refactor arrays to EnumerableSet\\n        // Treasury\\n        address Necc;\\n        uint256 blocksNeededForQueue;\\n        address[] reserveTokens; // Push only, beware false-positives.\\n        address nNecc;\\n        uint256 nNeccQueue; // Delays change to nNecc address\\n        uint256 totalReserves; // Risk-free value of all assets\\n        uint256 totalDebt;\\n        mapping(address => bool) isReserveToken;\\n        mapping(address => uint256) reserveTokenQueue; // Delays changes to mapping.\\n        address[] reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveDepositor;\\n        mapping(address => uint256) reserveDepositorQueue; // Delays changes to mapping.\\n        address[] reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveSpender;\\n        mapping(address => uint256) reserveSpenderQueue; // Delays changes to mapping.\\n        address[] liquidityTokens; // Push only, beware false-positives.\\n        mapping(address => bool) isLiquidityToken;\\n        mapping(address => uint256) LiquidityTokenQueue; // Delays changes to mapping.\\n        address[] liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityDepositor;\\n        mapping(address => uint256) LiquidityDepositorQueue; // Delays changes to mapping.\\n        address[] reserveManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isReserveManager;\\n        mapping(address => uint256) ReserveManagerQueue; // Delays changes to mapping.\\n        address[] liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isLiquidityManager;\\n        mapping(address => uint256) LiquidityManagerQueue; // Delays changes to mapping.\\n        address[] debtors; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isDebtor;\\n        mapping(address => uint256) debtorQueue; // Delays changes to mapping.\\n        mapping(address => uint256) debtorBalance;\\n        address[] rewardManagers; // Push only, beware false-positives. Only for viewing.\\n        mapping(address => bool) isRewardManager;\\n        mapping(address => uint256) rewardManagerQueue; // Delays changes to mapping.\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0x88c7c9a4aa1c3b5ff8f873ee39f792b8441e3bca29e3ef2251024dd5324ac112\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506147ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80636a20de921161008c578063d1b317e511610066578063d1b317e51461033b578063d5e8be0d1461039d578063d796ffb814610404578063e83afee314610452576100ce565b80636a20de9214610253578063bc157ac1146102a1578063cad9311e1461030d576100ce565b8062f714ce146100d35780630b0eee30146101215780630c3513a81461016f57806312422d231461018d5780632b7ce500146101db5780633f59d3a7146101e5575b600080fd5b61011f600480360360408110156100e957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b9565b005b61016d6004803603604081101561013757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107d8565b005b610177610b13565b6040518082815260200191505060405180910390f35b6101d9600480360360408110156101a357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bed565b005b6101e3611148565b005b610251600480360360608110156101fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611464565b005b61029f6004803603604081101561026957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115b9565b005b6102f7600480360360608110156102b757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061180e565b6040518082815260200191505060405180910390f35b6103396004803603602081101561032357600080fd5b8101908080359060200190929190505050611cb5565b005b6103876004803603604081101561035157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f74565b6040518082815260200191505060405180910390f35b6103ec600480360360408110156103b357600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612229565b60405180821515815260200191505060405180910390f35b6104506004803603604081101561041a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061332b565b005b6104a16004803603604081101561046857600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061366b565b60405180821515815260200191505060405180910390f35b600060070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661057b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f742061636365707465640000000000000000000081525060200191505060405180910390fd5b600115156000600d0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610644576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b60006106508284611f74565b90506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b5050505061071781600060050154613c2190919063ffffffff16565b6000600501819055506000600501547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a261077d33848473ffffffffffffffffffffffffffffffffffffffff16613ca49092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8483604051808381526020018281526020019250505060405180910390a2505050565b600060100160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108f457600060190160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b6109b7565b600060160160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b5b60006109c38383611f74565b90506109cd610b13565b811115610a42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f54726561737572793a20496e73756666696369656e742072657365727665730081525060200191505060405180910390fd5b610a5a81600060050154613c2190919063ffffffff16565b6000600501819055506000600501547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a2610ac033838573ffffffffffffffffffffffffffffffffffffffff16613ca49092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2bb2640731848fe9820ba48dbc978c1fc9bbd5f11b948bfab05b7dee3378fd80836040518082815260200191505060405180910390a2505050565b6000610be8610bd46000600601546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8b57600080fd5b505afa158015610b9f573d6000803e3d6000fd5b505050506040513d6020811015610bb557600080fd5b8101908080519060200190929190505050613c2190919063ffffffff16565b600060050154613c2190919063ffffffff16565b905090565b6000601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610caf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b600060070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f742061636365707465640000000000000000000081525060200191505060405180910390fd5b6000610d7d8284611f74565b905060008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d6020811015610e3657600080fd5b810190808051906020019092919050505090506000610ea06000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483613c2190919063ffffffff16565b905080831115610f18576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f457863656564732064656274206c696d6974000000000000000000000000000081525060200191505060405180910390fd5b610f6d836000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d4690919063ffffffff16565b6000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fcb83600060060154613d4690919063ffffffff16565b600060060181905550610fec83600060050154613c2190919063ffffffff16565b6000600501819055506000600501547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505050506040513d60208110156110c257600080fd5b8101908080519060200190929190505050508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d68786604051808381526020018281526020019250505060405180910390a35050505050565b611150613dce565b600080600090505b6000600201805490508110156112a85761129961128a6000600201838154811061117e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060020184815481106111b957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d602081101561127457600080fd5b8101908080519060200190929190505050611f74565b83613d4690919063ffffffff16565b91508080600101915050611158565b5060005b6000600f01805490508110156113fc576113ed6113de6000600f0183815481106112d257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000600f01848154811061130d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561139e57600080fd5b505afa1580156113b2573d6000803e3d6000fd5b505050506040513d60208110156113c857600080fd5b8101908080519060200190929190505050611f74565b83613d4690919063ffffffff16565b915080806001019150506112ac565b5080600060050181905550807f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a2807fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446660405160405180910390a250565b61146c613dce565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114a657600080fd5b826000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600201829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060010181905550505050565b600060200160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661167b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b611683610b13565b8111156116f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f54726561737572793a20496e73756666696369656e742072657365727665730081525060200191505060405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffa8ccab40e7da8146c2304cd0950334fd30a6ba093abe86261aa13911fed849c836040518082815260200191505060405180910390a35050565b60008060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806118b65750600060100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611928576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f742061636365707465640000000000000000000081525060200191505060405180910390fd5b6119553330868673ffffffffffffffffffffffffffffffffffffffff16613dd8909392919063ffffffff16565b600060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a71576000600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a6c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b611b34565b600060130160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b5b6000611b408486611f74565b9050611b558382613c2190919063ffffffff16565b91506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611bec57600080fd5b505af1158015611c00573d6000803e3d6000fd5b50505050611c1c81600060050154613d4690919063ffffffff16565b6000600501819055506000600501547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158683604051808381526020018281526020019250505060405180910390a2509392505050565b6000601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611e0c57600080fd5b505af1158015611e20573d6000803e3d6000fd5b50505050611e79816000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613c2190919063ffffffff16565b6000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ed781600060060154613c2190919063ffffffff16565b6000600601819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f3098384604051808381526020018281526020019250505060405180910390a350565b60008060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612120576121198373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561201357600080fd5b505afa158015612027573d6000803e3d6000fd5b505050506040513d602081101561203d57600080fd5b8101908080519060200190929190505050600a0a61210b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d60208110156120e857600080fd5b8101908080519060200190929190505050600a0a85613e9990919063ffffffff16565b613f1f90919063ffffffff16565b9050612223565b600060100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612222573073ffffffffffffffffffffffffffffffffffffffff16634249719f84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d602081101561220e57600080fd5b810190808051906020019092919050505090505b5b92915050565b6000612233613dce565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561226d57600080fd5b600080600981111561227b57fe5b84600981111561228757fe5b1415612418576122a06000600b016000600a0185613fa8565b1561236657600080600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122fa600060090184614178565b612365576000600901839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132bc565b6001600981111561242557fe5b84600981111561243157fe5b14156125c25761244a6000600e016000600d0185613fa8565b1561251057600080600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124a46000600c0184614178565b61250f576000600c01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000600d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132bb565b600260098111156125cf57fe5b8460098111156125db57fe5b141561276c576125f46000600801600060070185613fa8565b156126ba5760008060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061264e600060020184614178565b6126b9576000600201839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132ba565b6003600981111561277957fe5b84600981111561278557fe5b141561297c5761279e6000601701600060160185613fa8565b156128ca576000601501839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060170160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061285e600060150184614178565b6128c9576000601501839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060160160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060160160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b9565b6004600981111561298957fe5b84600981111561299557fe5b1415612b8c576129ae6000601401600060130185613fa8565b15612ada576000601201839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060140160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a6e600060120184614178565b612ad9576000601201839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060130160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060130160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b8565b60056009811115612b9957fe5b846009811115612ba557fe5b1415612d3657612bbe6000601101600060100185613fa8565b15612c845760008060110160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c186000600f0184614178565b612c83576000600f01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060100160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060100160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b7565b60066009811115612d4357fe5b846009811115612d4f57fe5b1415612ee057612d686000601a01600060190185613fa8565b15612e2e57600080601a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612dc2600060180184614178565b612e2d576000601801839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060190160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060190160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b6565b60076009811115612eed57fe5b846009811115612ef957fe5b141561308a57612f126000601d016000601c0185613fa8565b15612fd857600080601d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f6c6000601b0184614178565b612fd7576000601b01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000601c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050806000601c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b5565b6008600981111561309757fe5b8460098111156130a357fe5b1415613234576130bc6000602101600060200185613fa8565b156131825760008060210160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506131166000601f0184614178565b613181576000601f01839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b600060200160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600060200160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506132b4565b60098081111561324057fe5b84600981111561324c57fe5b14156132a9576000806004018190555082600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506132b3565b6000915050613325565b5b5b5b5b5b5b5b5b5b8360098111156132c857fe5b7f0dcacb7e392f3d6a216ed2660e3dcfd40b7793d33591db2ba185a6b8e44fc4778483604051808373ffffffffffffffffffffffffffffffffffffffff16815260200182151581526020019250505060405180910390a260019150505b92915050565b6000601c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166133ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f7420617070726f7665640000000000000000000081525060200191505060405180910390fd5b600060070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166134af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f54726561737572793a204e6f742061636365707465640000000000000000000081525060200191505060405180910390fd5b6134dc3330848473ffffffffffffffffffffffffffffffffffffffff16613dd8909392919063ffffffff16565b60006134e88284611f74565b905061353f816000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613c2190919063ffffffff16565b6000601e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061359d81600060060154613c2190919063ffffffff16565b6000600601819055506135be81600060050154613d4690919063ffffffff16565b6000600501819055506000600501547f93bb8edd35984706eee1b92541281f7f62d33c01c5b2ec0929a113603bd21d6660405160405180910390a28173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f3098584604051808381526020018281526020019250505060405180910390a3505050565b6000613675613dce565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156136af57600080fd5b600060098111156136bc57fe5b8360098111156136c857fe5b1415613731576136e660006001015443613d4690919063ffffffff16565b6000600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bbd565b6001600981111561373e57fe5b83600981111561374a57fe5b14156137b35761376860006001015443613d4690919063ffffffff16565b6000600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bbc565b600260098111156137c057fe5b8360098111156137cc57fe5b1415613835576137ea60006001015443613d4690919063ffffffff16565b600060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bbb565b6003600981111561384257fe5b83600981111561384e57fe5b14156138ca5761387f6138706002600060010154613e9990919063ffffffff16565b43613d4690919063ffffffff16565b600060170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bba565b600460098111156138d757fe5b8360098111156138e357fe5b141561394c5761390160006001015443613d4690919063ffffffff16565b600060140160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bb9565b6005600981111561395957fe5b83600981111561396557fe5b14156139ce5761398360006001015443613d4690919063ffffffff16565b600060110160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bb8565b600660098111156139db57fe5b8360098111156139e757fe5b1415613a6357613a18613a096002600060010154613e9990919063ffffffff16565b43613d4690919063ffffffff16565b6000601a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bb7565b60076009811115613a7057fe5b836009811115613a7c57fe5b1415613ae557613a9a60006001015443613d4690919063ffffffff16565b6000601d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bb6565b60086009811115613af257fe5b836009811115613afe57fe5b1415613b6757613b1c60006001015443613d4690919063ffffffff16565b600060210160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613bb5565b600980811115613b7357fe5b836009811115613b7f57fe5b1415613bab57613b9d60006001015443613d4690919063ffffffff16565b600060040181905550613bb4565b60009050613c1b565b5b5b5b5b5b5b5b5b5b826009811115613bc957fe5b7f0e4f2c4b5bc209d509bc3d49348c787fefadc66a79351b470599ac0f5be52eaf83604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2600190505b92915050565b600082821115613c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b613d418363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614219565b505050565b600080828401905083811015613dc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b613dd6614308565b565b613e93846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614219565b50505050565b600080831415613eac5760009050613f19565b6000828402905082848281613ebd57fe5b0414613f14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061472e6021913960400191505060405180910390fd5b809150505b92915050565b6000808211613f96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b818381613f9f57fe5b04905092915050565b60008260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661416c5760008460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156140af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4d7573742071756575650000000000000000000000000000000000000000000081525060200191505060405180910390fd5b438460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115614163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5175657565206e6f74206578706972656400000000000000000000000000000081525060200191505060405180910390fd5b60019050614171565b600090505b9392505050565b600080600090505b838054905081101561420d578273ffffffffffffffffffffffffffffffffffffffff168482815481106141af57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614200576001915050614213565b8080600101915050614180565b50600090505b92915050565b606061427b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166143a39092919063ffffffff16565b90506000815111156143035780806020019051602081101561429c57600080fd5b8101908080519060200190929190505050614302576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061474f602a913960400191505060405180910390fd5b5b505050565b6143106143bb565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146143a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614398906146d6565b60405180910390fd5b565b60606143b284846000856143e8565b90509392505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b606082471015614443576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806147086026913960400191505060405180910390fd5b61444c85614591565b6144be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061450e57805182526020820191506020810190506020830392506144eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614570576040519150601f19603f3d011682016040523d82523d6000602084013e614575565b606091505b50915091506145858282866145a4565b92505050949350505050565b600080823b905060008111915050919050565b606083156145b457829050614669565b6000835111156145c75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561462e578082015181840152602081019050614613565b50505050905090810190601f16801561465b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b600061467d6022836146f6565b91507f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905081810360008301526146ef81614670565b9050919050565b60008282526020820190509291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e7bac2ddb249ef43f5f53494e967a7af572568c05141e83c6b1c549ff9a5d54264736f6c63430007050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint",
          "_profit": "uint",
          "_token": "address"
        },
        "returns": {
          "send_": "uint"
        }
      },
      "excessReserves()": {
        "returns": {
          "_0": "uint"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "queue(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "repayDebtWithNecc(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      },
      "toggle(uint8,address)": {
        "params": {
          "_address": "address",
          "_managing": "MANAGING"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "valueOfToken(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        },
        "returns": {
          "_value": "uint"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for Necc"
      },
      "excessReserves()": {
        "notice": "returns excess reserves not backing tokens"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mintRewards(address,uint256)": {
        "notice": "send epoch reward to staking contract"
      },
      "queue(uint8,address)": {
        "notice": "queue address to change boolean in mapping"
      },
      "repayDebtWithNecc(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with Necc"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "toggle(uint8,address)": {
        "notice": "verify queue then set boolean in mapping"
      },
      "valueOfToken(address,uint256)": {
        "notice": "returns Necc valuation of asset"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn Necc for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9741,
        "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)18069_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Storage)18069_storage": {
        "encoding": "inplace",
        "label": "struct LibTreasuryStorage.Storage",
        "members": [
          {
            "astId": 17955,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17957,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "blocksNeededForQueue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17960,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 17962,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 17964,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "nNeccQueue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17966,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalReserves",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 17968,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 17972,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveToken",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 17976,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveTokenQueue",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 17979,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositors",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 17983,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveDepositor",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 17987,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveDepositorQueue",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 17990,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenders",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 17994,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveSpender",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 17998,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveSpenderQueue",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18001,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityTokens",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18005,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityToken",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18009,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityTokenQueue",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18012,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityDepositors",
            "offset": 0,
            "slot": "18",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18016,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityDepositor",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18020,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityDepositorQueue",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18023,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "reserveManagers",
            "offset": 0,
            "slot": "21",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18027,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isReserveManager",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18031,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "ReserveManagerQueue",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18034,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "liquidityManagers",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18038,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isLiquidityManager",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18042,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "LiquidityManagerQueue",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18045,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtors",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18049,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isDebtor",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18053,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtorQueue",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18057,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "debtorBalance",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18060,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagers",
            "offset": 0,
            "slot": "31",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18064,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "isRewardManager",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18068,
            "contract": "contracts/facets/Treasury/TreasuryFacet.sol:TreasuryFacet",
            "label": "rewardManagerQueue",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "1088"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}