{
  "address": "0x3cdf61eE1C4A319000C3bE95180e0aE9990B4D73",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "BCV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "BCV_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vesting",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Bond",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "controlVariable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTerm",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLiquidityBond",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Terms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa05302092e8900b5c6b3aa88b47f4e6ca82c864861fc811a7e6f14ce181ce4bc",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x3cdf61eE1C4A319000C3bE95180e0aE9990B4D73",
    "transactionIndex": 31,
    "gasUsed": "3728243",
    "logsBloom": "0x
    "blockHash": "0xf95028e9bde1fcd7a861390671be149a3dad10b2d1c79dc05586c7e4a754b72b",
    "transactionHash": "0xa05302092e8900b5c6b3aa88b47f4e6ca82c864861fc811a7e6f14ce181ce4bc",
    "logs": [],
    "blockNumber": 9551005,
    "cumulativeGasUsed": "11457475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5f66fcf5d2ff50cfff03fe1f16a8e50d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"BCV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BCV_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Bond\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityBond\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Terms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice(address)\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD(address)\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt(address)\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay(address)\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio(address)\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"maxPayout(address)\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256,address)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address,address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"redeem(address,address,bool)\":{\"params\":{\"_recipient\":\"address\",\"_stake\":\"bool\"},\"returns\":{\"_0\":\"uint\"}},\"standardizedDebtRatio(address)\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetPrice(address)\":{\"notice\":\"get asset price from chainlink\"},\"bondPrice(address)\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD(address)\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt(address)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(address)\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio(address)\":{\"notice\":\"calculate current ratio of debt to Necc supply\"},\"deposit(uint256,uint256,address,address)\":{\"notice\":\"deposit bond\"},\"maxPayout(address)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256,address)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address,address)\":{\"notice\":\"calculate amount of Necc available for claim by depositor\"},\"percentVestedFor(address,address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address,address,bool)\":{\"notice\":\"redeem bond for user\"},\"standardizedDebtRatio(address)\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/BondDepositoryFacet.sol\":\"BondDepositoryFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/drafts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) internal {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _getChainId();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        if (_getChainId() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1dd6456f505926d94adcb04fb920c3e20c469ad1c0c0f7d582f70f773f99ad39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/drafts/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping (address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) internal EIP712(name, \\\"1\\\") {\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                _nonces[owner].current(),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xaa17940e5c3654c6eb39b11f6667af8ad94594e9c3424a0c8bf4bb2ae452a36c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/facets/Bond/BondDepositoryFacet.sol\":{\"content\":\"pragma abicoder v2;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/drafts/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../lib/FixedPoint.sol\\\";\\nimport \\\"../../lib/FullMath.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./BondDepositoryLib.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\n// Chainlink price feed\\ninterface IOracle {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface ITreasury {\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256 send_);\\n\\n    function valueOfToken(address _token, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 value_);\\n}\\n\\ninterface IBondCalculator {\\n    function valuation(address _LP, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function markdown(address _LP) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n}\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BondDepositoryFacet is Facet {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using BondDepositoryLib for LibBondStorage.Storage;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated(\\n        uint256 deposit,\\n        uint256 indexed payout,\\n        uint256 indexed expires,\\n        uint256 indexed priceInUSD\\n    );\\n    event BondRedeemed(\\n        address indexed recipient,\\n        uint256 payout,\\n        uint256 remaining\\n    );\\n    event BondPriceChanged(\\n        uint256 indexed priceInUSD,\\n        uint256 indexed internalPrice,\\n        uint256 indexed debtRatio\\n    );\\n    event ControlVariableAdjustment(\\n        uint256 initialBCV,\\n        uint256 newBCV,\\n        uint256 adjustment,\\n        bool addition\\n    );\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor,\\n        address _principle\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        decayDebt(_principle);\\n        require(\\n            s.totalDebt[_principleIndex] <= s.terms[_principleIndex].maxDebt,\\n            \\\"Max capacity reached\\\"\\n        );\\n\\n        uint256 priceInUSD = bondPriceInUSD(_principle); // Stored in bond info\\n        uint256 nativePrice = _bondPrice(_principle);\\n\\n        require(\\n            _maxPrice >= nativePrice,\\n            \\\"Slippage limit: more than max price\\\"\\n        ); // slippage protection\\n\\n        uint256 value = ITreasury(s.treasury).valueOfToken(_principle, _amount);\\n        uint256 payout = payoutFor(value, _principle); // payout to bonder is computed\\n        require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 Necc ( underflow protection )\\n        require(payout <= maxPayout(_principle), \\\"Bond too large\\\"); // size protection because there is no slippage\\n        // profits are calculated\\n        uint256 fee = payout.mul(s.terms[_principleIndex].fee).div(10000);\\n        uint256 profit = value.sub(payout);\\n        if (profit > 0) {\\n            profit = profit.sub(fee);\\n            /**\\n            principle is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) Necc\\n         */\\n            if (s.terms[_principleIndex].isLiquidityBond) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else if (_principle == s.nusd) {\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amount\\n                );\\n                IERC20(_principle).approve(address(s.treasury), _amount);\\n                ITreasury(s.treasury).deposit(_amount, _principle, profit);\\n            } else {\\n                /**\\n            asset carries risk and is not minted against\\n            asset transfered to treasury and rewards minted as payout\\n         */\\n                IERC20(_principle).safeTransferFrom(\\n                    msg.sender,\\n                    s.treasury,\\n                    _amount\\n                );\\n                ITreasury(s.treasury).mintRewards(address(this), profit);\\n            }\\n\\n            if (fee != 0) {\\n                // fee is transferred to dao\\n                if (s.DAO != address(0)) {\\n                    IERC20(s.Necc).safeTransfer(s.DAO, fee);\\n                }\\n                if (s.farmDistributor != address(0)) {\\n                    IERC20(s.Necc).safeTransfer(\\n                        s.farmDistributor,\\n                        payout.mul(100).div(10000) // 1% farm distributor fee for minters\\n                    );\\n                }\\n            }\\n        }\\n\\n        // total debt is increased\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].add(value);\\n\\n        // depositor info is stored\\n        s.bondInfo[_depositor][_principleIndex] = LibBondStorage.Bond({\\n            payout: s.bondInfo[_depositor][_principleIndex].payout.add(payout),\\n            vesting: s.terms[_principleIndex].vestingTerm,\\n            lastTime: uint256(block.timestamp),\\n            pricePaid: priceInUSD\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated(\\n            _amount,\\n            payout,\\n            block.timestamp.add(s.terms[_principleIndex].vestingTerm),\\n            priceInUSD\\n        );\\n        emit BondPriceChanged(\\n            bondPriceInUSD(_principle),\\n            _bondPrice(_principle),\\n            debtRatio(_principle)\\n        );\\n\\n        adjust(_principle); // control variable is adjusted\\n        return payout;\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @param _recipient address\\n     *  @param _stake bool\\n     *  @return uint\\n     */\\n    function redeem(\\n        address _recipient,\\n        address _principle,\\n        bool _stake\\n    ) external returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory info = s.bondInfo[_recipient][\\n            _principleIndex\\n        ];\\n        // (seconds since last interaction / vesting term remaining)\\n        uint256 percentVested = percentVestedFor(_recipient, _principle);\\n\\n        if (percentVested >= 10000) {\\n            // if fully vested\\n            delete s.bondInfo[_recipient][_principleIndex]; // delete user info\\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\n            return stakeOrSend(_recipient, _stake, info.payout, _principle); // pay user everything due\\n        } else {\\n            // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n            // store updated deposit info\\n            s.bondInfo[_recipient][_principleIndex] = LibBondStorage.Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(\\n                    uint256(block.timestamp).sub(info.lastTime)\\n                ),\\n                lastTime: uint256(block.timestamp),\\n                pricePaid: info.pricePaid\\n            });\\n\\n            emit BondRedeemed(\\n                _recipient,\\n                payout,\\n                s.bondInfo[_recipient][_principleIndex].payout\\n            );\\n            return stakeOrSend(_recipient, _stake, payout, _principle);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        s.totalDebt[_principleIndex] = s.totalDebt[_principleIndex].sub(\\n            debtDecay(_principle)\\n        );\\n        s.lastDecay[_principleIndex] = uint256(block.timestamp);\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return\\n            IERC20(s.Necc)\\n                .totalSupply()\\n                .mul(s.terms[_principleIndex].maxPayout)\\n                .div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value, address _principle)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else if (_principle == s.nusd) {\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e16);\\n        } else {\\n            // Reserve token like WETH\\n            return\\n                FixedPoint\\n                    .fraction(_value, bondPrice(_principle))\\n                    .decode112with18()\\n                    .div(1e14);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.nusd) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .div(1e5);\\n        }\\n\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice(address _principle) internal returns (uint256 price_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else if (_principle == s.nusd) {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .add(1000000000)\\n                .div(1e7);\\n        } else {\\n            price_ = s\\n                .terms[_principleIndex]\\n                .controlVariable\\n                .mul(debtRatio(_principle))\\n                .div(1e5);\\n        }\\n\\n        if (price_ < s.terms[_principleIndex].minimumPrice) {\\n            price_ = s.terms[_principleIndex].minimumPrice;\\n        } else if (s.terms[_principleIndex].minimumPrice != 0) {\\n            s.terms[_principleIndex].minimumPrice = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice converts bond price to DAI value\\n     *  @return price_ uint\\n     */\\n    function bondPriceInUSD(address _principle)\\n        public\\n        view\\n        returns (uint256 price_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            price_ = bondPrice(_principle)\\n                .mul(IBondCalculator(address(this)).markdown(_principle))\\n                .div(100);\\n        } else {\\n            if (_principle == s.nusd) {\\n                price_ = bondPrice(_principle)\\n                    .mul(10**IERC20Decimals(_principle).decimals())\\n                    .div(100);\\n            } else {\\n                price_ = bondPrice(_principle)\\n                    .mul(uint256(assetPrice(_principle)))\\n                    .mul(1e6);\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to Necc supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio(address _principle)\\n        public\\n        view\\n        returns (uint256 debtRatio_)\\n    {\\n        uint256 supply = IERC20(s.Necc).totalSupply();\\n        debtRatio_ = FixedPoint\\n            .fraction(currentDebt(_principle).mul(1e9), supply)\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\n     *  @return uint\\n     */\\n    function standardizedDebtRatio(address _principle)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        if (s.terms[_principleIndex].isLiquidityBond) {\\n            return\\n                debtRatio(_principle)\\n                    .mul(IBondCalculator(address(this)).markdown(_principle))\\n                    .div(1e9);\\n        } else {\\n            if (_principle == s.nusd) {\\n                return debtRatio(_principle);\\n            } else {\\n                return\\n                    debtRatio(_principle)\\n                        .mul(uint256(assetPrice(_principle)))\\n                        .div(IOracle(s.priceFeeds[_principleIndex]).decimals());\\n                // ETH Feed is 8 decimals\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt(address _principle) public view returns (uint256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.totalDebt[_principleIndex].sub(debtDecay(_principle));\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay(address _principle)\\n        public\\n        view\\n        returns (uint256 decay_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 timeSinceLast = uint256(block.timestamp).sub(\\n            s.lastDecay[_principleIndex]\\n        );\\n        decay_ = s.totalDebt[_principleIndex].mul(timeSinceLast).div(\\n            s.terms[_principleIndex].vestingTerm\\n        );\\n        if (decay_ > s.totalDebt[_principleIndex]) {\\n            decay_ = s.totalDebt[_principleIndex];\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor, address _principle)\\n        public\\n        view\\n        returns (uint256 percentVested_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.Bond memory bond = s.bondInfo[_depositor][\\n            _principleIndex\\n        ];\\n        uint256 secondsSinceLast = uint256(block.timestamp).sub(bond.lastTime);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of Necc available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor, address _principle)\\n        external\\n        view\\n        returns (uint256 pendingPayout_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        uint256 percentVested = percentVestedFor(_depositor, _principle);\\n        uint256 payout = s.bondInfo[_depositor][_principleIndex].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice allow user to stake payout automatically\\n     *  @param _stake bool\\n     *  @param _amount uint\\n     *  @return uint\\n     */\\n    function stakeOrSend(\\n        address _recipient,\\n        bool _stake,\\n        uint256 _amount,\\n        address\\n    ) internal returns (uint256) {\\n        if (!_stake) {\\n            // if user does not want to stake\\n            IERC20(s.Necc).transfer(_recipient, _amount); // send payout\\n        } else {\\n            // if user wants to stake\\n            IERC20(s.Necc).approve(address(this), _amount);\\n            IStaking(address(this)).stake(_amount, _recipient);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust(address _principle) internal {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n        LibBondStorage.Terms storage _bondTerms = s.terms[_principleIndex];\\n\\n        if (adjustment.delta > 0 && adjustment.timeToTarget > 0) {\\n            uint256 initial = _bondTerms.controlVariable;\\n            uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n            uint256 change = changeBy(_principle);\\n\\n            if (adjustment.delta >= change) {\\n                adjustment.delta = adjustment.delta.sub(change);\\n            } else {\\n                adjustment.delta = 0;\\n            }\\n            if (adjustment.timeToTarget >= timeSinceLast) {\\n                adjustment.timeToTarget = adjustment.timeToTarget.sub(\\n                    timeSinceLast\\n                );\\n            } else {\\n                adjustment.timeToTarget = 0;\\n            }\\n\\n            if (adjustment.add) {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.add(\\n                    change\\n                );\\n            } else {\\n                _bondTerms.controlVariable = _bondTerms.controlVariable.sub(\\n                    change\\n                );\\n            }\\n\\n            adjustment.lastTime = block.timestamp;\\n\\n            emit ControlVariableAdjustment(\\n                initial,\\n                _bondTerms.controlVariable,\\n                change,\\n                adjustment.add\\n            );\\n        }\\n    }\\n\\n    function changeBy(address _principle)\\n        internal\\n        view\\n        returns (uint256 changeBy_)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment memory adjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 timeSinceLast = block.timestamp.sub(adjustment.lastTime);\\n\\n        changeBy_ = adjustment.delta.mul(timeSinceLast).div(\\n            adjustment.timeToTarget\\n        );\\n\\n        if (changeBy_ > adjustment.delta) {\\n            changeBy_ = adjustment.delta;\\n        }\\n    }\\n\\n    function bondInfo(address _depositor, address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Bond memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.bondInfo[_depositor][_principleIndex];\\n    }\\n\\n    function BCV(address _principle) public view returns (uint256 BCV_) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        LibBondStorage.BondDepositoryAdjustment storage _bondAdjustment = s\\n            .bondDepositoryAdjustment[_principleIndex];\\n\\n        uint256 change = changeBy(_principle);\\n\\n        if (_bondAdjustment.add) {\\n            BCV_ = s.terms[_principleIndex].controlVariable.add(change);\\n        } else {\\n            if (s.terms[_principleIndex].controlVariable > change) {\\n                BCV_ = s.terms[_principleIndex].controlVariable.sub(change);\\n            } else {\\n                BCV_ = 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice get asset price from chainlink\\n     */\\n    function assetPrice(address _principle) public view returns (int256) {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        (, int256 price, , , ) = IOracle(s.priceFeeds[_principleIndex])\\n            .latestRoundData();\\n\\n        return price;\\n    }\\n\\n    function terms(address _principle)\\n        public\\n        view\\n        returns (LibBondStorage.Terms memory)\\n    {\\n        uint256 _principleIndex = s.getIndexAt(_principle);\\n        return s.terms[_principleIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x05698c4edd025adba72dd3bf397076c49f058c102ee915cdd1cad2929da4337c\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/facets/Bond/BondDepositoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\n\\nlibrary BondDepositoryLib {\\n    function getIndexAt(LibBondStorage.Storage storage s, address _principle)\\n        internal\\n        view\\n        returns (uint256 _index)\\n    {\\n        uint256 _principleLength = EnumerableSet.length(s.principles);\\n        for (uint256 i = 0; i < _principleLength; i++) {\\n            if (EnumerableSet.at(s.principles, i) == _principle) {\\n                return i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff14389fdb12eb46b10686a709d1cb2e7159d8049982caa17e4dc4408da9884e\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0xbc8aae96a7bf7c5a13807bd917e15e9ee9e88e64b68525ce0a309ae56fb45937\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 =\\n        0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self)\\n        internal\\n        pure\\n        returns (uq112x112 memory)\\n    {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return\\n            uq112x112(\\n                uint224(\\n                    Babylonian.sqrt(uint256(self._x) << safeShiftBits) <<\\n                        ((112 - safeShiftBits) / 2)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0b55fc358a307ba77931360652f214bc05b0f862e939f09e3d0dc9f41da04409\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256 l, uint256 h)\\n    {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xf3e0f1d2b4ec0626a52fd41c5bfdad04e7d13009fe7712d8aa73b3ec38540b66\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address nNecc; // token given for staking\\n        address nusd; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NUSD\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 totalBonus;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xae31412d9ff16d59ccef4eaf14a1c457aafa7474fd287bb033395f62ddf9566e\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506142aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063aa58834511610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063aa58834514610285578063ad5fe5eb146102b5578063b11512e2146102e5578063b883b0581461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f2146102255780638b429ae81461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a9190613a61565b610405565b60405161012c9190613f87565b60405180910390f35b61014f600480360381019061014a919061395b565b610555565b60405161015c9190613f87565b60405180910390f35b61017f600480360381019061017a919061395b565b6107b9565b60405161018c9190613f87565b60405180910390f35b6101af60048036038101906101aa9190613984565b6108b2565b6040516101bc9190613f87565b60405180910390f35b6101df60048036038101906101da9190613984565b610977565b6040516101ec9190613f87565b60405180910390f35b61020f600480360381019061020a9190613a9d565b610a8a565b60405161021c9190613f87565b60405180910390f35b61023f600480360381019061023a919061395b565b61164c565b60405161024c9190613f87565b60405180910390f35b61026f600480360381019061026a91906139c0565b61169e565b60405161027c9190613f87565b60405180910390f35b61029f600480360381019061029a919061395b565b611a17565b6040516102ac9190613f87565b60405180910390f35b6102cf60048036038101906102ca9190613984565b611b02565b6040516102dc9190613f51565b60405180910390f35b6102ff60048036038101906102fa919061395b565b611bb1565b60405161030c9190613f87565b60405180910390f35b61032f600480360381019061032a919061395b565b611dac565b60405161033c9190613e96565b60405180910390f35b61035f600480360381019061035a919061395b565b611e8a565b60405161036c9190613f6c565b60405180910390f35b61038f600480360381019061038a919061395b565b611f2a565b60405161039c9190613f87565b60405180910390f35b6103bf60048036038101906103ba919061395b565b61217f565b6040516103cc9190613f87565b60405180910390f35b6103ef60048036038101906103ea919061395b565b61225a565b6040516103fc9190613f87565b60405180910390f35b60008061041c83600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a8761046588611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b91505061054f565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f988611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b91505061054f565b61054b655af3107a400061053d6105388761053388611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b9150505b92915050565b60008061056c83600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff161561065b57610653633b9aca006106453073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105de9190613e52565b60206040518083038186803b1580156105f657600080fd5b505afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190613a38565b610637876107b9565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150506107b4565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c5576106bd836107b9565b9150506107b4565b6107b06000600f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613b77565b60ff166107a261078b86611dac565b610794876107b9565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150505b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190613a38565b90506108aa670de0b6b3a764000061089c610897610891633b9aca006108838961164c565b61277f90919063ffffffff16565b856123d9565b6126ba565b6126f690919063ffffffff16565b915050919050565b6000806108c983600061235d90919063ffffffff16565b905060006108d78585610977565b9050600080600b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000154905061271082106109445780935061096e565b61096b61271061095d848461277f90919063ffffffff16565b6126f690919063ffffffff16565b93505b50505092915050565b60008061098e83600061235d90919063ffffffff16565b90506109986137f1565b6000600b0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000610a3982604001514261280590919063ffffffff16565b90506000826060015190506000811115610a7b57610a7481610a666127108561277f90919063ffffffff16565b6126f690919063ffffffff16565b9450610a80565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290613eb1565b60405180910390fd5b6000610b1183600061235d90919063ffffffff16565b9050610b1c83612888565b60006009016000828152602001908152602001600020600401546000600c016000838152602001908152602001600020541115610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590613ed1565b60405180910390fd5b6000610b9984611f2a565b90506000610ba68561290a565b905080871015610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290613f11565b60405180910390fd5b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610c4c929190613e6d565b60206040518083038186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c9190613a38565b90506000610caa8288610405565b905062989680811015610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990613ef1565b60405180910390fd5b610cfb8761225a565b811115610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613f31565b60405180910390fd5b6000610d7f612710610d71600060090160008a8152602001908152602001600020600301548561277f90919063ffffffff16565b6126f690919063ffffffff16565b90506000610d96838561280590919063ffffffff16565b9050600081111561142257610db4828261280590919063ffffffff16565b90506000600901600088815260200190815260200160002060060160009054906101000a900460ff1615610f7c57610e0f33308e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610e6f929190613e6d565b602060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190613a0f565b50600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610f2493929190613fcb565b602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190613a38565b50611255565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561116f5761100233308e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401611062929190613e6d565b602060405180830381600087803b15801561107c57600080fd5b505af1158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190613a0f565b50600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b815260040161111793929190613fcb565b602060405180830381600087803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190613a38565b50611254565b6111c133600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de9230836040518363ffffffff1660e01b8152600401611221929190613e6d565b600060405180830381600087803b15801561123b57600080fd5b505af115801561124f573d6000803e3d6000fd5b505050505b5b6000821461142157600073ffffffffffffffffffffffffffffffffffffffff16600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461132b5761132a600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612c0a9092919063ffffffff16565b5b600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114205761141f600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113d56127106113c760648861277f90919063ffffffff16565b6126f690919063ffffffff16565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612c0a9092919063ffffffff16565b5b5b5b61144b846000600c0160008a815260200190815260200160002054612cac90919063ffffffff16565b6000600c0160008981526020019081526020016000208190555060405180608001604052806114d9856000600b0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000154612cac90919063ffffffff16565b8152602001878152602001428152602001600060090160008a8152602001908152602001600020600501548152506000600b0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856115b2600060090160008a81526020019081526020016000206005015442612cac90919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f6040516115e29190613f87565b60405180910390a46115f3896107b9565b6115fc8a61290a565b6116058b611f2a565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a461163a89612d34565b82975050505050505050949350505050565b60008061166383600061235d90919063ffffffff16565b90506116966116718461217f565b6000600c0160008481526020019081526020016000205461280590919063ffffffff16565b915050919050565b6000806116b584600061235d90919063ffffffff16565b90506116bf6137f1565b6000600b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060006117538787610977565b90506127108110611843576000600b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b183600001516000604051611821929190614002565b60405180910390a26118398786846000015189612f00565b9350505050611a10565b600061187061271061186284866000015161277f90919063ffffffff16565b6126f690919063ffffffff16565b9050604051806080016040528061189483866000015161280590919063ffffffff16565b8152602001846020015181526020014281526020016118d66118c386604001514261280590919063ffffffff16565b866060015161280590919063ffffffff16565b8152506000600b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508773ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600b0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600001546040516119f592919061402b565b60405180910390a2611a098887838a612f00565b9450505050505b9392505050565b600080611a2e83600061235d90919063ffffffff16565b9050600080600a01600083815260200190815260200160002090506000611a548561310a565b90508160000160009054906101000a900460ff1615611aa057611a99816000600901600086815260200190815260200160002060000154612cac90919063ffffffff16565b9350611afa565b8060006009016000858152602001908152602001600020600001541115611af457611aed81600060090160008681526020019081526020016000206000015461280590919063ffffffff16565b9350611af9565b600193505b5b505050919050565b611b0a6137f1565b6000611b2083600061235d90919063ffffffff16565b90506000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b600080611bc883600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff1615611c5c57611c5562989680611c47633b9aca00611c39611c11886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150611d68565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d1b57611d1462989680611d06633b9aca00611cf8611cd0886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150611d67565b611d64620186a0611d56611d2e866107b9565b600060090160008681526020019081526020016000206000015461277f90919063ffffffff16565b6126f690919063ffffffff16565b91505b5b6000600901600082815260200190815260200160002060010154821015611da657600060090160008281526020019081526020016000206001015491505b50919050565b600080611dc383600061235d90919063ffffffff16565b9050600080600f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613b00565b5050509150508092505050919050565b611e92613819565b6000611ea883600061235d90919063ffffffff16565b9050600060090160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611f4183600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff161561202c5761202560646120173073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611fb09190613e52565b60206040518083038186803b158015611fc857600080fd5b505afa158015611fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120009190613a38565b61200987611bb1565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150612179565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561213d5761213660646121288573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d357600080fd5b505afa1580156120e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210b9190613b77565b60ff16600a0a61211a87611bb1565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150612178565b612175620f424061216761215086611dac565b61215987611bb1565b61277f90919063ffffffff16565b61277f90919063ffffffff16565b91505b5b50919050565b60008061219683600061235d90919063ffffffff16565b905060006121c36000600d016000848152602001908152602001600020544261280590919063ffffffff16565b9050612219600060090160008481526020019081526020016000206005015461220b836000600c0160008781526020019081526020016000205461277f90919063ffffffff16565b6126f690919063ffffffff16565b92506000600c01600083815260200190815260200160002054831115612253576000600c0160008381526020019081526020016000205492505b5050919050565b60008061227183600061235d90919063ffffffff16565b9050612355620186a061234760006009016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230157600080fd5b505afa158015612315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123399190613a38565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b915050919050565b60008061236c846007016131ed565b905060005b818110156123d0578373ffffffffffffffffffffffffffffffffffffffff1661239d8660070183613202565b73ffffffffffffffffffffffffffffffffffffffff1614156123c35780925050506123d3565b8080600101915050612371565b50505b92915050565b6123e1613858565b6000821161243a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806142046026913960400191505060405180910390fd5b600083141561247857604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090506126b4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff71ffffffffffffffffffffffffffffffffffff1683116125b157600082607060ff1685901b816124c557fe5b0490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681111561257c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150506126b4565b60006125cd846e0100000000000000000000000000008561321c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16811115612683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16816126ee57fe5b049050919050565b600080821161276d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161277657fe5b04905092915050565b60008083141561279257600090506127ff565b60008284029050828482816127a357fe5b04146127fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061422a6021913960400191505060405180910390fd5b809150505b92915050565b60008282111561287d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600061289e82600061235d90919063ffffffff16565b90506128d16128ac8361217f565b6000600c0160008481526020019081526020016000205461280590919063ffffffff16565b6000600c01600083815260200190815260200160002081905550426000600d016000838152602001908152602001600020819055505050565b60008061292183600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff16156129b5576129ae629896806129a0633b9aca0061299261296a886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150612ac1565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a7457612a6d62989680612a5f633b9aca00612a51612a29886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150612ac0565b612abd620186a0612aaf612a87866107b9565b600060090160008681526020019081526020016000206000015461277f90919063ffffffff16565b6126f690919063ffffffff16565b91505b5b6000600901600082815260200190815260200160002060010154821015612b035760006009016000828152602001908152602001600020600101549150612b43565b60008060090160008381526020019081526020016000206001015414612b42576000806009016000838152602001908152602001600020600101819055505b5b50919050565b612c04846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132de565b50505050565b612ca78363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132de565b505050565b600080828401905083811015612d2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000612d4a82600061235d90919063ffffffff16565b9050600080600a01600083815260200190815260200160002090506000806009016000848152602001908152602001600020905060008260010154118015612d96575060008260020154115b15612efa576000816000015490506000612dbd84600301544261280590919063ffffffff16565b90506000612dca8761310a565b905080856001015410612dfb57612dee81866001015461280590919063ffffffff16565b8560010181905550612e06565b600085600101819055505b81856002015410612e3557612e2882866002015461280590919063ffffffff16565b8560020181905550612e40565b600085600201819055505b8460000160009054906101000a900460ff1615612e7b57612e6e818560000154612cac90919063ffffffff16565b8460000181905550612e9b565b612e9281856000015461280590919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff16604051612eee9493929190614054565b60405180910390a15050505b50505050565b600083612fbe576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b8152600401612f66929190613e6d565b602060405180830381600087803b158015612f8057600080fd5b505af1158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb89190613a0f565b506130ff565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330856040518363ffffffff1660e01b815260040161301d929190613e6d565b602060405180830381600087803b15801561303757600080fd5b505af115801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f9190613a0f565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775784876040518363ffffffff1660e01b81526004016130ab929190613fa2565b602060405180830381600087803b1580156130c557600080fd5b505af11580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190613a0f565b505b829050949350505050565b60008061312183600061235d90919063ffffffff16565b905061312b613889565b6000600a0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481525050905060006131a082606001514261280590919063ffffffff16565b90506131cf82604001516131c183856020015161277f90919063ffffffff16565b6126f690919063ffffffff16565b935081602001518411156131e557816020015193505b505050919050565b60006131fb826000016133cd565b9050919050565b600061321183600001836133de565b60001c905092915050565b600080600061322b8686613461565b915091506000848061323957fe5b86880990508281111561324d576001820391505b80830392508482106132c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f7700000000000081525060200191505060405180910390fd5b6132d28383876134b4565b93505050509392505050565b6060613340826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135519092919063ffffffff16565b90506000815111156133c85780806020019051602081101561336157600080fd5b81019080805190602001909291905050506133c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061424b602a913960400191505060405180910390fd5b5b505050565b600081600001805490509050919050565b60008183600001805490501161343f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806141bc6022913960400191505060405180910390fd5b82600001828154811061344e57fe5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8061348e57fe5b848609905083850292508281039150828110156134ac576001820391505b509250929050565b60008082600003831690508083816134c857fe5b0492508085816134d457fe5b04945060018182600003816134e557fe5b04018402850194506000600190508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808602925050509392505050565b60606135608484600085613569565b90509392505050565b6060824710156135c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806141de6026913960400191505060405180910390fd5b6135cd85613712565b61363f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061368f578051825260208201915060208101905060208303925061366c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146136f1576040519150601f19603f3d011682016040523d82523d6000602084013e6136f6565b606091505b5091509150613706828286613725565b92505050949350505050565b600080823b905060008111915050919050565b60608315613735578290506137ea565b6000835111156137485782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137af578082015181840152602081019050613794565b50505050905090810190601f1680156137dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b6000813590506138c281614131565b92915050565b6000813590506138d781614148565b92915050565b6000815190506138ec81614148565b92915050565b6000815190506139018161415f565b92915050565b60008135905061391681614176565b92915050565b60008151905061392b81614176565b92915050565b600081519050613940816141a4565b92915050565b6000815190506139558161418d565b92915050565b60006020828403121561396d57600080fd5b600061397b848285016138b3565b91505092915050565b6000806040838503121561399757600080fd5b60006139a5858286016138b3565b92505060206139b6858286016138b3565b9150509250929050565b6000806000606084860312156139d557600080fd5b60006139e3868287016138b3565b93505060206139f4868287016138b3565b9250506040613a05868287016138c8565b9150509250925092565b600060208284031215613a2157600080fd5b6000613a2f848285016138dd565b91505092915050565b600060208284031215613a4a57600080fd5b6000613a588482850161391c565b91505092915050565b60008060408385031215613a7457600080fd5b6000613a8285828601613907565b9250506020613a93858286016138b3565b9150509250929050565b60008060008060808587031215613ab357600080fd5b6000613ac187828801613907565b9450506020613ad287828801613907565b9350506040613ae3878288016138b3565b9250506060613af4878288016138b3565b91505092959194509250565b600080600080600060a08688031215613b1857600080fd5b6000613b2688828901613931565b9550506020613b37888289016138f2565b9450506040613b488882890161391c565b9350506060613b598882890161391c565b9250506080613b6a88828901613931565b9150509295509295909350565b600060208284031215613b8957600080fd5b6000613b9784828501613946565b91505092915050565b613ba9816140aa565b82525050565b613bb8816140bc565b82525050565b613bc7816140bc565b82525050565b613bd6816140c8565b82525050565b613be58161411f565b82525050565b6000613bf8600f83614099565b91507f496e76616c6964206164647265737300000000000000000000000000000000006000830152602082019050919050565b6000613c38601483614099565b91507f4d617820636170616369747920726561636865640000000000000000000000006000830152602082019050919050565b6000613c78600e83614099565b91507f426f6e6420746f6f20736d616c6c0000000000000000000000000000000000006000830152602082019050919050565b6000613cb8602383614099565b91507f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008301527f69636500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d1e600e83614099565b91507f426f6e6420746f6f206c617267650000000000000000000000000000000000006000830152602082019050919050565b608082016000820151613d676000850182613e34565b506020820151613d7a6020850182613e34565b506040820151613d8d6040850182613e34565b506060820151613da06060850182613e34565b50505050565b60e082016000820151613dbc6000850182613e34565b506020820151613dcf6020850182613e34565b506040820151613de26040850182613e34565b506060820151613df56060850182613e34565b506080820151613e086080850182613e34565b5060a0820151613e1b60a0850182613e34565b5060c0820151613e2e60c0850182613baf565b50505050565b613e3d816140f2565b82525050565b613e4c816140f2565b82525050565b6000602082019050613e676000830184613ba0565b92915050565b6000604082019050613e826000830185613ba0565b613e8f6020830184613e43565b9392505050565b6000602082019050613eab6000830184613bcd565b92915050565b60006020820190508181036000830152613eca81613beb565b9050919050565b60006020820190508181036000830152613eea81613c2b565b9050919050565b60006020820190508181036000830152613f0a81613c6b565b9050919050565b60006020820190508181036000830152613f2a81613cab565b9050919050565b60006020820190508181036000830152613f4a81613d11565b9050919050565b6000608082019050613f666000830184613d51565b92915050565b600060e082019050613f816000830184613da6565b92915050565b6000602082019050613f9c6000830184613e43565b92915050565b6000604082019050613fb76000830185613e43565b613fc46020830184613ba0565b9392505050565b6000606082019050613fe06000830186613e43565b613fed6020830185613ba0565b613ffa6040830184613e43565b949350505050565b60006040820190506140176000830185613e43565b6140246020830184613bdc565b9392505050565b60006040820190506140406000830185613e43565b61404d6020830184613e43565b9392505050565b60006080820190506140696000830187613e43565b6140766020830186613e43565b6140836040830185613e43565b6140906060830184613bbe565b95945050505050565b600082825260208201905092915050565b60006140b5826140d2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b600061412a826140f2565b9050919050565b61413a816140aa565b811461414557600080fd5b50565b614151816140bc565b811461415c57600080fd5b50565b614168816140c8565b811461417357600080fd5b50565b61417f816140f2565b811461418a57600080fd5b50565b614196816140fc565b81146141a157600080fd5b50565b6141ad81614109565b81146141b857600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f956729b5066bfe8a5b2f80ba41ce60538c2bca053652cd31dc7ccfa2428371f64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063aa58834511610097578063c8c819ac11610066578063c8c819ac14610345578063dc1d35a214610375578063de8d9708146103a5578063e300e98b146103d557610100565b8063aa58834514610285578063ad5fe5eb146102b5578063b11512e2146102e5578063b883b0581461031557610100565b80636fcb5622116100d35780636fcb5622146101c557806384715b11146101f5578063884719f2146102255780638b429ae81461025557610100565b80630523f1c3146101055780632ddc1465146101355780632f74f46114610165578063415d9f6514610195575b600080fd5b61011f600480360381019061011a9190613a61565b610405565b60405161012c9190613f87565b60405180910390f35b61014f600480360381019061014a919061395b565b610555565b60405161015c9190613f87565b60405180910390f35b61017f600480360381019061017a919061395b565b6107b9565b60405161018c9190613f87565b60405180910390f35b6101af60048036038101906101aa9190613984565b6108b2565b6040516101bc9190613f87565b60405180910390f35b6101df60048036038101906101da9190613984565b610977565b6040516101ec9190613f87565b60405180910390f35b61020f600480360381019061020a9190613a9d565b610a8a565b60405161021c9190613f87565b60405180910390f35b61023f600480360381019061023a919061395b565b61164c565b60405161024c9190613f87565b60405180910390f35b61026f600480360381019061026a91906139c0565b61169e565b60405161027c9190613f87565b60405180910390f35b61029f600480360381019061029a919061395b565b611a17565b6040516102ac9190613f87565b60405180910390f35b6102cf60048036038101906102ca9190613984565b611b02565b6040516102dc9190613f51565b60405180910390f35b6102ff60048036038101906102fa919061395b565b611bb1565b60405161030c9190613f87565b60405180910390f35b61032f600480360381019061032a919061395b565b611dac565b60405161033c9190613e96565b60405180910390f35b61035f600480360381019061035a919061395b565b611e8a565b60405161036c9190613f6c565b60405180910390f35b61038f600480360381019061038a919061395b565b611f2a565b60405161039c9190613f87565b60405180910390f35b6103bf60048036038101906103ba919061395b565b61217f565b6040516103cc9190613f87565b60405180910390f35b6103ef60048036038101906103ea919061395b565b61225a565b6040516103fc9190613f87565b60405180910390f35b60008061041c83600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff16156104855761047d662386f26fc1000061046f61046a8761046588611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b91505061054f565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561051957610511662386f26fc100006105036104fe876104f988611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b91505061054f565b61054b655af3107a400061053d6105388761053388611bb1565b6123d9565b6126ba565b6126f690919063ffffffff16565b9150505b92915050565b60008061056c83600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff161561065b57610653633b9aca006106453073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b81526004016105de9190613e52565b60206040518083038186803b1580156105f657600080fd5b505afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190613a38565b610637876107b9565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150506107b4565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c5576106bd836107b9565b9150506107b4565b6107b06000600f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613b77565b60ff166107a261078b86611dac565b610794876107b9565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150505b919050565b6000806000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190613a38565b90506108aa670de0b6b3a764000061089c610897610891633b9aca006108838961164c565b61277f90919063ffffffff16565b856123d9565b6126ba565b6126f690919063ffffffff16565b915050919050565b6000806108c983600061235d90919063ffffffff16565b905060006108d78585610977565b9050600080600b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000154905061271082106109445780935061096e565b61096b61271061095d848461277f90919063ffffffff16565b6126f690919063ffffffff16565b93505b50505092915050565b60008061098e83600061235d90919063ffffffff16565b90506109986137f1565b6000600b0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000610a3982604001514261280590919063ffffffff16565b90506000826060015190506000811115610a7b57610a7481610a666127108561277f90919063ffffffff16565b6126f690919063ffffffff16565b9450610a80565b600094505b5050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290613eb1565b60405180910390fd5b6000610b1183600061235d90919063ffffffff16565b9050610b1c83612888565b60006009016000828152602001908152602001600020600401546000600c016000838152602001908152602001600020541115610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590613ed1565b60405180910390fd5b6000610b9984611f2a565b90506000610ba68561290a565b905080871015610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290613f11565b60405180910390fd5b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1b317e5878b6040518363ffffffff1660e01b8152600401610c4c929190613e6d565b60206040518083038186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c9190613a38565b90506000610caa8288610405565b905062989680811015610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990613ef1565b60405180910390fd5b610cfb8761225a565b811115610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613f31565b60405180910390fd5b6000610d7f612710610d71600060090160008a8152602001908152602001600020600301548561277f90919063ffffffff16565b6126f690919063ffffffff16565b90506000610d96838561280590919063ffffffff16565b9050600081111561142257610db4828261280590919063ffffffff16565b90506000600901600088815260200190815260200160002060060160009054906101000a900460ff1615610f7c57610e0f33308e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401610e6f929190613e6d565b602060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec19190613a0f565b50600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b8152600401610f2493929190613fcb565b602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190613a38565b50611255565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561116f5761100233308e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e6040518363ffffffff1660e01b8152600401611062929190613e6d565b602060405180830381600087803b15801561107c57600080fd5b505af1158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b49190613a0f565b50600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc157ac18d8b846040518463ffffffff1660e01b815260040161111793929190613fcb565b602060405180830381600087803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190613a38565b50611254565b6111c133600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8c73ffffffffffffffffffffffffffffffffffffffff16612b49909392919063ffffffff16565b600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a20de9230836040518363ffffffff1660e01b8152600401611221929190613e6d565b600060405180830381600087803b15801561123b57600080fd5b505af115801561124f573d6000803e3d6000fd5b505050505b5b6000821461142157600073ffffffffffffffffffffffffffffffffffffffff16600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461132b5761132a600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612c0a9092919063ffffffff16565b5b600073ffffffffffffffffffffffffffffffffffffffff16600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114205761141f600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113d56127106113c760648861277f90919063ffffffff16565b6126f690919063ffffffff16565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612c0a9092919063ffffffff16565b5b5b5b61144b846000600c0160008a815260200190815260200160002054612cac90919063ffffffff16565b6000600c0160008981526020019081526020016000208190555060405180608001604052806114d9856000600b0160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000154612cac90919063ffffffff16565b8152602001878152602001428152602001600060090160008a8152602001908152602001600020600501548152506000600b0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050856115b2600060090160008a81526020019081526020016000206005015442612cac90919063ffffffff16565b847f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae58f6040516115e29190613f87565b60405180910390a46115f3896107b9565b6115fc8a61290a565b6116058b611f2a565b7f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a60405160405180910390a461163a89612d34565b82975050505050505050949350505050565b60008061166383600061235d90919063ffffffff16565b90506116966116718461217f565b6000600c0160008481526020019081526020016000205461280590919063ffffffff16565b915050919050565b6000806116b584600061235d90919063ffffffff16565b90506116bf6137f1565b6000600b0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905060006117538787610977565b90506127108110611843576000600b0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905550508673ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b183600001516000604051611821929190614002565b60405180910390a26118398786846000015189612f00565b9350505050611a10565b600061187061271061186284866000015161277f90919063ffffffff16565b6126f690919063ffffffff16565b9050604051806080016040528061189483866000015161280590919063ffffffff16565b8152602001846020015181526020014281526020016118d66118c386604001514261280590919063ffffffff16565b866060015161280590919063ffffffff16565b8152506000600b0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508773ffffffffffffffffffffffffffffffffffffffff167f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1826000600b0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020600001546040516119f592919061402b565b60405180910390a2611a098887838a612f00565b9450505050505b9392505050565b600080611a2e83600061235d90919063ffffffff16565b9050600080600a01600083815260200190815260200160002090506000611a548561310a565b90508160000160009054906101000a900460ff1615611aa057611a99816000600901600086815260200190815260200160002060000154612cac90919063ffffffff16565b9350611afa565b8060006009016000858152602001908152602001600020600001541115611af457611aed81600060090160008681526020019081526020016000206000015461280590919063ffffffff16565b9350611af9565b600193505b5b505050919050565b611b0a6137f1565b6000611b2083600061235d90919063ffffffff16565b90506000600b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505092915050565b600080611bc883600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff1615611c5c57611c5562989680611c47633b9aca00611c39611c11886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150611d68565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d1b57611d1462989680611d06633b9aca00611cf8611cd0886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150611d67565b611d64620186a0611d56611d2e866107b9565b600060090160008681526020019081526020016000206000015461277f90919063ffffffff16565b6126f690919063ffffffff16565b91505b5b6000600901600082815260200190815260200160002060010154821015611da657600060090160008281526020019081526020016000206001015491505b50919050565b600080611dc383600061235d90919063ffffffff16565b9050600080600f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613b00565b5050509150508092505050919050565b611e92613819565b6000611ea883600061235d90919063ffffffff16565b9050600060090160008281526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b600080611f4183600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff161561202c5761202560646120173073ffffffffffffffffffffffffffffffffffffffff166332da80a3876040518263ffffffff1660e01b8152600401611fb09190613e52565b60206040518083038186803b158015611fc857600080fd5b505afa158015611fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120009190613a38565b61200987611bb1565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150612179565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561213d5761213660646121288573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d357600080fd5b505afa1580156120e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210b9190613b77565b60ff16600a0a61211a87611bb1565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b9150612178565b612175620f424061216761215086611dac565b61215987611bb1565b61277f90919063ffffffff16565b61277f90919063ffffffff16565b91505b5b50919050565b60008061219683600061235d90919063ffffffff16565b905060006121c36000600d016000848152602001908152602001600020544261280590919063ffffffff16565b9050612219600060090160008481526020019081526020016000206005015461220b836000600c0160008781526020019081526020016000205461277f90919063ffffffff16565b6126f690919063ffffffff16565b92506000600c01600083815260200190815260200160002054831115612253576000600c0160008381526020019081526020016000205492505b5050919050565b60008061227183600061235d90919063ffffffff16565b9050612355620186a061234760006009016000858152602001908152602001600020600201546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230157600080fd5b505afa158015612315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123399190613a38565b61277f90919063ffffffff16565b6126f690919063ffffffff16565b915050919050565b60008061236c846007016131ed565b905060005b818110156123d0578373ffffffffffffffffffffffffffffffffffffffff1661239d8660070183613202565b73ffffffffffffffffffffffffffffffffffffffff1614156123c35780925050506123d3565b8080600101915050612371565b50505b92915050565b6123e1613858565b6000821161243a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806142046026913960400191505060405180910390fd5b600083141561247857604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090506126b4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff71ffffffffffffffffffffffffffffffffffff1683116125b157600082607060ff1685901b816124c557fe5b0490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681111561257c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150506126b4565b60006125cd846e0100000000000000000000000000008561321c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16811115612683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f77000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b60006612725dd1d243ab82600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16816126ee57fe5b049050919050565b600080821161276d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161277657fe5b04905092915050565b60008083141561279257600090506127ff565b60008284029050828482816127a357fe5b04146127fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061422a6021913960400191505060405180910390fd5b809150505b92915050565b60008282111561287d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600061289e82600061235d90919063ffffffff16565b90506128d16128ac8361217f565b6000600c0160008481526020019081526020016000205461280590919063ffffffff16565b6000600c01600083815260200190815260200160002081905550426000600d016000838152602001908152602001600020819055505050565b60008061292183600061235d90919063ffffffff16565b90506000600901600082815260200190815260200160002060060160009054906101000a900460ff16156129b5576129ae629896806129a0633b9aca0061299261296a886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150612ac1565b600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a7457612a6d62989680612a5f633b9aca00612a51612a29886107b9565b600060090160008881526020019081526020016000206000015461277f90919063ffffffff16565b612cac90919063ffffffff16565b6126f690919063ffffffff16565b9150612ac0565b612abd620186a0612aaf612a87866107b9565b600060090160008681526020019081526020016000206000015461277f90919063ffffffff16565b6126f690919063ffffffff16565b91505b5b6000600901600082815260200190815260200160002060010154821015612b035760006009016000828152602001908152602001600020600101549150612b43565b60008060090160008381526020019081526020016000206001015414612b42576000806009016000838152602001908152602001600020600101819055505b5b50919050565b612c04846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132de565b50505050565b612ca78363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506132de565b505050565b600080828401905083811015612d2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000612d4a82600061235d90919063ffffffff16565b9050600080600a01600083815260200190815260200160002090506000806009016000848152602001908152602001600020905060008260010154118015612d96575060008260020154115b15612efa576000816000015490506000612dbd84600301544261280590919063ffffffff16565b90506000612dca8761310a565b905080856001015410612dfb57612dee81866001015461280590919063ffffffff16565b8560010181905550612e06565b600085600101819055505b81856002015410612e3557612e2882866002015461280590919063ffffffff16565b8560020181905550612e40565b600085600201819055505b8460000160009054906101000a900460ff1615612e7b57612e6e818560000154612cac90919063ffffffff16565b8460000181905550612e9b565b612e9281856000015461280590919063ffffffff16565b84600001819055505b4285600301819055507fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a838560000154838860000160009054906101000a900460ff16604051612eee9493929190614054565b60405180910390a15050505b50505050565b600083612fbe576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b8152600401612f66929190613e6d565b602060405180830381600087803b158015612f8057600080fd5b505af1158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb89190613a0f565b506130ff565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330856040518363ffffffff1660e01b815260040161301d929190613e6d565b602060405180830381600087803b15801561303757600080fd5b505af115801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f9190613a0f565b503073ffffffffffffffffffffffffffffffffffffffff16637acb775784876040518363ffffffff1660e01b81526004016130ab929190613fa2565b602060405180830381600087803b1580156130c557600080fd5b505af11580156130d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fd9190613a0f565b505b829050949350505050565b60008061312183600061235d90919063ffffffff16565b905061312b613889565b6000600a0160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481525050905060006131a082606001514261280590919063ffffffff16565b90506131cf82604001516131c183856020015161277f90919063ffffffff16565b6126f690919063ffffffff16565b935081602001518411156131e557816020015193505b505050919050565b60006131fb826000016133cd565b9050919050565b600061321183600001836133de565b60001c905092915050565b600080600061322b8686613461565b915091506000848061323957fe5b86880990508281111561324d576001820391505b80830392508482106132c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f7700000000000081525060200191505060405180910390fd5b6132d28383876134b4565b93505050509392505050565b6060613340826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135519092919063ffffffff16565b90506000815111156133c85780806020019051602081101561336157600080fd5b81019080805190602001909291905050506133c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061424b602a913960400191505060405180910390fd5b5b505050565b600081600001805490509050919050565b60008183600001805490501161343f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806141bc6022913960400191505060405180910390fd5b82600001828154811061344e57fe5b9060005260206000200154905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8061348e57fe5b848609905083850292508281039150828110156134ac576001820391505b509250929050565b60008082600003831690508083816134c857fe5b0492508085816134d457fe5b04945060018182600003816134e557fe5b04018402850194506000600190508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808602925050509392505050565b60606135608484600085613569565b90509392505050565b6060824710156135c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806141de6026913960400191505060405180910390fd5b6135cd85613712565b61363f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061368f578051825260208201915060208101905060208303925061366c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146136f1576040519150601f19603f3d011682016040523d82523d6000602084013e6136f6565b606091505b5091509150613706828286613725565b92505050949350505050565b600080823b905060008111915050919050565b60608315613735578290506137ea565b6000835111156137485782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137af578082015181840152602081019050613794565b50505050905090810190601f1680156137dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b6000813590506138c281614131565b92915050565b6000813590506138d781614148565b92915050565b6000815190506138ec81614148565b92915050565b6000815190506139018161415f565b92915050565b60008135905061391681614176565b92915050565b60008151905061392b81614176565b92915050565b600081519050613940816141a4565b92915050565b6000815190506139558161418d565b92915050565b60006020828403121561396d57600080fd5b600061397b848285016138b3565b91505092915050565b6000806040838503121561399757600080fd5b60006139a5858286016138b3565b92505060206139b6858286016138b3565b9150509250929050565b6000806000606084860312156139d557600080fd5b60006139e3868287016138b3565b93505060206139f4868287016138b3565b9250506040613a05868287016138c8565b9150509250925092565b600060208284031215613a2157600080fd5b6000613a2f848285016138dd565b91505092915050565b600060208284031215613a4a57600080fd5b6000613a588482850161391c565b91505092915050565b60008060408385031215613a7457600080fd5b6000613a8285828601613907565b9250506020613a93858286016138b3565b9150509250929050565b60008060008060808587031215613ab357600080fd5b6000613ac187828801613907565b9450506020613ad287828801613907565b9350506040613ae3878288016138b3565b9250506060613af4878288016138b3565b91505092959194509250565b600080600080600060a08688031215613b1857600080fd5b6000613b2688828901613931565b9550506020613b37888289016138f2565b9450506040613b488882890161391c565b9350506060613b598882890161391c565b9250506080613b6a88828901613931565b9150509295509295909350565b600060208284031215613b8957600080fd5b6000613b9784828501613946565b91505092915050565b613ba9816140aa565b82525050565b613bb8816140bc565b82525050565b613bc7816140bc565b82525050565b613bd6816140c8565b82525050565b613be58161411f565b82525050565b6000613bf8600f83614099565b91507f496e76616c6964206164647265737300000000000000000000000000000000006000830152602082019050919050565b6000613c38601483614099565b91507f4d617820636170616369747920726561636865640000000000000000000000006000830152602082019050919050565b6000613c78600e83614099565b91507f426f6e6420746f6f20736d616c6c0000000000000000000000000000000000006000830152602082019050919050565b6000613cb8602383614099565b91507f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260008301527f69636500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d1e600e83614099565b91507f426f6e6420746f6f206c617267650000000000000000000000000000000000006000830152602082019050919050565b608082016000820151613d676000850182613e34565b506020820151613d7a6020850182613e34565b506040820151613d8d6040850182613e34565b506060820151613da06060850182613e34565b50505050565b60e082016000820151613dbc6000850182613e34565b506020820151613dcf6020850182613e34565b506040820151613de26040850182613e34565b506060820151613df56060850182613e34565b506080820151613e086080850182613e34565b5060a0820151613e1b60a0850182613e34565b5060c0820151613e2e60c0850182613baf565b50505050565b613e3d816140f2565b82525050565b613e4c816140f2565b82525050565b6000602082019050613e676000830184613ba0565b92915050565b6000604082019050613e826000830185613ba0565b613e8f6020830184613e43565b9392505050565b6000602082019050613eab6000830184613bcd565b92915050565b60006020820190508181036000830152613eca81613beb565b9050919050565b60006020820190508181036000830152613eea81613c2b565b9050919050565b60006020820190508181036000830152613f0a81613c6b565b9050919050565b60006020820190508181036000830152613f2a81613cab565b9050919050565b60006020820190508181036000830152613f4a81613d11565b9050919050565b6000608082019050613f666000830184613d51565b92915050565b600060e082019050613f816000830184613da6565b92915050565b6000602082019050613f9c6000830184613e43565b92915050565b6000604082019050613fb76000830185613e43565b613fc46020830184613ba0565b9392505050565b6000606082019050613fe06000830186613e43565b613fed6020830185613ba0565b613ffa6040830184613e43565b949350505050565b60006040820190506140176000830185613e43565b6140246020830184613bdc565b9392505050565b60006040820190506140406000830185613e43565b61404d6020830184613e43565b9392505050565b60006080820190506140696000830187613e43565b6140766020830186613e43565b6140836040830185613e43565b6140906060830184613bbe565b95945050505050565b600082825260208201905092915050565b60006140b5826140d2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b600061412a826140f2565b9050919050565b61413a816140aa565b811461414557600080fd5b50565b614151816140bc565b811461415c57600080fd5b50565b614168816140c8565b811461417357600080fd5b50565b61417f816140f2565b811461418a57600080fd5b50565b614196816140fc565b81146141a157600080fd5b50565b6141ad81614109565b81146141b857600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f956729b5066bfe8a5b2f80ba41ce60538c2bca053652cd31dc7ccfa2428371f64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD(address)": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay(address)": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio(address)": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "maxPayout(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256,address)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address,address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "redeem(address,address,bool)": {
        "params": {
          "_recipient": "address",
          "_stake": "bool"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "standardizedDebtRatio(address)": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetPrice(address)": {
        "notice": "get asset price from chainlink"
      },
      "bondPrice(address)": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD(address)": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt(address)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(address)": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio(address)": {
        "notice": "calculate current ratio of debt to Necc supply"
      },
      "deposit(uint256,uint256,address,address)": {
        "notice": "deposit bond"
      },
      "maxPayout(address)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256,address)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address,address)": {
        "notice": "calculate amount of Necc available for claim by depositor"
      },
      "percentVestedFor(address,address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address,address,bool)": {
        "notice": "redeem bond for user"
      },
      "standardizedDebtRatio(address)": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7420,
        "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)19335_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)19198_storage)dyn_storage": {
        "base": "t_struct(Info)19198_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)19193_storage)dyn_storage": {
        "base": "t_struct(Payout)19193_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)19229_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)19229_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)19256_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)19256_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)19193_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)19193_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)19229_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)19229_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)19238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)19238_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)19205_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)19205_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)19220_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)19220_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2423_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2422,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2158_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)19229_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 19222,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19224,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19226,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19228,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)19238_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 19231,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19233,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19235,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19237,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)19256_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 19249,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19251,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19253,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19255,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)19205_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 19200,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19202,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19204,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)19247_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 19240,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19242,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19244,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19246,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)19198_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 19195,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19197,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)19193_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 19190,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19192,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2158_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2153,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2157,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)19335_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 19258,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19260,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19262,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nusd",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19264,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 19266,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 19268,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 19270,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "staking",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 19272,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "principles",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(AddressSet)2423_storage"
          },
          {
            "astId": 19276,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "terms",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(Terms)19220_storage)"
          },
          {
            "astId": 19280,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)19238_storage)"
          },
          {
            "astId": 19286,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)19229_storage))"
          },
          {
            "astId": 19290,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19294,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19298,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19302,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 19305,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "info",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_struct(Info)19198_storage)dyn_storage"
          },
          {
            "astId": 19309,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)19205_storage)"
          },
          {
            "astId": 19311,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "18",
            "type": "t_struct(Epoch)19247_storage"
          },
          {
            "astId": 19313,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 19315,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 19317,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "locker",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 19319,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "totalBonus",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 19321,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 19325,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)19256_storage)"
          },
          {
            "astId": 19327,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 19332,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)19193_storage)dyn_storage)"
          },
          {
            "astId": 19334,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)19220_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 19207,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19209,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19211,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19213,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19215,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19217,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19219,
            "contract": "contracts/facets/Bond/BondDepositoryFacet.sol:BondDepositoryFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}