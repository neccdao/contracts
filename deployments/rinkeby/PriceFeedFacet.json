{
  "address": "0xDefe4e283f3Ac687f08F7504BA4657f0C0DA68E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "setLatestAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc87ae1a70b22e962beb111377a5217142ea2a4849e88027a9b3c9548435f46a1",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0xDefe4e283f3Ac687f08F7504BA4657f0C0DA68E5",
    "transactionIndex": 18,
    "gasUsed": "281008",
    "logsBloom": "0x
    "blockHash": "0x94d0410c380378fc6dc9a3e5122d765799b7326b01950d6b1811efe772cd20d2",
    "transactionHash": "0xc87ae1a70b22e962beb111377a5217142ea2a4849e88027a9b3c9548435f46a1",
    "logs": [],
    "blockNumber": 9564355,
    "cumulativeGasUsed": "2631197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d18af1576525fad111bdab922fe38365",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"setLatestAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/VaultPriceFeed/PriceFeedFacet.sol\":\"PriceFeedFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/facets/Vault/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../../lib/LibExchangeStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibExchangeStorage.Storage internal s;\\n\\n    constructor() {\\n        s.contractEntered = false;\\n    }\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n\\n    function contractEntered() internal {\\n        require(!s.contractEntered, \\\"Contract already entered\\\");\\n        s.contractEntered = true;\\n    }\\n\\n    function contractExited() internal {\\n        s.contractEntered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xbd5db119d95cc57b8e1992814ad2bcde8e58d756ee5ab83f4e96121ecf7bc2fe\",\"license\":\"MIT\"},\"contracts/facets/VaultPriceFeed/PriceFeedFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../Vault/Facet.sol\\\";\\n\\ncontract PriceFeedFacet is Facet {\\n    function latestAnswer() public view returns (int256) {\\n        return s.answer;\\n    }\\n\\n    function latestRound() public view returns (uint80) {\\n        return s.roundId;\\n    }\\n\\n    function setLatestAnswer(int256 _answer) public {\\n        onlyGov();\\n        s.roundId = s.roundId + 1;\\n        s.answer = _answer;\\n        s.answers[s.roundId] = _answer;\\n    }\\n\\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        return (_roundId, s.answers[_roundId], 0, 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xa2f38cf9dc55a49f3b806fc03534d6129256c04206763dd40c0c81d70c276350\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"},\"contracts/lib/LibExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\nuint256 constant _NOT_ENTERED = 1;\\nuint256 constant _ENTERED = 2;\\n\\nuint256 constant BASIS_POINTS_DIVISOR = 10000;\\nuint256 constant FUNDING_RATE_PRECISION = 10**6;\\nuint256 constant PRICE_PRECISION = 10**30;\\nuint256 constant NUSD_DECIMALS = 18;\\nuint256 constant ONE_USD = PRICE_PRECISION;\\nuint256 constant POSITION_PROPS_LENGTH = 9;\\n\\nuint256 constant PRICE_SAMPLE_SPACE = 1;\\nuint256 constant MAX_LEVERAGE = 50 * 10000; // 50x\\nuint256 constant LIQUIDATION_FEE_USD = 10 * PRICE_PRECISION; // 10 USD\\nuint256 constant SWAP_FEE_BASIS_POINTS = 30; // 0.3%\\nuint256 constant MARGIN_FEE_BASIS_POINTS = 10; // 0.1%\\nuint256 constant MIN_PROFIT_TIME = 60 * 15; // 15 minutes\\nuint256 constant FUNDING_RATE_FACTOR = 600; // out of 1000\\nuint256 constant FUNDING_INTERVAL = 8 hours;\\n\\nlibrary LibExchangeStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.based.storage\\\");\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        bool contractEntered;\\n        address btc;\\n        address weth;\\n        address nusd;\\n        bool includeAmmPrice;\\n        bool isInitialized;\\n        EnumerableSet.AddressSet tokens;\\n        mapping(address => bool) whitelistedTokens;\\n        mapping(bytes32 => Position) positions;\\n        mapping(address => uint256) tokenDecimals;\\n        mapping(address => uint256) redemptionBasisPoints;\\n        mapping(address => uint256) minProfitBasisPoints;\\n        mapping(address => uint256) tokenBalances;\\n        mapping(address => uint256) nusdAmounts;\\n        mapping(address => uint256) poolAmounts;\\n        mapping(address => uint256) reservedAmounts;\\n        mapping(address => uint256) guaranteedUsd;\\n        mapping(address => uint256) cumulativeFundingRates;\\n        mapping(address => uint256) lastFundingTimes;\\n        mapping(address => uint256) feeReserves;\\n        mapping(address => uint256) tokenWeights;\\n        uint256 totalTokenWeight;\\n        // Router\\n        mapping(address => bool) plugins;\\n        // PriceFeed\\n        mapping(address => address) priceFeeds;\\n        mapping(address => uint256) priceDecimals;\\n        mapping(address => uint256) priceSpreadBasisPoints;\\n        mapping(address => address) baseTokenPairs; // x*y=k AMM Base Pair address i.e. wXUSDC\\n        mapping(address => address) tokenPairs; // x*y=k AMM Pair address i.e. wETHwX\\n        //\\n        int256 answer;\\n        uint80 roundId;\\n        mapping(uint80 => int256) answers;\\n        //\\n        uint256 totalNUSDMinted;\\n        mapping(address => mapping(address => int256)) nusdMinted; // [address][token] => amount\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xe13f4f9ca8cec533477ab32fb6f552f00e8dd2d75b9635b41f64bbb2d26c1961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060000160006101000a81548160ff0219169083151502179055506104168061003d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304ea97b01461005157806350d25bcd1461007f578063668a0f021461009d5780639a6fc8f5146100c7575b600080fd5b61007d6004803603602081101561006757600080fd5b8101908080359060200190929190505050610149565b005b6100876101f9565b6040518082815260200191505060405180910390f35b6100a5610205565b604051808269ffffffffffffffffffff16815260200191505060405180910390f35b6100ff600480360360208110156100dd57600080fd5b81019080803569ffffffffffffffffffff169060200190929190505050610227565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b610151610277565b60016000601b0160009054906101000a900469ffffffffffffffffffff16016000601b0160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550806000601a0181905550806000601c01600080601b0160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000208190555050565b600080601a0154905090565b600080601b0160009054906101000a900469ffffffffffffffffffff16905090565b6000806000806000856000601c0160008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000205460008060009450945094509450945091939590929450565b61027f610281565b565b61028961031c565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610311906103af565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60006103566022836103cf565b91507f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905081810360008301526103c881610349565b9050919050565b60008282526020820190509291505056fea2646970667358221220790e094911bb836bfe0517446fdd0cd8c46675ad314737a3a812d84ad8ccd04564736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806304ea97b01461005157806350d25bcd1461007f578063668a0f021461009d5780639a6fc8f5146100c7575b600080fd5b61007d6004803603602081101561006757600080fd5b8101908080359060200190929190505050610149565b005b6100876101f9565b6040518082815260200191505060405180910390f35b6100a5610205565b604051808269ffffffffffffffffffff16815260200191505060405180910390f35b6100ff600480360360208110156100dd57600080fd5b81019080803569ffffffffffffffffffff169060200190929190505050610227565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b610151610277565b60016000601b0160009054906101000a900469ffffffffffffffffffff16016000601b0160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550806000601a0181905550806000601c01600080601b0160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000208190555050565b600080601a0154905090565b600080601b0160009054906101000a900469ffffffffffffffffffff16905090565b6000806000806000856000601c0160008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000205460008060009450945094509450945091939590929450565b61027f610281565b565b61028961031c565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610311906103af565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60006103566022836103cf565b91507f4c69624469616d6f6e643a20696e76616c696420636f6e7472616374206f776e60008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905081810360008301526103c881610349565b9050919050565b60008282526020820190509291505056fea2646970667358221220790e094911bb836bfe0517446fdd0cd8c46675ad314737a3a812d84ad8ccd04564736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3608,
        "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)10018_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)9905_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibExchangeStorage.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)9905_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(AddressSet)1217_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)952_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)9905_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Position",
        "members": [
          {
            "astId": 9892,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9894,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9896,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9898,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9900,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9902,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 9904,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)952_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 947,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 951,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)10018_storage": {
        "encoding": "inplace",
        "label": "struct LibExchangeStorage.Storage",
        "members": [
          {
            "astId": 9907,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "contractEntered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9909,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "btc",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9911,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "weth",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9913,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "nusd",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9915,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "includeAmmPrice",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9917,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "isInitialized",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9919,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "tokens",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)1217_storage"
          },
          {
            "astId": 9923,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9927,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "positions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_struct(Position)9905_storage)"
          },
          {
            "astId": 9931,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9935,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "redemptionBasisPoints",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9939,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9943,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9947,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "nusdAmounts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9951,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9955,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9959,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9963,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9967,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9971,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "feeReserves",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9975,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9977,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "totalTokenWeight",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 9981,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "plugins",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9985,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 9989,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "priceDecimals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9993,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "priceSpreadBasisPoints",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9997,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "baseTokenPairs",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 10001,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "tokenPairs",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 10003,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "answer",
            "offset": 0,
            "slot": "26",
            "type": "t_int256"
          },
          {
            "astId": 10005,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "roundId",
            "offset": 0,
            "slot": "27",
            "type": "t_uint80"
          },
          {
            "astId": 10009,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "answers",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint80,t_int256)"
          },
          {
            "astId": 10011,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "totalNUSDMinted",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 10017,
            "contract": "contracts/facets/VaultPriceFeed/PriceFeedFacet.sol:PriceFeedFacet",
            "label": "nusdMinted",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}