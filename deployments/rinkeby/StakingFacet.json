{
  "address": "0x0aC2AAd71B4A461d0001b0c6fD2eD23c92752018",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distribute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "length",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibBondStorage.Epoch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "giveLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyInWarmup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "warmupInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gons",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "lock",
              "type": "bool"
            }
          ],
          "internalType": "struct LibBondStorage.Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd065e2cea5c492e99b280e99da66497021a7a6ce3846c8b45e953bb03bdccbdb",
  "receipt": {
    "to": null,
    "from": "0x82FCE134Ae4b8B7aCaE666CB0d575bD8c508Cb98",
    "contractAddress": "0x0aC2AAd71B4A461d0001b0c6fD2eD23c92752018",
    "transactionIndex": 35,
    "gasUsed": "1689981",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x882ba39ecc2cbf70221e8a8fafc074d3d978d47d5e1361673834747acd4dacb5",
    "transactionHash": "0xd065e2cea5c492e99b280e99da66497021a7a6ce3846c8b45e953bb03bdccbdb",
    "logs": [],
    "blockNumber": 9551017,
    "cumulativeGasUsed": "11465310",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5f66fcf5d2ff50cfff03fe1f16a8e50d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBondStorage.Epoch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInWarmup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"warmupInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"internalType\":\"struct LibBondStorage.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"params\":{\"_recipient\":\"address\"}},\"contractBalance()\":{\"returns\":{\"_0\":\"uint\"}},\"giveLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"returnLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"stake(uint256,address)\":{\"params\":{\"_amount\":\"uint\"},\"returns\":{\"_0\":\"bool\"}},\"unstake(uint256,bool)\":{\"params\":{\"_amount\":\"uint\",\"_trigger\":\"bool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"retrieve nNecc from warmup\"},\"contractBalance()\":{\"notice\":\"returns contract Necc holdings, including bonuses provided\"},\"forfeit()\":{\"notice\":\"forfeit nNecc in warmup and retrieve Necc\"},\"giveLockBonus(uint256)\":{\"notice\":\"provide bonus to locked staking contract\"},\"index()\":{\"notice\":\"returns the nNecc index, which tracks rebase growth\"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"returnLockBonus(uint256)\":{\"notice\":\"reclaim bonus from locked staking contract\"},\"stake(uint256,address)\":{\"notice\":\"stake Necc to enter warmup\"},\"unstake(uint256,bool)\":{\"notice\":\"redeem nNecc for Necc\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Bond/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/facets/Bond/Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"../../lib/LibDiamond.sol\\\";\\n\\ncontract Facet {\\n    LibBondStorage.Storage internal s;\\n\\n    function onlyGov() internal view {\\n        LibDiamond.enforceIsContractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0xbc8aae96a7bf7c5a13807bd917e15e9ee9e88e64b68525ce0a309ae56fb45937\",\"license\":\"MIT\"},\"contracts/facets/Bond/StakingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma abicoder v2;\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/LibBondStorage.sol\\\";\\nimport \\\"./Facet.sol\\\";\\n\\ninterface IDistributor {\\n    function distribute() external returns (uint256);\\n}\\n\\ninterface InNecc is IERC20 {\\n    function rebase(uint256 neccProfit_, uint256 epoch_)\\n        external\\n        returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\\ncontract StakingFacet is Facet {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for InNecc;\\n\\n    /**\\n        @notice stake Necc to enter warmup\\n        @param _amount uint\\n        @return bool\\n     */\\n    function stake(uint256 _amount, address _recipient)\\n        external\\n        returns (bool)\\n    {\\n        rebase();\\n\\n        IERC20(s.Necc).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (s.warmupPeriod == 0) {\\n            _send(_recipient, _amount);\\n        } else {\\n            LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\\n            require(!info.lock, \\\"Deposits for account are locked\\\");\\n\\n            s.warmupInfo[_recipient] = LibBondStorage.Claim({\\n                deposit: info.deposit.add(_amount),\\n                gons: info.gons.add(InNecc(s.nNecc).gonsForBalance(_amount)),\\n                expiry: s.epoch.number.add(s.warmupPeriod),\\n                lock: false\\n            });\\n\\n            s.gonsInWarmup = s.gonsInWarmup.add(\\n                InNecc(s.nNecc).gonsForBalance(_amount)\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice retrieve nNecc from warmup\\n        @param _recipient address\\n     */\\n    function claim(address _recipient) public {\\n        LibBondStorage.Claim memory info = s.warmupInfo[_recipient];\\n        if (!info.lock) {\\n            require(\\n                _recipient == msg.sender,\\n                \\\"External claims for account are locked\\\"\\n            );\\n        }\\n\\n        if (s.epoch.number >= info.expiry && info.expiry != 0) {\\n            delete s.warmupInfo[_recipient];\\n            s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\\n\\n            _send(_recipient, InNecc(s.nNecc).balanceForGons(info.gons));\\n        }\\n    }\\n\\n    /**\\n        @notice forfeit nNecc in warmup and retrieve Necc\\n     */\\n    function forfeit() external {\\n        LibBondStorage.Claim memory info = s.warmupInfo[msg.sender];\\n        delete s.warmupInfo[msg.sender];\\n        s.gonsInWarmup = s.gonsInWarmup.sub(info.gons);\\n\\n        IERC20(s.Necc).safeTransfer(msg.sender, info.deposit);\\n    }\\n\\n    /**\\n        @notice redeem nNecc for Necc\\n        @param _amount uint\\n        @param _trigger bool\\n     */\\n    function unstake(uint256 _amount, bool _trigger) external {\\n        if (_trigger) {\\n            rebase();\\n        }\\n        IERC20(s.nNecc).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(s.Necc).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice send staker their amount as sOHM or gOHM\\n     * @param _recipient address\\n     * @param _amount uint\\n     */\\n    function _send(address _recipient, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        InNecc(s.nNecc).safeTransfer(_recipient, _amount); // send as sOHM (equal unit as OHM)\\n        return _amount;\\n    }\\n\\n    //\\n\\n    /**\\n        @notice returns the nNecc index, which tracks rebase growth\\n        @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return InNecc(s.nNecc).index();\\n    }\\n\\n    /**\\n        @notice trigger rebase if epoch over\\n     */\\n    function rebase() public {\\n        if (s.epoch.endTime <= uint256(block.timestamp)) {\\n            InNecc(s.nNecc).rebase(s.epoch.distribute, s.epoch.number);\\n\\n            s.epoch.endTime = s.epoch.endTime.add(s.epoch.length);\\n            s.epoch.number++;\\n\\n            IDistributor(address(this)).distribute();\\n\\n            uint256 balance = contractBalance();\\n            uint256 staked = InNecc(s.nNecc).circulatingSupply();\\n\\n            if (balance <= staked) {\\n                s.epoch.distribute = 0;\\n            } else {\\n                s.epoch.distribute = balance.sub(staked);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns contract Necc holdings, including bonuses provided\\n        @return uint\\n     */\\n    function contractBalance() public view returns (uint256) {\\n        return IERC20(s.Necc).balanceOf(address(this)).add(s.totalBonus);\\n    }\\n\\n    /**\\n        @notice provide bonus to locked staking contract\\n        @param _amount uint\\n     */\\n    function giveLockBonus(uint256 _amount) external {\\n        require(msg.sender == s.locker);\\n        s.totalBonus = s.totalBonus.add(_amount);\\n        IERC20(s.nNecc).safeTransfer(s.locker, _amount);\\n    }\\n\\n    /**\\n        @notice reclaim bonus from locked staking contract\\n        @param _amount uint\\n     */\\n    function returnLockBonus(uint256 _amount) external {\\n        require(msg.sender == s.locker);\\n        s.totalBonus = s.totalBonus.sub(_amount);\\n        IERC20(s.nNecc).safeTransferFrom(s.locker, address(this), _amount);\\n    }\\n\\n    function epoch() public view returns (LibBondStorage.Epoch memory) {\\n        return s.epoch;\\n    }\\n\\n    function warmupInfo(address _recipient)\\n        public\\n        view\\n        returns (LibBondStorage.Claim memory)\\n    {\\n        return s.warmupInfo[_recipient];\\n    }\\n\\n    function supplyInWarmup() public view returns (uint256) {\\n        return InNecc(s.nNecc).balanceForGons(s.gonsInWarmup);\\n    }\\n}\\n\",\"keccak256\":\"0xb9e913cf69c7ea871b9296597679794dfae4059cae42ca65a99080b62609239d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/lib/LibBondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nenum PARAMETER {\\n    VESTING,\\n    PAYOUT,\\n    FEE,\\n    DEBT,\\n    MINPRICE\\n}\\n\\nenum CONTRACTS {\\n    DISTRIBUTOR,\\n    WARMUP,\\n    LOCKER\\n}\\n\\nuint256 constant BCV_ADJUSTMENT_EPOCH_PERIOD = 1; // how many epochs to spread an adjustment across\\n\\nlibrary LibBondStorage {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"necc.dao.bond.storage\\\");\\n\\n    struct Payout {\\n        uint256 amount; // Necc paid\\n        uint256 blockTimestamp; // block number occurred\\n    }\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n\\n    struct DistributorAdjustment {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 minimumPrice; // vs principle value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n        uint256 vestingTerm; // in seconds\\n        bool isLiquidityBond; // Reserve and LP tokens are treated differently, LP uses bond calculator\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // Necc remaining to be paid\\n        uint256 pricePaid; // In DAI, for front end viewing\\n        uint256 lastTime; // Last interaction\\n        uint256 vesting; // Seconds left to vest\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct BondDepositoryAdjustment {\\n        bool add; // addition or subtraction\\n        uint256 delta; // increment\\n        uint256 timeToTarget; // seconds till target\\n        uint256 lastTime; // time when last adjustment made\\n    }\\n    struct Epoch {\\n        uint256 number;\\n        uint256 distribute;\\n        uint256 length;\\n        uint256 endTime;\\n    }\\n\\n    struct Claim {\\n        uint256 deposit;\\n        uint256 gons;\\n        uint256 expiry;\\n        bool lock; // prevents malicious delays\\n    }\\n\\n    // Single global store\\n    struct Storage {\\n        address Necc; // token given as payment for bond\\n        address nNecc; // token given for staking\\n        address nusd; // principle token without price feed\\n        address treasury; // mints Necc when receives principle\\n        address DAO; // receives profit share from bond\\n        address farmDistributor; // receives profit share from bond to distribute to minters\\n        address staking; // to auto-stake payout\\n        //\\n        EnumerableSet.AddressSet principles;\\n        mapping(uint256 => Terms) terms; // stores terms for new bonds\\n        mapping(uint256 => BondDepositoryAdjustment) bondDepositoryAdjustment; // stores adjustment to BCV data\\n        mapping(address => mapping(uint256 => Bond)) bondInfo; // stores bond information for depositors\\n        mapping(uint256 => uint256) totalDebt; // total value of outstanding bonds; used for pricing\\n        mapping(uint256 => uint256) lastDecay; // reference time for debt decay\\n        mapping(uint256 => uint256) nextEpochTimestamp; // block number of next epoch\\n        mapping(uint256 => address) priceFeeds; // price feed of reserve principle not NUSD\\n        //\\n        Info[] info; // stores infof or distribution recipients\\n        mapping(uint256 => DistributorAdjustment) distributorAdjustments;\\n        //\\n        Epoch epoch;\\n        uint256 epochLength;\\n        address distributor;\\n        address locker;\\n        uint256 totalBonus;\\n        uint256 warmupPeriod;\\n        mapping(address => Claim) warmupInfo;\\n        //\\n        uint256 targetSum; // target total Necc as payouts during period\\n        mapping(uint256 => Payout[]) payouts; // storage of all past payouts\\n        uint256 gonsInWarmup; // total gons in warmup period\\n        //\\n        // Always add new storage variable to the end of this struct\\n    }\\n}\\n\",\"keccak256\":\"0xae31412d9ff16d59ccef4eaf14a1c457aafa7474fd287bb033395f62ddf9566e\",\"license\":\"MIT\"},\"contracts/lib/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: invalid contract owner\\\"\\n        );\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) public {\\n        enforceIsContractOwner();\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n\\n        emit OwnershipTransferred(previousOwner, ds.contractOwner);\\n    }\\n\\n    function contractOwner() public view returns (address) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.contractOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8e0219a414dc7e37475a366d0a8c46c60f32a450bc0eb0d076863b09599fe591\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611daf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638b7afe2e116100715780638b7afe2e1461018d578063900cf0cf146101ab5780639ebea88c146101c9578063af14052c146101e5578063f3d86e4a146101ef578063f62ae76a146101f9576100b4565b806303c23670146100b95780631e83409a146100d557806320138641146100f15780632986c0e51461010f5780636746f4c21461012d5780637acb77571461015d575b600080fd5b6100d360048036038101906100ce9190611936565b610215565b005b6100ef60048036038101906100ea919061190d565b61030b565b005b6100f9610590565b6040516101069190611c47565b60405180910390f35b610117610649565b6040516101249190611c47565b60405180910390f35b6101476004803603810190610142919061190d565b6106f2565b6040516101549190611c11565b60405180910390f35b61017760048036038101906101729190611988565b610787565b6040516101849190611bb6565b60405180910390f35b610195610b4d565b6040516101a29190611c47565b60405180910390f35b6101b3610c18565b6040516101c09190611c2c565b60405180910390f35b6101e360048036038101906101de91906119c4565b610c5d565b005b6101ed610d11565b005b6101f7610f9b565b005b610213600480360381019061020e9190611936565b611117565b005b600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027257600080fd5b61028a8160006019015461120f90919063ffffffff16565b600060190181905550610308600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b50565b610313611867565b6000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151610413573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990611bf1565b60405180910390fd5b5b80604001516000601201600001541015801561043457506000816040015114155b1561058c576000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff021916905550506104c681602001516000601e015461133990919063ffffffff16565b6000601e018190555061058a82600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d84602001516040518263ffffffff1660e01b81526004016105359190611c47565b60206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061195f565b6113bc565b505b5050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d6000601e01546040518263ffffffff1660e01b81526004016105f49190611c47565b60206040518083038186803b15801561060c57600080fd5b505afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061195f565b905090565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed919061195f565b905090565b6106fa611867565b6000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b6000610791610d11565b6107e23330856000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b600080601a015414156107ff576107f982846113bc565b50610b43565b610807611867565b6000601b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151156108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90611bd1565b60405180910390fd5b60405180608001604052806108f686846000015161120f90919063ffffffff16565b81526020016109bf600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674886040518263ffffffff1660e01b815260040161095c9190611c47565b60206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061195f565b846020015161120f90919063ffffffff16565b81526020016109e46000601a015460006012016000015461120f90919063ffffffff16565b8152602001600015158152506000601b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050610b38600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674866040518263ffffffff1660e01b8152600401610ad49190611c47565b60206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b24919061195f565b6000601e015461120f90919063ffffffff16565b6000601e0181905550505b6001905092915050565b6000610c136000601901546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb59190611b9b565b60206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061195f565b61120f90919063ffffffff16565b905090565b610c20611891565b6000601201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905090565b8015610c6c57610c6b610d11565b5b610cbe333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b610d0d33836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b5050565b4260006012016003015411610f9957600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663058ecdb46000601201600101546000601201600001546040518363ffffffff1660e01b8152600401610d90929190611c62565b602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de2919061195f565b50610e0660006012016002015460006012016003015461120f90919063ffffffff16565b6000601201600301819055506000601201600001600081548092919060010191905055503073ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa919061195f565b506000610eb5610b4d565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2357600080fd5b505afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b919061195f565b9050808211610f765760008060120160010181905550610f96565b610f89818361133990919063ffffffff16565b6000601201600101819055505b50505b565b610fa3611867565b6000601b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000601b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff021916905550506110b881602001516000601e015461133990919063ffffffff16565b6000601e01819055506111143382600001516000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b50565b600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117457600080fd5b61118c8160006019015461133990919063ffffffff16565b60006019018190555061120c600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b50565b60008082840190508381101561128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6113348363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d8565b505050565b6000828211156113b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600061140e8383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b81905092915050565b6114d2846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d8565b50505050565b606061153a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115c79092919063ffffffff16565b90506000815111156115c25780806020019051602081101561155b57600080fd5b81019080805190602001909291905050506115c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611d50602a913960400191505060405180910390fd5b5b505050565b60606115d684846000856115df565b90509392505050565b60608247101561163a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d2a6026913960400191505060405180910390fd5b61164385611788565b6116b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061170557805182526020820191506020810190506020830392506116e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611767576040519150601f19603f3d011682016040523d82523d6000602084013e61176c565b606091505b509150915061177c82828661179b565b92505050949350505050565b600080823b905060008111915050919050565b606083156117ab57829050611860565b6000835111156117be5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561182557808201518184015260208101905061180a565b50505050905090810190601f1680156118525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000813590506118c881611ce4565b92915050565b6000813590506118dd81611cfb565b92915050565b6000813590506118f281611d12565b92915050565b60008151905061190781611d12565b92915050565b60006020828403121561191f57600080fd5b600061192d848285016118b9565b91505092915050565b60006020828403121561194857600080fd5b6000611956848285016118e3565b91505092915050565b60006020828403121561197157600080fd5b600061197f848285016118f8565b91505092915050565b6000806040838503121561199b57600080fd5b60006119a9858286016118e3565b92505060206119ba858286016118b9565b9150509250929050565b600080604083850312156119d757600080fd5b60006119e5858286016118e3565b92505060206119f6858286016118ce565b9150509250929050565b611a0981611c9c565b82525050565b611a1881611cae565b82525050565b611a2781611cae565b82525050565b6000611a3a601f83611c8b565b91507f4465706f7369747320666f72206163636f756e7420617265206c6f636b6564006000830152602082019050919050565b6000611a7a602683611c8b565b91507f45787465726e616c20636c61696d7320666f72206163636f756e74206172652060008301527f6c6f636b656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151611ae96000850182611b7d565b506020820151611afc6020850182611b7d565b506040820151611b0f6040850182611b7d565b506060820151611b226060850182611a0f565b50505050565b608082016000820151611b3e6000850182611b7d565b506020820151611b516020850182611b7d565b506040820151611b646040850182611b7d565b506060820151611b776060850182611b7d565b50505050565b611b8681611cda565b82525050565b611b9581611cda565b82525050565b6000602082019050611bb06000830184611a00565b92915050565b6000602082019050611bcb6000830184611a1e565b92915050565b60006020820190508181036000830152611bea81611a2d565b9050919050565b60006020820190508181036000830152611c0a81611a6d565b9050919050565b6000608082019050611c266000830184611ad3565b92915050565b6000608082019050611c416000830184611b28565b92915050565b6000602082019050611c5c6000830184611b8c565b92915050565b6000604082019050611c776000830185611b8c565b611c846020830184611b8c565b9392505050565b600082825260208201905092915050565b6000611ca782611cba565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611ced81611c9c565b8114611cf857600080fd5b50565b611d0481611cae565b8114611d0f57600080fd5b50565b611d1b81611cda565b8114611d2657600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212200b94af06764b3f8f3441a1f2e86df88b6a1e958e3f25202ec79b5054f7417dca64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638b7afe2e116100715780638b7afe2e1461018d578063900cf0cf146101ab5780639ebea88c146101c9578063af14052c146101e5578063f3d86e4a146101ef578063f62ae76a146101f9576100b4565b806303c23670146100b95780631e83409a146100d557806320138641146100f15780632986c0e51461010f5780636746f4c21461012d5780637acb77571461015d575b600080fd5b6100d360048036038101906100ce9190611936565b610215565b005b6100ef60048036038101906100ea919061190d565b61030b565b005b6100f9610590565b6040516101069190611c47565b60405180910390f35b610117610649565b6040516101249190611c47565b60405180910390f35b6101476004803603810190610142919061190d565b6106f2565b6040516101549190611c11565b60405180910390f35b61017760048036038101906101729190611988565b610787565b6040516101849190611bb6565b60405180910390f35b610195610b4d565b6040516101a29190611c47565b60405180910390f35b6101b3610c18565b6040516101c09190611c2c565b60405180910390f35b6101e360048036038101906101de91906119c4565b610c5d565b005b6101ed610d11565b005b6101f7610f9b565b005b610213600480360381019061020e9190611936565b611117565b005b600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027257600080fd5b61028a8160006019015461120f90919063ffffffff16565b600060190181905550610308600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b50565b610313611867565b6000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151610413573373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990611bf1565b60405180910390fd5b5b80604001516000601201600001541015801561043457506000816040015114155b1561058c576000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff021916905550506104c681602001516000601e015461133990919063ffffffff16565b6000601e018190555061058a82600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d84602001516040518263ffffffff1660e01b81526004016105359190611c47565b60206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061195f565b6113bc565b505b5050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637965d56d6000601e01546040518263ffffffff1660e01b81526004016105f49190611c47565b60206040518083038186803b15801561060c57600080fd5b505afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061195f565b905090565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed919061195f565b905090565b6106fa611867565b6000601b0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b6000610791610d11565b6107e23330856000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b600080601a015414156107ff576107f982846113bc565b50610b43565b610807611867565b6000601b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151156108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90611bd1565b60405180910390fd5b60405180608001604052806108f686846000015161120f90919063ffffffff16565b81526020016109bf600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674886040518263ffffffff1660e01b815260040161095c9190611c47565b60206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061195f565b846020015161120f90919063ffffffff16565b81526020016109e46000601a015460006012016000015461120f90919063ffffffff16565b8152602001600015158152506000601b0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050610b38600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bd39674866040518263ffffffff1660e01b8152600401610ad49190611c47565b60206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b24919061195f565b6000601e015461120f90919063ffffffff16565b6000601e0181905550505b6001905092915050565b6000610c136000601901546000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb59190611b9b565b60206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c05919061195f565b61120f90919063ffffffff16565b905090565b610c20611891565b6000601201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905090565b8015610c6c57610c6b610d11565b5b610cbe333084600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b610d0d33836000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b5050565b4260006012016003015411610f9957600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663058ecdb46000601201600101546000601201600001546040518363ffffffff1660e01b8152600401610d90929190611c62565b602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de2919061195f565b50610e0660006012016002015460006012016003015461120f90919063ffffffff16565b6000601201600301819055506000601201600001600081548092919060010191905055503073ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa919061195f565b506000610eb5610b4d565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2357600080fd5b505afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b919061195f565b9050808211610f765760008060120160010181905550610f96565b610f89818361133990919063ffffffff16565b6000601201600101819055505b50505b565b610fa3611867565b6000601b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000601b0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549060ff021916905550506110b881602001516000601e015461133990919063ffffffff16565b6000601e01819055506111143382600001516000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b50565b600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117457600080fd5b61118c8160006019015461133990919063ffffffff16565b60006019018190555061120c600060180160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611417909392919063ffffffff16565b50565b60008082840190508381101561128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6113348363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d8565b505050565b6000828211156113b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600061140e8383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112979092919063ffffffff16565b81905092915050565b6114d2846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d8565b50505050565b606061153a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115c79092919063ffffffff16565b90506000815111156115c25780806020019051602081101561155b57600080fd5b81019080805190602001909291905050506115c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611d50602a913960400191505060405180910390fd5b5b505050565b60606115d684846000856115df565b90509392505050565b60608247101561163a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d2a6026913960400191505060405180910390fd5b61164385611788565b6116b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061170557805182526020820191506020810190506020830392506116e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611767576040519150601f19603f3d011682016040523d82523d6000602084013e61176c565b606091505b509150915061177c82828661179b565b92505050949350505050565b600080823b905060008111915050919050565b606083156117ab57829050611860565b6000835111156117be5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561182557808201518184015260208101905061180a565b50505050905090810190601f1680156118525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000813590506118c881611ce4565b92915050565b6000813590506118dd81611cfb565b92915050565b6000813590506118f281611d12565b92915050565b60008151905061190781611d12565b92915050565b60006020828403121561191f57600080fd5b600061192d848285016118b9565b91505092915050565b60006020828403121561194857600080fd5b6000611956848285016118e3565b91505092915050565b60006020828403121561197157600080fd5b600061197f848285016118f8565b91505092915050565b6000806040838503121561199b57600080fd5b60006119a9858286016118e3565b92505060206119ba858286016118b9565b9150509250929050565b600080604083850312156119d757600080fd5b60006119e5858286016118e3565b92505060206119f6858286016118ce565b9150509250929050565b611a0981611c9c565b82525050565b611a1881611cae565b82525050565b611a2781611cae565b82525050565b6000611a3a601f83611c8b565b91507f4465706f7369747320666f72206163636f756e7420617265206c6f636b6564006000830152602082019050919050565b6000611a7a602683611c8b565b91507f45787465726e616c20636c61696d7320666f72206163636f756e74206172652060008301527f6c6f636b656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151611ae96000850182611b7d565b506020820151611afc6020850182611b7d565b506040820151611b0f6040850182611b7d565b506060820151611b226060850182611a0f565b50505050565b608082016000820151611b3e6000850182611b7d565b506020820151611b516020850182611b7d565b506040820151611b646040850182611b7d565b506060820151611b776060850182611b7d565b50505050565b611b8681611cda565b82525050565b611b9581611cda565b82525050565b6000602082019050611bb06000830184611a00565b92915050565b6000602082019050611bcb6000830184611a1e565b92915050565b60006020820190508181036000830152611bea81611a2d565b9050919050565b60006020820190508181036000830152611c0a81611a6d565b9050919050565b6000608082019050611c266000830184611ad3565b92915050565b6000608082019050611c416000830184611b28565b92915050565b6000602082019050611c5c6000830184611b8c565b92915050565b6000604082019050611c776000830185611b8c565b611c846020830184611b8c565b9392505050565b600082825260208201905092915050565b6000611ca782611cba565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611ced81611c9c565b8114611cf857600080fd5b50565b611d0481611cae565b8114611d0f57600080fd5b50565b611d1b81611cda565b8114611d2657600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212200b94af06764b3f8f3441a1f2e86df88b6a1e958e3f25202ec79b5054f7417dca64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "params": {
          "_recipient": "address"
        }
      },
      "contractBalance()": {
        "returns": {
          "_0": "uint"
        }
      },
      "giveLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "returnLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "stake(uint256,address)": {
        "params": {
          "_amount": "uint"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "unstake(uint256,bool)": {
        "params": {
          "_amount": "uint",
          "_trigger": "bool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "retrieve nNecc from warmup"
      },
      "contractBalance()": {
        "notice": "returns contract Necc holdings, including bonuses provided"
      },
      "forfeit()": {
        "notice": "forfeit nNecc in warmup and retrieve Necc"
      },
      "giveLockBonus(uint256)": {
        "notice": "provide bonus to locked staking contract"
      },
      "index()": {
        "notice": "returns the nNecc index, which tracks rebase growth"
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "returnLockBonus(uint256)": {
        "notice": "reclaim bonus from locked staking contract"
      },
      "stake(uint256,address)": {
        "notice": "stake Necc to enter warmup"
      },
      "unstake(uint256,bool)": {
        "notice": "redeem nNecc for Necc"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7420,
        "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)19335_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Info)19198_storage)dyn_storage": {
        "base": "t_struct(Info)19198_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payout)19193_storage)dyn_storage": {
        "base": "t_struct(Payout)19193_storage",
        "encoding": "dynamic_array",
        "label": "struct LibBondStorage.Payout[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)19229_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct LibBondStorage.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)19229_storage)"
      },
      "t_mapping(t_address,t_struct(Claim)19256_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibBondStorage.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)19256_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Payout)19193_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Payout[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payout)19193_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Bond)19229_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)19229_storage"
      },
      "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)19238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.BondDepositoryAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(BondDepositoryAdjustment)19238_storage"
      },
      "t_mapping(t_uint256,t_struct(DistributorAdjustment)19205_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.DistributorAdjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributorAdjustment)19205_storage"
      },
      "t_mapping(t_uint256,t_struct(Terms)19220_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibBondStorage.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)19220_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2423_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2422,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2158_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bond)19229_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Bond",
        "members": [
          {
            "astId": 19222,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19224,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19226,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19228,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "vesting",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BondDepositoryAdjustment)19238_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.BondDepositoryAdjustment",
        "members": [
          {
            "astId": 19231,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19233,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "delta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19235,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "timeToTarget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19237,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Claim)19256_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Claim",
        "members": [
          {
            "astId": 19249,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19251,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19253,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19255,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DistributorAdjustment)19205_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.DistributorAdjustment",
        "members": [
          {
            "astId": 19200,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19202,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19204,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Epoch)19247_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Epoch",
        "members": [
          {
            "astId": 19240,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19242,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19244,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19246,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Info)19198_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Info",
        "members": [
          {
            "astId": 19195,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19197,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payout)19193_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Payout",
        "members": [
          {
            "astId": 19190,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19192,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2158_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2153,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2157,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)19335_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Storage",
        "members": [
          {
            "astId": 19258,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "Necc",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19260,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "nNecc",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19262,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "nusd",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19264,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 19266,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "DAO",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 19268,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "farmDistributor",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 19270,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "staking",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 19272,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "principles",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(AddressSet)2423_storage"
          },
          {
            "astId": 19276,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "terms",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(Terms)19220_storage)"
          },
          {
            "astId": 19280,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "bondDepositoryAdjustment",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BondDepositoryAdjustment)19238_storage)"
          },
          {
            "astId": 19286,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "bondInfo",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)19229_storage))"
          },
          {
            "astId": 19290,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19294,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "lastDecay",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19298,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "nextEpochTimestamp",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 19302,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "priceFeeds",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 19305,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "info",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_struct(Info)19198_storage)dyn_storage"
          },
          {
            "astId": 19309,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distributorAdjustments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(DistributorAdjustment)19205_storage)"
          },
          {
            "astId": 19311,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "18",
            "type": "t_struct(Epoch)19247_storage"
          },
          {
            "astId": 19313,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "epochLength",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 19315,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "distributor",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 19317,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "locker",
            "offset": 0,
            "slot": "24",
            "type": "t_address"
          },
          {
            "astId": 19319,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "totalBonus",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 19321,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "warmupPeriod",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 19325,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "warmupInfo",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Claim)19256_storage)"
          },
          {
            "astId": 19327,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "targetSum",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 19332,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "payouts",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_uint256,t_array(t_struct(Payout)19193_storage)dyn_storage)"
          },
          {
            "astId": 19334,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "gonsInWarmup",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Terms)19220_storage": {
        "encoding": "inplace",
        "label": "struct LibBondStorage.Terms",
        "members": [
          {
            "astId": 19207,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19209,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19211,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19213,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19215,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19217,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19219,
            "contract": "contracts/facets/Bond/StakingFacet.sol:StakingFacet",
            "label": "isLiquidityBond",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}